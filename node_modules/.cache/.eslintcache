[{"/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/index.js":"1","/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/App.js":"2","/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/reportWebVitals.js":"3","/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/store/index.js":"4","/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/Routes/index.js":"5","/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/store/reducers/index.js":"6","/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/pages/Login/register.js":"7","/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/pages/Login/index.js":"8","/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/pages/Home/index.js":"9","/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/pages/AddLead/index.js":"10","/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/pages/Qualification/index.js":"11","/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/pages/LeadsStatus/index.js":"12","/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/pages/AddUser/index.js":"13","/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/pages/Leads/index.js":"14","/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/store/reducers/user.js":"15","/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/pages/AddBranch/index.js":"16","/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/layout/privateLayout/index.js":"17","/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/layout/publicLayout/index.js":"18","/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/theme/light.js":"19","/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/services/user.service.js":"20","/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/store/actions/user.js":"21","/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/layout/privateLayout/header.js":"22","/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/store/constants/index.js":"23","/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/config.js":"24","/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/utils/APICaller.js":"25","/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/layout/privateLayout/menu.js":"26","/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/pages/Reports/index.js":"27","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/index.js":"28","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/App.js":"29","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/reportWebVitals.js":"30","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/store/index.js":"31","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/Routes/index.js":"32","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/store/reducers/index.js":"33","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/pages/Login/register.js":"34","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/pages/Login/index.js":"35","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/pages/Home/index.js":"36","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/pages/Qualification/index.js":"37","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/pages/LeadsStatus/index.js":"38","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/pages/AddLead/index.js":"39","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/pages/AddBranch/index.js":"40","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/pages/Reports/index.js":"41","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/store/reducers/user.js":"42","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/pages/AddUser/index.js":"43","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/pages/Leads/index.js":"44","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/layout/publicLayout/index.js":"45","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/layout/privateLayout/index.js":"46","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/theme/light.js":"47","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/services/user.service.js":"48","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/store/actions/user.js":"49","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/layout/privateLayout/header.js":"50","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/store/constants/index.js":"51","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/config.js":"52","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/utils/APICaller.js":"53","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/layout/privateLayout/menu.js":"54"},{"size":881,"mtime":1647758706000,"results":"55","hashOfConfig":"56"},{"size":223,"mtime":1647758706000,"results":"57","hashOfConfig":"56"},{"size":375,"mtime":1647758706000,"results":"58","hashOfConfig":"56"},{"size":665,"mtime":1647758706000,"results":"59","hashOfConfig":"56"},{"size":1473,"mtime":1664467818884,"results":"60","hashOfConfig":"56"},{"size":358,"mtime":1647758706000,"results":"61","hashOfConfig":"56"},{"size":5103,"mtime":1647758706000,"results":"62","hashOfConfig":"56"},{"size":6628,"mtime":1664465860587,"results":"63","hashOfConfig":"56"},{"size":20294,"mtime":1664471707370,"results":"64","hashOfConfig":"56"},{"size":75564,"mtime":1648054171000,"results":"65","hashOfConfig":"56"},{"size":17504,"mtime":1648195317000,"results":"66","hashOfConfig":"56"},{"size":17091,"mtime":1648195317000,"results":"67","hashOfConfig":"56"},{"size":28272,"mtime":1648195317000,"results":"68","hashOfConfig":"56"},{"size":18576,"mtime":1648195317000,"results":"69","hashOfConfig":"56"},{"size":1232,"mtime":1647758706000,"results":"70","hashOfConfig":"56"},{"size":27358,"mtime":1648195317000,"results":"71","hashOfConfig":"56"},{"size":643,"mtime":1664465978924,"results":"72","hashOfConfig":"56"},{"size":648,"mtime":1664466048504,"results":"73","hashOfConfig":"56"},{"size":15214,"mtime":1647758706000,"results":"74","hashOfConfig":"56"},{"size":3459,"mtime":1648195476000,"results":"75","hashOfConfig":"56"},{"size":462,"mtime":1647758706000,"results":"76","hashOfConfig":"56"},{"size":6882,"mtime":1648195317000,"results":"77","hashOfConfig":"56"},{"size":212,"mtime":1647758706000,"results":"78","hashOfConfig":"56"},{"size":871,"mtime":1648195317000,"results":"79","hashOfConfig":"56"},{"size":1397,"mtime":1648195317000,"results":"80","hashOfConfig":"56"},{"size":1172,"mtime":1664470316875,"results":"81","hashOfConfig":"56"},{"size":16164,"mtime":1664469955052,"results":"82","hashOfConfig":"56"},{"size":881,"mtime":1647758706000,"results":"83","hashOfConfig":"84"},{"size":223,"mtime":1647758706000,"results":"85","hashOfConfig":"84"},{"size":375,"mtime":1647758706000,"results":"86","hashOfConfig":"84"},{"size":665,"mtime":1647758706000,"results":"87","hashOfConfig":"84"},{"size":1473,"mtime":1664467818884,"results":"88","hashOfConfig":"84"},{"size":358,"mtime":1647758706000,"results":"89","hashOfConfig":"84"},{"size":5103,"mtime":1647758706000,"results":"90","hashOfConfig":"84"},{"size":7242,"mtime":1665224479185,"results":"91","hashOfConfig":"84"},{"size":46921,"mtime":1665222115975,"results":"92","hashOfConfig":"84"},{"size":17504,"mtime":1648195317000,"results":"93","hashOfConfig":"84"},{"size":17091,"mtime":1648195317000,"results":"94","hashOfConfig":"84"},{"size":75564,"mtime":1648054171000,"results":"95","hashOfConfig":"84"},{"size":27358,"mtime":1648195317000,"results":"96","hashOfConfig":"84"},{"size":16164,"mtime":1664469955052,"results":"97","hashOfConfig":"84"},{"size":1235,"mtime":1665081770871,"results":"98","hashOfConfig":"84"},{"size":28272,"mtime":1648195317000,"results":"99","hashOfConfig":"84"},{"size":18576,"mtime":1648195317000,"results":"100","hashOfConfig":"84"},{"size":648,"mtime":1664732346185,"results":"101","hashOfConfig":"84"},{"size":643,"mtime":1664732345145,"results":"102","hashOfConfig":"84"},{"size":15214,"mtime":1647758706000,"results":"103","hashOfConfig":"84"},{"size":5602,"mtime":1665221592870,"results":"104","hashOfConfig":"84"},{"size":576,"mtime":1665081653642,"results":"105","hashOfConfig":"84"},{"size":7664,"mtime":1665220318042,"results":"106","hashOfConfig":"84"},{"size":302,"mtime":1665081438474,"results":"107","hashOfConfig":"84"},{"size":1519,"mtime":1665078208937,"results":"108","hashOfConfig":"84"},{"size":1517,"mtime":1664691299442,"results":"109","hashOfConfig":"84"},{"size":1187,"mtime":1665220583231,"results":"110","hashOfConfig":"84"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1at5t5g",{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"126"},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"126"},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},"viyvq4",{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},{"filePath":"218","messages":"219","suppressedMessages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"221","messages":"222","suppressedMessages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":65,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224"},{"filePath":"225","messages":"226","suppressedMessages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"199"},{"filePath":"229","messages":"230","suppressedMessages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"199"},{"filePath":"233","messages":"234","suppressedMessages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"199"},{"filePath":"237","messages":"238","suppressedMessages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"199"},{"filePath":"241","messages":"242","suppressedMessages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"199"},{"filePath":"245","messages":"246","suppressedMessages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},{"filePath":"248","messages":"249","suppressedMessages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"199"},{"filePath":"252","messages":"253","suppressedMessages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"199"},{"filePath":"256","messages":"257","suppressedMessages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},{"filePath":"259","messages":"260","suppressedMessages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},{"filePath":"262","messages":"263","suppressedMessages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},{"filePath":"265","messages":"266","suppressedMessages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268"},{"filePath":"269","messages":"270","suppressedMessages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},{"filePath":"272","messages":"273","suppressedMessages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"276"},{"filePath":"277","messages":"278","suppressedMessages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},{"filePath":"280","messages":"281","suppressedMessages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},{"filePath":"283","messages":"284","suppressedMessages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"199"},{"filePath":"287","messages":"288","suppressedMessages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290"},"/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/index.js",[],[],"/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/App.js",[],[],"/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/reportWebVitals.js",[],[],"/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/store/index.js",[],[],"/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/Routes/index.js",[],[],["291","292"],"/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/store/reducers/index.js",[],[],"/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/pages/Login/register.js",[],[],"/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/pages/Login/index.js",["293","294","295","296","297"],[],"/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/pages/Home/index.js",["298"],[],"import React from \"react\";\r\nimport {\r\n  Paper,\r\n  Box,\r\n  Typography,\r\n  Divider,\r\n  Container,\r\n  InputLabel,\r\n  Select,\r\n  FormControl,\r\n  FormHelperText,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\nimport { theme } from \"../../theme/light\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = (theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 400,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n});\r\nclass Home extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      age: \"\",\r\n    };\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      age: event.target.value,\r\n    });\r\n  };\r\n  render() {\r\n    const { classes } = this.props;\r\n    const { age } = this.state;\r\n    return (\r\n      <ThemeProvider theme={theme}>\r\n        <Box className=\"container\" p={2.5} bgcolor=\"primary.lightBgContainer\">\r\n          <Paper className=\"content lead-page\">\r\n            <Box className=\"page-heading\" mb={3}>\r\n              <Box color=\"text.secondary\" pt={3} pr={2.7} pb={1.8} pl={3}>\r\n                <Typography variant=\"h6\" gutterBottom color=\"inherit\">\r\n                  Dashboard\r\n                </Typography>\r\n              </Box>\r\n              <Divider />\r\n            </Box>\r\n            <Container maxWidth=\"md\">\r\n              <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                  Age\r\n                </InputLabel>\r\n                <Select\r\n                  labelId=\"demo-simple-select-outlined-label\"\r\n                  id=\"demo-simple-select-outlined\"\r\n                  value={age}\r\n                  onChange={(e) => this.handleChange(e)}\r\n                  label=\"Age\"\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  <MenuItem value={10}>Ten</MenuItem>\r\n                  <MenuItem value={20}>Twenty</MenuItem>\r\n                  <MenuItem value={30}>Thirty</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Container>\r\n          </Paper>\r\n        </Box>\r\n      </ThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(useStyles)(Home);\r\n// import React from \"react\";\r\n// import {\r\n//   Paper, Box, Typography\r\n// } from \"@material-ui/core\";\r\n// import { ThemeProvider } from \"@material-ui/core/styles\";\r\n// import { theme } from '../../theme/light';\r\n\r\n// import PropTypes from 'prop-types';\r\n// import clsx from 'clsx';\r\n// import { makeStyles } from '@material-ui/core/styles';\r\n// import {Table, Grid, TextField} from '@material-ui/core';\r\n// import TableBody from '@material-ui/core/TableBody';\r\n// import TableCell from '@material-ui/core/TableCell';\r\n// import TableContainer from '@material-ui/core/TableContainer';\r\n// import TableHead from '@material-ui/core/TableHead';\r\n// import TablePagination from '@material-ui/core/TablePagination';\r\n// import TableRow from '@material-ui/core/TableRow';\r\n// import TableSortLabel from '@material-ui/core/TableSortLabel';\r\n// import Toolbar from '@material-ui/core/Toolbar';\r\n// import Checkbox from '@material-ui/core/Checkbox';\r\n// import IconButton from '@material-ui/core/IconButton';\r\n// import Tooltip from '@material-ui/core/Tooltip';\r\n// import DeleteIcon from '@material-ui/icons/Delete';\r\n// import EditIcon from '@material-ui/icons/Edit';\r\n// import Drawer from '@material-ui/core/Drawer';\r\n// import Button from '@material-ui/core/Button';\r\n// import Divider from '@material-ui/core/Divider';\r\n// import CloseIcon from '@material-ui/icons/Close';\r\n\r\n// function createData(name, calories, fat, carbs, protein) {\r\n//   return { name, calories, fat, carbs, protein };\r\n// }\r\n\r\n// const rows = [\r\n//   createData('Cupcake', 305, 3.7, 67, 4.3),\r\n//   createData('Donut', 452, 25.0, 51, 4.9),\r\n//   createData('Eclair', 262, 16.0, 24, 6.0),\r\n//   createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\r\n//   createData('Gingerbread', 356, 16.0, 49, 3.9),\r\n//   createData('Honeycomb', 408, 3.2, 87, 6.5),\r\n//   createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\r\n//   createData('Jelly Bean', 375, 0.0, 94, 0.0),\r\n//   createData('KitKat', 518, 26.0, 65, 7.0),\r\n//   createData('Lollipop', 392, 0.2, 98, 0.0),\r\n//   createData('Marshmallow', 318, 0, 81, 2.0),\r\n//   createData('Nougat', 360, 19.0, 9, 37.0),\r\n//   createData('Oreo', 437, 18.0, 63, 4.0),\r\n// ];\r\n\r\n// function descendingComparator(a, b, orderBy) {\r\n//   if (b[orderBy] < a[orderBy]) {\r\n//     return -1;\r\n//   }\r\n//   if (b[orderBy] > a[orderBy]) {\r\n//     return 1;\r\n//   }\r\n//   return 0;\r\n// }\r\n\r\n// function getComparator(order, orderBy) {\r\n//   return order === 'desc'\r\n//     ? (a, b) => descendingComparator(a, b, orderBy)\r\n//     : (a, b) => -descendingComparator(a, b, orderBy);\r\n// }\r\n\r\n// function stableSort(array, comparator) {\r\n//   const stabilizedThis = array.map((el, index) => [el, index]);\r\n//   stabilizedThis.sort((a, b) => {\r\n//     const order = comparator(a[0], b[0]);\r\n//     if (order !== 0) return order;\r\n//     return a[1] - b[1];\r\n//   });\r\n//   return stabilizedThis.map((el) => el[0]);\r\n// }\r\n\r\n// const headCells = [\r\n//   { id: 'name', numeric: false, disablePadding: true, label: 'Dessert (100g serving)' },\r\n//   { id: 'calories', numeric: true, disablePadding: false, label: 'Calories' },\r\n//   { id: 'fat', numeric: true, disablePadding: false, label: 'Fat (g)' },\r\n//   { id: 'carbs', numeric: true, disablePadding: false, label: 'Carbs (g)' },\r\n//   { id: 'protein', numeric: true, disablePadding: false, label: 'Action' },\r\n// ];\r\n\r\n// function EnhancedTableHead(props) {\r\n//   const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n//   const createSortHandler = (property) => (event) => {\r\n//     onRequestSort(event, property);\r\n//   };\r\n\r\n//   return (\r\n//     <TableHead>\r\n//       <TableRow>\r\n//         <TableCell padding=\"checkbox\">\r\n//           <Checkbox\r\n//             indeterminate={numSelected > 0 && numSelected < rowCount}\r\n//             checked={rowCount > 0 && numSelected === rowCount}\r\n//             onChange={onSelectAllClick}\r\n//             inputProps={{ 'aria-label': 'select all desserts' }}\r\n//           />\r\n//         </TableCell>\r\n//         {headCells.map((headCell) => (\r\n//           <TableCell\r\n//             key={headCell.id}\r\n//             align={headCell.numeric ? 'right' : 'left'}\r\n//             padding={headCell.disablePadding ? 'none' : 'normal'}\r\n//             sortDirection={orderBy === headCell.id ? order : false}\r\n//           >\r\n//             <TableSortLabel\r\n//               active={orderBy === headCell.id}\r\n//               direction={orderBy === headCell.id ? order : 'asc'}\r\n//               onClick={createSortHandler(headCell.id)}\r\n//             >\r\n//               {headCell.label}\r\n//               {orderBy === headCell.id ? (\r\n//                 <span className={classes.visuallyHidden}>\r\n//                   {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n//                 </span>\r\n//               ) : null}\r\n//             </TableSortLabel>\r\n//           </TableCell>\r\n//         ))}\r\n//       </TableRow>\r\n//     </TableHead>\r\n//   );\r\n// }\r\n\r\n// EnhancedTableHead.propTypes = {\r\n//   classes: PropTypes.object.isRequired,\r\n//   numSelected: PropTypes.number.isRequired,\r\n//   onRequestSort: PropTypes.func.isRequired,\r\n//   onSelectAllClick: PropTypes.func.isRequired,\r\n//   order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n//   orderBy: PropTypes.string.isRequired,\r\n//   rowCount: PropTypes.number.isRequired,\r\n// };\r\n\r\n// const useToolbarStyles = makeStyles((theme) => ({\r\n//   root: {\r\n//     paddingLeft: theme.spacing(2),\r\n//     paddingRight: theme.spacing(1),\r\n//   },\r\n//   highlight:\r\n//     theme.palette.type === 'light'\r\n//       ? {\r\n//           color: theme.palette.primary.light,\r\n//           // backgroundColor: lighten(theme.palette.primary.light, 0.85),\r\n//         }\r\n//       : {\r\n//           color: theme.palette.primary.light,\r\n//           // backgroundColor: theme.palette.primary.dark,\r\n//         },\r\n//   title: {\r\n//     flex: '1 1 100%',\r\n//   },\r\n// }));\r\n\r\n// const EnhancedTableToolbar = (props) => {\r\n//   const classes = useToolbarStyles();\r\n//   const { numSelected } = props;\r\n\r\n//   return (\r\n//     <Toolbar\r\n//       className={clsx(classes.root, {\r\n//         [classes.highlight]: numSelected > 0,\r\n//       })}\r\n//     >\r\n//       {numSelected > 0 ? (\r\n//         <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n//           {numSelected} selected\r\n//         </Typography>\r\n//       ) : (\r\n//         <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n//           Data Table\r\n//         </Typography>\r\n//       )}\r\n\r\n//       {numSelected > 0 ? (\r\n//         <Tooltip title=\"Delete\">\r\n//           <IconButton aria-label=\"delete\">\r\n//             <DeleteIcon />\r\n//           </IconButton>\r\n//         </Tooltip>\r\n//       ) : (\r\n//         <Tooltip title=\"Filter list\">\r\n//           <IconButton aria-label=\"filter list\">\r\n//             {/* <FilterListIcon /> */}\r\n//           </IconButton>\r\n//         </Tooltip>\r\n//       )}\r\n//     </Toolbar>\r\n//   );\r\n// };\r\n\r\n// EnhancedTableToolbar.propTypes = {\r\n//   numSelected: PropTypes.number.isRequired,\r\n// };\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//   root: {\r\n//     width: '100%',\r\n//   },\r\n//   paper: {\r\n//     width: '100%',\r\n//     marginBottom: theme.spacing(2),\r\n//   },\r\n//   table: {\r\n//     minWidth: 750,\r\n//   },\r\n//   visuallyHidden: {\r\n//     border: 0,\r\n//     clip: 'rect(0 0 0 0)',\r\n//     height: 1,\r\n//     margin: -1,\r\n//     overflow: 'hidden',\r\n//     padding: 0,\r\n//     position: 'absolute',\r\n//     top: 20,\r\n//     width: 1,\r\n//   },\r\n// }));\r\n\r\n// function Home() {\r\n//   const classes = useStyles();\r\n//   const [order, setOrder] = React.useState('asc');\r\n//   const [orderBy, setOrderBy] = React.useState('calories');\r\n//   const [selected, setSelected] = React.useState([]);\r\n//   const [page, setPage] = React.useState(0);\r\n//   const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n//   const handleRequestSort = (event, property) => {\r\n//     const isAsc = orderBy === property && order === 'asc';\r\n//     setOrder(isAsc ? 'desc' : 'asc');\r\n//     setOrderBy(property);\r\n//   };\r\n\r\n//   const handleSelectAllClick = (event) => {\r\n//     if (event.target.checked) {\r\n//       const newSelecteds = rows.map((n) => n.name);\r\n//       setSelected(newSelecteds);\r\n//       return;\r\n//     }\r\n//     setSelected([]);\r\n//   };\r\n\r\n//   const handleClick = (event, name) => {\r\n//     const selectedIndex = selected.indexOf(name);\r\n//     let newSelected = [];\r\n\r\n//     if (selectedIndex === -1) {\r\n//       newSelected = newSelected.concat(selected, name);\r\n//     } else if (selectedIndex === 0) {\r\n//       newSelected = newSelected.concat(selected.slice(1));\r\n//     } else if (selectedIndex === selected.length - 1) {\r\n//       newSelected = newSelected.concat(selected.slice(0, -1));\r\n//     } else if (selectedIndex > 0) {\r\n//       newSelected = newSelected.concat(\r\n//         selected.slice(0, selectedIndex),\r\n//         selected.slice(selectedIndex + 1),\r\n//       );\r\n//     }\r\n\r\n//     setSelected(newSelected);\r\n//   };\r\n\r\n//   const handleChangePage = (event, newPage) => {\r\n//     setPage(newPage);\r\n//   };\r\n\r\n//   const handleChangeRowsPerPage = (event) => {\r\n//     setRowsPerPage(parseInt(event.target.value, 10));\r\n//     setPage(0);\r\n//   };\r\n\r\n//   const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n//   const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n// // Drawer start here\r\n\r\n//   const [state, setState] = React.useState({\r\n//     top: false,\r\n//     left: false,\r\n//     bottom: false,\r\n//     right: false,\r\n//   });\r\n\r\n//   const toggleDrawer = (anchor, open) => (event) => {\r\n//     if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n//       return;\r\n//     }\r\n\r\n//     setState({ ...state, [anchor]: open });\r\n//   };\r\n\r\n//   const list = (anchor) => (\r\n//     <Box className=\"share-steps\" height=\"100%\">\r\n//     <Box   display=\"flex\"\r\n//         width=\"100%\"\r\n//         height=\"100%\"\r\n//         flexDirection=\"column\"\r\n//         bgcolor=\"primary.drawerBg\"\r\n//       className={clsx(classes.list, {\r\n//         [classes.fullList]: anchor === 'top' || anchor === 'bottom',\r\n//       })}\r\n//       role=\"presentation\"\r\n\r\n//     >\r\n//       <Box className=\"common-content\" position=\"relative\" height=\"100%\">\r\n//           <Box className=\"sidebar-header\" display=\"flex\" alignItems=\"center\" px={3} py={2.4}>\r\n//             <Box color=\"text.textBlue\">\r\n//               <Typography variant=\"h6\" gutterBottom color=\"inherit\">\r\n//                 Edit\r\n//               </Typography>\r\n//             </Box>\r\n//             <Box\r\n//               className=\"close-drawer cursor-pointer\"\r\n//               display=\"flex\"\r\n//               alignItems=\"center\"\r\n//               color=\"grey.500\"\r\n//               onClick={toggleDrawer(anchor, false)}>\r\n//               <CloseIcon color=\"inherit\" />\r\n//             </Box>\r\n//           </Box>\r\n//           <Divider />\r\n\r\n//           <Box className=\"share-sidebar-content share-mamber-content\" p={3}>\r\n//           <Grid container spacing={2}>\r\n//             <Grid item xs={4}>\r\n//               <TextField type=\"text\" label=\"First Name\" variant=\"outlined\" className=\"custom-textfield\" />\r\n//             </Grid>\r\n//             <Grid item xs={4}>\r\n//               <TextField type=\"text\" label=\"Last Name\" variant=\"outlined\" className=\"custom-textfield\" />\r\n//             </Grid>\r\n//             <Grid item xs={4}>\r\n//               <TextField type=\"text\" label=\"Email Address\" variant=\"outlined\" className=\"custom-textfield\" />\r\n//             </Grid>\r\n//           </Grid>\r\n\r\n//             <Box>\r\n\r\n//             </Box>\r\n//           </Box>\r\n\r\n//           <Box\r\n//           className=\"sidebar-footer\"\r\n//           position=\"absolute\"\r\n//           bottom=\"0\"\r\n//           left=\"0\"\r\n//           width=\"100%\"\r\n//           minHeight=\"82px\"\r\n//           px={3}\r\n//           py={1.5}\r\n//           display=\"flex\"\r\n//           alignItems=\"center\"\r\n//           boxSizing=\"border-box\"\r\n//           bgcolor=\"primary.drawerBg\">\r\n//           <Box  pr={1} width=\"150px\" boxSizing=\"border-box\">\r\n//             <Button variant=\"outlined\" className=\"cancel-button\" disableElevation size=\"large\" onClick={toggleDrawer(anchor, false)}>\r\n//               Cancel\r\n//             </Button>\r\n//           </Box>\r\n//           <Box width=\"150px\" boxSizing=\"border-box\">\r\n//             <Button variant=\"contained\" color=\"primary\" className=\"next-button\" disableElevation size=\"large\">\r\n//               Update\r\n//             </Button>\r\n//           </Box>\r\n//         </Box>\r\n//         </Box>\r\n//     </Box>\r\n//     </Box>\r\n\r\n//     // Drawer End here\r\n//     )\r\n//   return (\r\n//     <ThemeProvider theme={theme}>\r\n//     <Box className=\"container\" p={2.5}  bgcolor=\"primary.lightBgContainer\">\r\n//       <Paper className=\"content lead-page\" >\r\n//         {/* <Box className=\"page-heading\" mb={3}>\r\n//           <Box color=\"text.secondary\" pt={3} pr={2.7} pb={1.8} pl={3}>\r\n//             <Typography variant=\"h6\" gutterBottom color=\"inherit\">\r\n//               Dashboard\r\n//             </Typography>\r\n//           </Box>\r\n//           <Divider />\r\n//         </Box> */}\r\n\r\n// <div className=\"data-table\">\r\n// <div className={classes.root}>\r\n//       <Paper className={classes.paper} elevation={0}>\r\n//         <EnhancedTableToolbar numSelected={selected.length} />\r\n//         <TableContainer>\r\n//           <Table\r\n//             className={classes.table}\r\n//             aria-labelledby=\"tableTitle\"\r\n//             aria-label=\"enhanced table\"\r\n//           >\r\n//             <EnhancedTableHead\r\n//               classes={classes}\r\n//               numSelected={selected.length}\r\n//               order={order}\r\n//               orderBy={orderBy}\r\n//               onSelectAllClick={handleSelectAllClick}\r\n//               onRequestSort={handleRequestSort}\r\n//               rowCount={rows.length}\r\n//             />\r\n//             <TableBody>\r\n//               {stableSort(rows, getComparator(order, orderBy))\r\n//                 .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n//                 .map((row, index) => {\r\n//                   const isItemSelected = isSelected(row.name);\r\n//                   const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n//                   return (\r\n//                     <TableRow\r\n//                       hover\r\n//                       onClick={(event) => handleClick(event, row.name)}\r\n//                       role=\"checkbox\"\r\n//                       aria-checked={isItemSelected}\r\n//                       tabIndex={-1}\r\n//                       key={row.name}\r\n//                       selected={isItemSelected}\r\n//                     >\r\n//                       <TableCell padding=\"checkbox\">\r\n//                         <Checkbox\r\n//                           checked={isItemSelected}\r\n//                           inputProps={{ 'aria-labelledby': labelId }}\r\n//                         />\r\n//                       </TableCell>\r\n//                       <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n//                         {row.name}\r\n//                       </TableCell>\r\n//                       <TableCell align=\"right\">{row.calories}</TableCell>\r\n//                       <TableCell align=\"right\">{row.fat}</TableCell>\r\n//                       <TableCell align=\"right\">{row.carbs}</TableCell>\r\n//                       <TableCell align=\"right\">\r\n// <Box display=\"inline-flex\" alignItems=\"center\" ml=\"auto\">\r\n//   <Box className=\"edit-icon cursor-pointer\" mr={1} bgcolor=\"primary.primaryIconBg\" color=\"text.textSecondary\"  width=\"27px\" height=\"27px\" borderRadius=\"5px\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n//     <EditIcon style={{ fontSize: 18 }} color=\"inherit\" />\r\n//     </Box>\r\n//     <Box className=\"edit-icon cursor-pointer\" bgcolor=\"error.lightIcon\" color=\"error.dark\"  width=\"27px\" height=\"27px\" borderRadius=\"5px\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n//     <DeleteIcon style={{ fontSize: 18 }} color=\"inherit\" />\r\n//     </Box>\r\n// </Box>\r\n//                       </TableCell>\r\n//                     </TableRow>\r\n//                   );\r\n//                 })}\r\n//               {emptyRows > 0 && (\r\n//                 <TableRow >\r\n//                   <TableCell colSpan={6} />\r\n//                 </TableRow>\r\n//               )}\r\n//             </TableBody>\r\n//           </Table>\r\n//         </TableContainer>\r\n//         <TablePagination\r\n//           rowsPerPageOptions={[5, 10, 25]}\r\n//           component=\"div\"\r\n//           count={rows.length}\r\n//           rowsPerPage={rowsPerPage}\r\n//           page={page}\r\n//           onPageChange={handleChangePage}\r\n//           onRowsPerPageChange={handleChangeRowsPerPage}\r\n//         />\r\n//       </Paper>\r\n\r\n//     </div>\r\n// </div>\r\n\r\n// {/* Drawer Map here */}\r\n// <div>\r\n//       {['right'].map((anchor) => (\r\n//         <React.Fragment key={anchor}>\r\n//           <Button onClick={toggleDrawer(anchor, true)}>{anchor}</Button>\r\n//           <Drawer className=\"common-sidebar \" anchor={anchor} open={state[anchor]} onClose={toggleDrawer(anchor, false)}>\r\n//             {list(anchor)}\r\n//           </Drawer>\r\n//         </React.Fragment>\r\n//       ))}\r\n//     </div>\r\n\r\n//     {/* Drawer Map here */}\r\n//       </Paper>\r\n//     </Box>\r\n//   </ThemeProvider>\r\n//   );\r\n// }\r\n\r\n// export default Home;\r\n","/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/pages/AddLead/index.js",["299","300","301","302"],[],"/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/pages/Qualification/index.js",["303"],[],"/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/pages/LeadsStatus/index.js",["304"],[],"/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/pages/AddUser/index.js",["305","306","307","308","309","310"],[],"/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/pages/Leads/index.js",["311","312","313"],[],"/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/store/reducers/user.js",[],[],"/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/pages/AddBranch/index.js",["314","315","316","317"],[],"/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/layout/privateLayout/index.js",["318"],[],"import { Outlet } from \"react-router\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport AppHeader from \"./header\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst PrivateLayout = () => {\r\n  // const loginTokenRes = useSelector((state) => state.user.loginToken);\r\n  const loginTokenRes = true;\r\n  console.log(\"loginTokenRes\", loginTokenRes);\r\n  return (\r\n    <>\r\n      {loginTokenRes ? (\r\n        <div className=\"private-pages\">\r\n          <AppHeader />\r\n          <div>\r\n            <Outlet />\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <Navigate to=\"/\" />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PrivateLayout;\r\n","/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/layout/publicLayout/index.js",["319"],[],"import { Outlet } from \"react-router\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nconst PublicLayout = () => {\r\n  //const loginTokenRes = useSelector((state) => state.user.loginToken);\r\n  const loginTokenRes = true;\r\n  console.log(\"loginTokenRes\", loginTokenRes);\r\n  console.log(\"PublicLayout\");\r\n  return (\r\n    <>\r\n      {!loginTokenRes ? (\r\n        <div className=\"public-pages\">\r\n          <div className=\"public-container\">\r\n            <Outlet />\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <Navigate to=\"/dashboard\" />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PublicLayout;\r\n","/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/theme/light.js",[],[],"/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/services/user.service.js",["320"],[],"/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/store/actions/user.js",[],[],"/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/layout/privateLayout/header.js",["321","322","323","324","325","326","327","328","329","330"],[],"/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/store/constants/index.js",[],[],"/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/config.js",[],[],"/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/utils/APICaller.js",["331","332"],[],"/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/layout/privateLayout/menu.js",["333","334"],[],"/Users/abhijeetsingh/My Data/my data/Learn React/eduorg/src/pages/Reports/index.js",["335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359"],[],"/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/index.js",[],[],["360","361"],"/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/App.js",[],[],"/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/reportWebVitals.js",[],[],"/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/store/index.js",[],[],"/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/Routes/index.js",[],[],"/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/store/reducers/index.js",[],[],"/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/pages/Login/register.js",[],[],"/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/pages/Login/index.js",["362","363","364","365","366","367","368","369","370","371","372","373","374"],[],"/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/pages/Home/index.js",["375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439"],[],"import React from \"react\";\r\nimport \"date-fns\";\r\nimport {\r\n  Paper,\r\n  Box,\r\n  Typography,\r\n  Divider,\r\n  Container,\r\n  InputLabel,\r\n  Select,\r\n  FormControl,\r\n  FormHelperText,\r\n  MenuItem,\r\n  Grid,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport { Table, TextField, CircularProgress } from \"@material-ui/core\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport { connect } from \"react-redux\";\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\nimport { theme } from \"../../theme/light\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport ReactHTMLTableToExcel from \"react-html-table-to-excel\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport UserService from \"../../services/user.service\";\r\nimport moment from \"moment\";\r\n\r\nconst useStyles = (theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      marginTop: theme.spacing(4),\r\n    },\r\n  },\r\n  roots: {\r\n    width: \"100%\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n  },\r\n  papers: {\r\n    width: \"100%\",\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n\r\n  formControl: {\r\n    marginTop: theme.spacing(2),\r\n    minWidth: 300,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n});\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"facilityName\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Facility Name\",\r\n  },\r\n  // {\r\n  //   id: \"vehicleType\",\r\n  //   numeric: false,\r\n  //   disablePadding: false,\r\n  //   label: \"Vehicle Type\",\r\n  // },\r\n  {\r\n    id: \"checkin\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Total Check In\",\r\n  },\r\n  {\r\n    id: \"checkout\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Total Check Out\",\r\n  },\r\n  {\r\n    id: \"total\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Total\",\r\n  },\r\n];\r\n\r\nconst paymentHeadCells = [\r\n  {\r\n    id: \"online\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Online\",\r\n  },\r\n  {\r\n    id: \"cash\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Cash\",\r\n  },\r\n  {\r\n    id: \"exempt\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Exempt\",\r\n  },\r\n  {\r\n    id: \"total\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Total\",\r\n  },\r\n];\r\nlet rows = [];\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {/* <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ \"aria-label\": \"select all desserts\" }}\r\n          />\r\n        </TableCell> */}\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? \"right\" : \"left\"}\r\n            padding={headCell.disablePadding ? \"none\" : \"normal\"}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  console.log(\"getComparator\", order);\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nclass Home extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      age: \"\",\r\n      startDate: new Date(),\r\n      endDate: new Date() + 1,\r\n      deviceuniqueid: \"Web\",\r\n      token: \"339CFB64EDC6E94C5577CD68319E72AB6732C711AE661427AC83931B33F05CC4\",\r\n      mappingList: [],\r\n      consolidates: \"\",\r\n      type: \"Daily\",\r\n      facilityid: \"0\",\r\n      dailyReport: [],\r\n      selected: [],\r\n      order: \"asc\",\r\n      orderBy: \"calories\",\r\n      selected: [],\r\n      page: 0,\r\n      rowsPerPage: 10,\r\n      names: [],\r\n      instanceId: \"0\",\r\n      facilityName: \"Consolidate\",\r\n      totalCheckIn: 0,\r\n      totalCheckOut: 0,\r\n      totalCash: 0,\r\n      totalOnline: 0,\r\n      totalNoCash: 0,\r\n      totalAmount: 0,\r\n      mISReport: [],\r\n      overallCheckin: 0,\r\n      overallCheckout: 0,\r\n      overallPayment: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { userDetails } = this.props;\r\n    const { loginToken, facilityid } = userDetails;\r\n\r\n    this.setState(\r\n      {\r\n        token: loginToken,\r\n        // facilityid: facilityid,\r\n      },\r\n      () => {\r\n        this.getRefreshMapping();\r\n\r\n        // this.getDailyAdminParkingStatusReport();\r\n      }\r\n    );\r\n  }\r\n\r\n  getRefreshMapping = async () => {\r\n    const { deviceuniqueid, token } = this.state;\r\n\r\n    try {\r\n      const response = await UserService.mapping(deviceuniqueid, token);\r\n      const { status, data } = response;\r\n      const { groupmapping } = data;\r\n      const { data: list } = groupmapping;\r\n      console.log(\"response after getRefreshMapping --> \", response);\r\n      if (data && list.length > 0) {\r\n        let id = [];\r\n        let names = [];\r\n        list.map((item, index) => {\r\n          id.push(item.facilityid);\r\n          names.push(item.name);\r\n        });\r\n        id = id.join(\",\");\r\n        this.setState(\r\n          {\r\n            mappingList: list,\r\n            consolidates: id,\r\n            names,\r\n          },\r\n          () => {\r\n            this.getDailyMISAdminReport();\r\n          }\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"error getRefreshMapping\", error);\r\n    }\r\n  };\r\n\r\n  getDailyMISAdminReport = async () => {\r\n    const { token, facilityid, startDate, instanceId, consolidates } =\r\n      this.state;\r\n    console.log(\"datattatatatatatata\", facilityid, \"   \", consolidates);\r\n    let facilityidTosend = \"\";\r\n    if (facilityid === \"0\") {\r\n      facilityidTosend = consolidates;\r\n    } else {\r\n      facilityidTosend = facilityid;\r\n    }\r\n    let inputdate = moment(startDate).format(\"DD-MMM-YYYY\"); // 01-Oct-2022\r\n\r\n    try {\r\n      const response = await UserService.AdminMISStatusReport(\r\n        facilityidTosend,\r\n        token,\r\n        inputdate\r\n      );\r\n\r\n      console.log(\"response after getDailyMISAdminReport \", response);\r\n      const { data: res } = response;\r\n      const { data } = res;\r\n      if (res.respCode === 1 && data.length > 0) {\r\n        let totalcheckin = 0;\r\n        let totalcheckout = 0;\r\n        let totalPayment = 0;\r\n        let totalVehicle = 0;\r\n        let carIn = 0;\r\n        let carOut = 0;\r\n        let bikeIn = 0;\r\n        let bikeOut = 0;\r\n        let bicycleIn = 0;\r\n        let bicycleOut = 0;\r\n        let cashCount = 0;\r\n        let onlineCount = 0;\r\n        let noCashCount = 0;\r\n\r\n        let overallCheckin = 0;\r\n        let overallCheckout = 0;\r\n        let overallPayment = 0;\r\n\r\n        let vehicleArray = [];\r\n\r\n        const paymentValue = {\r\n          2: \"Cash\",\r\n          3: \"Online\",\r\n          5: \"Exempt\",\r\n        };\r\n        let paymentArray = [];\r\n\r\n        let amountArray = [];\r\n\r\n        const vechicles = {\r\n          1: \"Bike\",\r\n          2: \"Car\",\r\n          4: \"Bicycle\",\r\n        };\r\n\r\n        let finalArray = [];\r\n        for (let a = 0; a < data.length; a++) {\r\n          totalcheckin = 0;\r\n          totalcheckout = 0;\r\n          totalPayment = 0;\r\n          totalVehicle = 0;\r\n          carIn = 0;\r\n          carOut = 0;\r\n          bikeIn = 0;\r\n          bikeOut = 0;\r\n          bicycleIn = 0;\r\n          bicycleOut = 0;\r\n          cashCount = 0;\r\n          onlineCount = 0;\r\n          noCashCount = 0;\r\n\r\n          const { checkin, checkout, payment, facilityname } = data[a];\r\n          if (checkin) {\r\n            for (let i = 0; i < checkin.length; i++) {\r\n              const { vehicletype, vehiclecount } = checkin[i];\r\n              const vehicleName = vechicles[vehicletype];\r\n              const ifExist = vehicleArray.findIndex(\r\n                (value, index) => value === vehicleName\r\n              );\r\n              if (ifExist == -1) {\r\n                vehicleArray.push(vehicleName);\r\n              }\r\n\r\n              carIn = vehicleName == \"Car\" ? vehiclecount : carIn;\r\n              bikeIn = vehicleName == \"Bike\" ? vehiclecount : bikeIn;\r\n              bicycleIn = vehicleName == \"Bicycle\" ? vehiclecount : bicycleIn;\r\n\r\n              totalcheckin = totalcheckin + vehiclecount;\r\n            }\r\n            console.log(\"checkin data\", carIn);\r\n          }\r\n          if (checkout) {\r\n            for (let i = 0; i < checkout.length; i++) {\r\n              const { vehicletype, vehiclecount } = checkout[i];\r\n              const vehicleName = vechicles[vehicletype];\r\n              const ifExist = vehicleArray.findIndex(\r\n                (value, index) => value === vehicleName\r\n              );\r\n              if (ifExist == -1) {\r\n                vehicleArray.push(vehicleName);\r\n              }\r\n\r\n              carOut = vehicleName == \"Car\" ? vehiclecount : carOut;\r\n              bikeOut = vehicleName == \"Bike\" ? vehiclecount : bikeOut;\r\n              bicycleOut = vehicleName == \"Bicycle\" ? vehiclecount : bicycleOut;\r\n\r\n              totalcheckout = totalcheckout + vehiclecount;\r\n            }\r\n          }\r\n\r\n          if (payment) {\r\n            for (let i = 0; i < payment.length; i++) {\r\n              const { paymentmode, amountcollected } = payment[i];\r\n              const paymentName = paymentValue[paymentmode];\r\n              const ifExist = paymentArray.findIndex(\r\n                (value, index) => value === paymentName\r\n              );\r\n              if (ifExist == -1) {\r\n                paymentArray.push(paymentName);\r\n              }\r\n\r\n              cashCount =\r\n                paymentName == \"Cash\" ? amountcollected / 100 : cashCount;\r\n              onlineCount =\r\n                paymentName == \"Online\" ? amountcollected / 100 : onlineCount;\r\n              noCashCount =\r\n                paymentName == \"Exempt\" ? amountcollected / 100 : noCashCount;\r\n\r\n              if (cashCount !== 0) {\r\n                amountArray.push(cashCount);\r\n              } else if (onlineCount !== 0) {\r\n                amountArray.push(onlineCount);\r\n              } else if (noCashCount !== 0) {\r\n                amountArray.push(noCashCount);\r\n              }\r\n\r\n              if (paymentmode !== 5) {\r\n                totalPayment = totalPayment + amountcollected / 100;\r\n              }\r\n            }\r\n          }\r\n\r\n          overallCheckin = overallCheckin + totalcheckin;\r\n          overallCheckout = overallCheckout + totalcheckout;\r\n          overallPayment = overallPayment + totalPayment;\r\n          let objectToShow = {\r\n            facilityNameToShow: facilityname,\r\n            totalCarin: carIn,\r\n            totalCarout: carOut,\r\n            totalBikein: bikeIn,\r\n            totalBikeout: bikeOut,\r\n            totalBicyclein: bicycleIn,\r\n            totalBicycleout: bicycleOut,\r\n            totalPayment,\r\n            totalcheckin,\r\n            totalcheckout,\r\n          };\r\n\r\n          finalArray.push(objectToShow);\r\n        }\r\n\r\n        this.setState({\r\n          dailyReport: finalArray,\r\n          overallCheckin,\r\n          overallCheckout,\r\n          overallPayment,\r\n          totalCheckIn: totalcheckin,\r\n          totalCheckOut: totalcheckout,\r\n          totalCash: cashCount,\r\n          totalOnline: onlineCount,\r\n          totalNoCash: noCashCount,\r\n          totalAmount: totalPayment,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(\"error getDailyMISAdminReport\", error);\r\n    }\r\n  };\r\n\r\n  getMonthlyMISAdminReport = async () => {\r\n    const { token, facilityid, startDate, instanceId, consolidates } =\r\n      this.state;\r\n\r\n    let facilityidTosend = \"\";\r\n    if (facilityid === \"0\") {\r\n      facilityidTosend = consolidates;\r\n    } else {\r\n      facilityidTosend = facilityid;\r\n    }\r\n    let inputdate = moment(startDate).format(\"MMM-YYYY\"); // 01-Oct-2022\r\n\r\n    try {\r\n      const response = await UserService.AdminMonthlyMISStatusReport(\r\n        facilityidTosend,\r\n        token,\r\n        inputdate\r\n      );\r\n\r\n      console.log(\"response after getMonthlyMISAdminReport \", response);\r\n\r\n      const { data: res } = response;\r\n      const { data } = res;\r\n      if (res.respCode === 1 && data.length > 0) {\r\n        let totalcheckin = 0;\r\n        let totalcheckout = 0;\r\n        let totalPayment = 0;\r\n        let totalVehicle = 0;\r\n        let carIn = 0;\r\n        let carOut = 0;\r\n        let bikeIn = 0;\r\n        let bikeOut = 0;\r\n        let bicycleIn = 0;\r\n        let bicycleOut = 0;\r\n        let cashCount = 0;\r\n        let onlineCount = 0;\r\n        let noCashCount = 0;\r\n\r\n        let overallCheckin = 0;\r\n        let overallCheckout = 0;\r\n        let overallPayment = 0;\r\n\r\n        let vehicleArray = [];\r\n\r\n        const paymentValue = {\r\n          2: \"Cash\",\r\n          3: \"Online\",\r\n          5: \"Exempt\",\r\n        };\r\n        let paymentArray = [];\r\n\r\n        let amountArray = [];\r\n\r\n        const vechicles = {\r\n          1: \"Bike\",\r\n          2: \"Car\",\r\n          4: \"Bicycle\",\r\n        };\r\n\r\n        let finalArray = [];\r\n        for (let a = 0; a < data.length; a++) {\r\n          totalcheckin = 0;\r\n          totalcheckout = 0;\r\n          totalPayment = 0;\r\n          totalVehicle = 0;\r\n          carIn = 0;\r\n          carOut = 0;\r\n          bikeIn = 0;\r\n          bikeOut = 0;\r\n          bicycleIn = 0;\r\n          bicycleOut = 0;\r\n          cashCount = 0;\r\n          onlineCount = 0;\r\n          noCashCount = 0;\r\n\r\n          const { checkin, checkout, payment, facilityname } = data[a];\r\n          if (checkin) {\r\n            for (let i = 0; i < checkin.length; i++) {\r\n              const { vehicletype, vehiclecount } = checkin[i];\r\n              const vehicleName = vechicles[vehicletype];\r\n              const ifExist = vehicleArray.findIndex(\r\n                (value, index) => value === vehicleName\r\n              );\r\n              if (ifExist == -1) {\r\n                vehicleArray.push(vehicleName);\r\n              }\r\n\r\n              carIn = vehicleName == \"Car\" ? vehiclecount : carIn;\r\n              bikeIn = vehicleName == \"Bike\" ? vehiclecount : bikeIn;\r\n              bicycleIn = vehicleName == \"Bicycle\" ? vehiclecount : bicycleIn;\r\n\r\n              totalcheckin = totalcheckin + vehiclecount;\r\n            }\r\n            console.log(\"checkin data\", carIn);\r\n          }\r\n          if (checkout) {\r\n            for (let i = 0; i < checkout.length; i++) {\r\n              const { vehicletype, vehiclecount } = checkout[i];\r\n              const vehicleName = vechicles[vehicletype];\r\n              const ifExist = vehicleArray.findIndex(\r\n                (value, index) => value === vehicleName\r\n              );\r\n              if (ifExist == -1) {\r\n                vehicleArray.push(vehicleName);\r\n              }\r\n\r\n              carOut = vehicleName == \"Car\" ? vehiclecount : carOut;\r\n              bikeOut = vehicleName == \"Bike\" ? vehiclecount : bikeOut;\r\n              bicycleOut = vehicleName == \"Bicycle\" ? vehiclecount : bicycleOut;\r\n\r\n              totalcheckout = totalcheckout + vehiclecount;\r\n            }\r\n          }\r\n\r\n          if (payment) {\r\n            for (let i = 0; i < payment.length; i++) {\r\n              const { paymentmode, amountcollected } = payment[i];\r\n              const paymentName = paymentValue[paymentmode];\r\n              const ifExist = paymentArray.findIndex(\r\n                (value, index) => value === paymentName\r\n              );\r\n              if (ifExist == -1) {\r\n                paymentArray.push(paymentName);\r\n              }\r\n\r\n              cashCount =\r\n                paymentName == \"Cash\" ? amountcollected / 100 : cashCount;\r\n              onlineCount =\r\n                paymentName == \"Online\" ? amountcollected / 100 : onlineCount;\r\n              noCashCount =\r\n                paymentName == \"Exempt\" ? amountcollected / 100 : noCashCount;\r\n\r\n              if (cashCount !== 0) {\r\n                amountArray.push(cashCount);\r\n              } else if (onlineCount !== 0) {\r\n                amountArray.push(onlineCount);\r\n              } else if (noCashCount !== 0) {\r\n                amountArray.push(noCashCount);\r\n              }\r\n\r\n              if (paymentmode !== 5) {\r\n                totalPayment = totalPayment + amountcollected / 100;\r\n              }\r\n            }\r\n          }\r\n\r\n          overallCheckin = overallCheckin + totalcheckin;\r\n          overallCheckout = overallCheckout + totalcheckout;\r\n          overallPayment = overallPayment + totalPayment;\r\n          let objectToShow = {\r\n            facilityNameToShow: facilityname,\r\n            totalCarin: carIn,\r\n            totalCarout: carOut,\r\n            totalBikein: bikeIn,\r\n            totalBikeout: bikeOut,\r\n            totalBicyclein: bicycleIn,\r\n            totalBicycleout: bicycleOut,\r\n            totalPayment,\r\n            totalcheckin,\r\n            totalcheckout,\r\n          };\r\n\r\n          finalArray.push(objectToShow);\r\n        }\r\n\r\n        this.setState({\r\n          dailyReport: finalArray,\r\n          overallCheckin,\r\n          overallCheckout,\r\n          overallPayment,\r\n          totalCheckIn: totalcheckin,\r\n          totalCheckOut: totalcheckout,\r\n          totalCash: cashCount,\r\n          totalOnline: onlineCount,\r\n          totalNoCash: noCashCount,\r\n          totalAmount: totalPayment,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(\"error getMonthlyMISAdminReport\", error);\r\n    }\r\n  };\r\n\r\n  // getDailyAdminParkingStatusReport = async () => {\r\n  //   const { token, facilityid, startDate } = this.state;\r\n\r\n  //   let inputdatetime = moment(startDate).format(\"DD-MMM-YYYY\"); // 01-Oct-2022\r\n\r\n  //   try {\r\n  //     const response = await UserService.AdminParkingStatusReport(\r\n  //       facilityid,\r\n  //       token,\r\n  //       inputdatetime\r\n  //     );\r\n\r\n  //     console.log(\"response after getDailyAdminParkingStatusReport \", response);\r\n  //     const { data: res } = response;\r\n  //     if (res.respCode === 1 && res) {\r\n  //       const { checkin, checkout, payment } = res;\r\n\r\n  //       let totalcheckin = 0;\r\n  //       let totalcheckout = 0;\r\n  //       let totalPayment = 0;\r\n  //       let totalVehicle = 0;\r\n  //       let carIn = 0;\r\n  //       let carOut = 0;\r\n  //       let bikeIn = 0;\r\n  //       let bikeOut = 0;\r\n  //       let bicycleIn = 0;\r\n  //       let bicycleOut = 0;\r\n  //       let autoIn = 0;\r\n  //       let autoOut = 0;\r\n\r\n  //       let vehicleArray = [];\r\n  //       const vechicles = {\r\n  //         1: \"Bike\",\r\n  //         2: \"Car\",\r\n  //         3: \"Auto\",\r\n  //         4: \"Bicycle\",\r\n  //       };\r\n  //       if (checkin) {\r\n  //         for (let i = 0; i < checkin.length; i++) {\r\n  //           const { vehicletype, vehiclecount } = checkin[i];\r\n  //           const vehicleName = vechicles[vehicletype];\r\n  //           const ifExist = vehicleArray.findIndex(\r\n  //             (value, index) => value === vehicleName\r\n  //           );\r\n  //           if (ifExist == -1) {\r\n  //             vehicleArray.push(vehicleName);\r\n  //           }\r\n\r\n  //           carIn = vehicleName == \"Car\" ? vehiclecount : carIn;\r\n  //           bikeIn = vehicleName == \"Bike\" ? vehiclecount : bikeIn;\r\n  //           bicycleIn = vehicleName == \"Bicycle\" ? vehiclecount : bicycleIn;\r\n  //           autoIn = vehicleName == \"Auto\" ? vehiclecount : autoIn;\r\n\r\n  //           totalcheckin = totalcheckin + vehiclecount;\r\n  //         }\r\n  //         console.log(\"checkin data\", carIn);\r\n  //       }\r\n  //       if (checkout) {\r\n  //         for (let i = 0; i < checkout.length; i++) {\r\n  //           const { vehicletype, vehiclecount } = checkout[i];\r\n  //           const vehicleName = vechicles[vehicletype];\r\n  //           const ifExist = vehicleArray.findIndex(\r\n  //             (value, index) => value === vehicleName\r\n  //           );\r\n  //           if (ifExist == -1) {\r\n  //             vehicleArray.push(vehicleName);\r\n  //           }\r\n\r\n  //           carOut = vehicleName == \"Car\" ? vehiclecount : carOut;\r\n  //           bikeOut = vehicleName == \"Bike\" ? vehiclecount : bikeOut;\r\n  //           bicycleOut = vehicleName == \"Bicycle\" ? vehiclecount : bicycleOut;\r\n  //           autoOut = vehicleName == \"Auto\" ? vehiclecount : autoOut;\r\n\r\n  //           totalcheckout = totalcheckout + vehiclecount;\r\n  //         }\r\n  //       }\r\n\r\n  //       const paymentValue = {\r\n  //         2: \"Cash\",\r\n  //         3: \"Online\",\r\n  //         5: \"Exempt\",\r\n  //       };\r\n  //       let paymentArray = [];\r\n  //       // let colorArray = [(opacity = 1) => `#2E7D32`,(opacity = 1) => `#FD0002`,(opacity = 1) => `#00266B`];\r\n  //       let colorArray = [];\r\n\r\n  //       let amountArray = [];\r\n  //       let cashCount = 0;\r\n  //       let onlineCount = 0;\r\n  //       let noCashCount = 0;\r\n\r\n  //       if (payment) {\r\n  //         for (let i = 0; i < payment.length; i++) {\r\n  //           const { paymentmode, amountcollected } = payment[i];\r\n  //           const paymentName = paymentValue[paymentmode];\r\n  //           const ifExist = paymentArray.findIndex(\r\n  //             (value, index) => value === paymentName\r\n  //           );\r\n  //           if (ifExist == -1) {\r\n  //             paymentArray.push(paymentName);\r\n  //           }\r\n\r\n  //           cashCount =\r\n  //             paymentName == \"Cash\" ? amountcollected / 100 : cashCount;\r\n  //           onlineCount =\r\n  //             paymentName == \"Online\" ? amountcollected / 100 : onlineCount;\r\n  //           noCashCount =\r\n  //             paymentName == \"Exempt\" ? amountcollected / 100 : noCashCount;\r\n\r\n  //           if (cashCount !== 0) {\r\n  //             amountArray.push(cashCount);\r\n  //           } else if (onlineCount !== 0) {\r\n  //             amountArray.push(onlineCount);\r\n  //           } else if (noCashCount !== 0) {\r\n  //             amountArray.push(noCashCount);\r\n  //           }\r\n  //           if (paymentmode === 2) {\r\n  //             colorArray.push((opacity = 1) => `#2E7D32`);\r\n  //           } else if (paymentmode === 3) {\r\n  //             colorArray.push((opacity = 1) => `#FD0002`);\r\n  //           } else if (paymentmode === 5) {\r\n  //             colorArray.push((opacity = 1) => `#00266B`);\r\n  //           }\r\n  //           if (paymentmode !== 5) {\r\n  //             totalPayment = totalPayment + amountcollected / 100;\r\n  //           }\r\n  //         }\r\n  //       }\r\n\r\n  //       let finalArray = [];\r\n\r\n  //       let objCar = {\r\n  //         name: \"Car\",\r\n  //         totalin: carIn,\r\n  //         totalout: carOut,\r\n  //       };\r\n  //       finalArray.push(objCar);\r\n  //       let objBike = {\r\n  //         name: \"Bike\",\r\n  //         totalin: bikeIn,\r\n  //         totalout: bikeOut,\r\n  //       };\r\n  //       finalArray.push(objBike);\r\n  //       let objBicycle = {\r\n  //         name: \"Bicycle\",\r\n  //         totalin: bicycleIn,\r\n  //         totalout: bicycleOut,\r\n  //       };\r\n  //       finalArray.push(objBicycle);\r\n\r\n  //       this.setState({\r\n  //         dailyReport: finalArray,\r\n  //         totalCheckIn: totalcheckin,\r\n  //         totalCheckOut: totalcheckout,\r\n  //         totalCash: cashCount,\r\n  //         totalOnline: onlineCount,\r\n  //         totalNoCash: noCashCount,\r\n  //         totalAmount: totalPayment,\r\n  //       });\r\n  //     }\r\n  //   } catch (error) {\r\n  //     console.log(\"error getDailyAdminParkingStatusReport\", error);\r\n  //   }\r\n  // };\r\n\r\n  // getMonthlyAdminParkingStatusReport = async (inputdate) => {\r\n  //   const { token, facilityid, startDate } = this.state;\r\n  //   let inputdatetime = moment(inputdate).format(\"MMM-YYYY\"); // 01-Oct-2022\r\n\r\n  //   try {\r\n  //     const response = await UserService.AdminMonthlyParkingStatusReport(\r\n  //       facilityid,\r\n  //       token,\r\n  //       inputdatetime\r\n  //     );\r\n\r\n  //     console.log(\r\n  //       \"response after getMonthlyAdminParkingStatusReport \",\r\n  //       response\r\n  //     );\r\n  //     const { data: res } = response;\r\n  //     if (res.respCode === 1 && res) {\r\n  //       const { checkin, checkout, payment } = res;\r\n\r\n  //       let totalcheckin = 0;\r\n  //       let totalcheckout = 0;\r\n  //       let totalPayment = 0;\r\n  //       let totalVehicle = 0;\r\n  //       let carIn = 0;\r\n  //       let carOut = 0;\r\n  //       let bikeIn = 0;\r\n  //       let bikeOut = 0;\r\n  //       let bicycleIn = 0;\r\n  //       let bicycleOut = 0;\r\n  //       let autoIn = 0;\r\n  //       let autoOut = 0;\r\n\r\n  //       let vehicleArray = [];\r\n  //       const vechicles = {\r\n  //         1: \"Bike\",\r\n  //         2: \"Car\",\r\n  //         3: \"Auto\",\r\n  //         4: \"Bicycle\",\r\n  //       };\r\n  //       if (checkin) {\r\n  //         for (let i = 0; i < checkin.length; i++) {\r\n  //           const { vehicletype, vehiclecount } = checkin[i];\r\n  //           const vehicleName = vechicles[vehicletype];\r\n  //           const ifExist = vehicleArray.findIndex(\r\n  //             (value, index) => value === vehicleName\r\n  //           );\r\n  //           if (ifExist == -1) {\r\n  //             vehicleArray.push(vehicleName);\r\n  //           }\r\n\r\n  //           carIn = vehicleName == \"Car\" ? vehiclecount : carIn;\r\n  //           bikeIn = vehicleName == \"Bike\" ? vehiclecount : bikeIn;\r\n  //           bicycleIn = vehicleName == \"Bicycle\" ? vehiclecount : bicycleIn;\r\n  //           autoIn = vehicleName == \"Auto\" ? vehiclecount : autoIn;\r\n\r\n  //           totalcheckin = totalcheckin + vehiclecount;\r\n  //         }\r\n  //         console.log(\"checkin data\", carIn);\r\n  //       }\r\n  //       if (checkout) {\r\n  //         for (let i = 0; i < checkout.length; i++) {\r\n  //           const { vehicletype, vehiclecount } = checkout[i];\r\n  //           const vehicleName = vechicles[vehicletype];\r\n  //           const ifExist = vehicleArray.findIndex(\r\n  //             (value, index) => value === vehicleName\r\n  //           );\r\n  //           if (ifExist == -1) {\r\n  //             vehicleArray.push(vehicleName);\r\n  //           }\r\n\r\n  //           carOut = vehicleName == \"Car\" ? vehiclecount : carOut;\r\n  //           bikeOut = vehicleName == \"Bike\" ? vehiclecount : bikeOut;\r\n  //           bicycleOut = vehicleName == \"Bicycle\" ? vehiclecount : bicycleOut;\r\n  //           autoOut = vehicleName == \"Auto\" ? vehiclecount : autoOut;\r\n\r\n  //           totalcheckout = totalcheckout + vehiclecount;\r\n  //         }\r\n  //       }\r\n\r\n  //       const paymentValue = {\r\n  //         2: \"Cash\",\r\n  //         3: \"Online\",\r\n  //         5: \"Exempt\",\r\n  //       };\r\n  //       let paymentArray = [];\r\n  //       // let colorArray = [(opacity = 1) => `#2E7D32`,(opacity = 1) => `#FD0002`,(opacity = 1) => `#00266B`];\r\n  //       let colorArray = [];\r\n\r\n  //       let amountArray = [];\r\n  //       let cashCount = 0;\r\n  //       let onlineCount = 0;\r\n  //       let noCashCount = 0;\r\n\r\n  //       if (payment) {\r\n  //         for (let i = 0; i < payment.length; i++) {\r\n  //           const { paymentmode, amountcollected } = payment[i];\r\n  //           const paymentName = paymentValue[paymentmode];\r\n  //           const ifExist = paymentArray.findIndex(\r\n  //             (value, index) => value === paymentName\r\n  //           );\r\n  //           if (ifExist == -1) {\r\n  //             paymentArray.push(paymentName);\r\n  //           }\r\n\r\n  //           cashCount =\r\n  //             paymentName == \"Cash\" ? amountcollected / 100 : cashCount;\r\n  //           onlineCount =\r\n  //             paymentName == \"Online\" ? amountcollected / 100 : onlineCount;\r\n  //           noCashCount =\r\n  //             paymentName == \"Exempt\" ? amountcollected / 100 : noCashCount;\r\n\r\n  //           if (cashCount !== 0) {\r\n  //             amountArray.push(cashCount);\r\n  //           } else if (onlineCount !== 0) {\r\n  //             amountArray.push(onlineCount);\r\n  //           } else if (noCashCount !== 0) {\r\n  //             amountArray.push(noCashCount);\r\n  //           }\r\n  //           if (paymentmode === 2) {\r\n  //             colorArray.push((opacity = 1) => `#2E7D32`);\r\n  //           } else if (paymentmode === 3) {\r\n  //             colorArray.push((opacity = 1) => `#FD0002`);\r\n  //           } else if (paymentmode === 5) {\r\n  //             colorArray.push((opacity = 1) => `#00266B`);\r\n  //           }\r\n  //           if (paymentmode !== 5) {\r\n  //             totalPayment = totalPayment + amountcollected / 100;\r\n  //           }\r\n  //         }\r\n  //       }\r\n\r\n  //       let finalArray = [];\r\n\r\n  //       let objCar = {\r\n  //         name: \"Car\",\r\n  //         totalin: carIn,\r\n  //         totalout: carOut,\r\n  //       };\r\n  //       finalArray.push(objCar);\r\n  //       let objBike = {\r\n  //         name: \"Bike\",\r\n  //         totalin: bikeIn,\r\n  //         totalout: bikeOut,\r\n  //       };\r\n  //       finalArray.push(objBike);\r\n  //       let objBicycle = {\r\n  //         name: \"Bicycle\",\r\n  //         totalin: bicycleIn,\r\n  //         totalout: bicycleOut,\r\n  //       };\r\n  //       finalArray.push(objBicycle);\r\n\r\n  //       this.setState({\r\n  //         dailyReport: finalArray,\r\n  //         totalCheckIn: totalcheckin,\r\n  //         totalCheckOut: totalcheckout,\r\n  //         totalCash: cashCount,\r\n  //         totalOnline: onlineCount,\r\n  //         totalNoCash: noCashCount,\r\n  //         totalAmount: totalPayment,\r\n  //       });\r\n  //     }\r\n  //   } catch (error) {\r\n  //     console.log(\"error getMonthlyAdminParkingStatusReport\", error);\r\n  //   }\r\n  // };\r\n\r\n  handleChange = (event) => {\r\n    const { mappingList, type } = this.state;\r\n\r\n    console.log(\"first\", event.target.value);\r\n    let name = \"\";\r\n    for (let i = 0; i < mappingList.length; i++) {\r\n      console.log(\"first\", mappingList[i][\"facilityid\"]);\r\n      if (event.target.value === mappingList[i][\"facilityid\"]) {\r\n        name = mappingList[i][\"name\"];\r\n      }\r\n    }\r\n    if (!name) {\r\n      name = \"Consolidate\";\r\n    }\r\n    console.log(\"name\", name);\r\n    this.setState(\r\n      {\r\n        facilityid: event.target.value,\r\n        facilityName: name,\r\n        dailyReport: [],\r\n        totalCheckIn: 0,\r\n        totalCheckOut: 0,\r\n        totalCash: 0,\r\n        totalOnline: 0,\r\n        totalNoCash: 0,\r\n        totalAmount: 0,\r\n        overallCheckin: 0,\r\n        overallCheckout: 0,\r\n        overallPayment: 0,\r\n      },\r\n      () => {\r\n        if (type === \"Daily\") {\r\n          this.getDailyMISAdminReport();\r\n          // this.getDailyAdminParkingStatusReport();\r\n        } else {\r\n          // this.getMonthlyAdminParkingStatusReport();\r\n          this.getMonthlyMISAdminReport();\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  handleTypeChange = (event) => {\r\n    this.setState(\r\n      {\r\n        type: event.target.value,\r\n        dailyReport: [],\r\n        totalCheckIn: 0,\r\n        totalCheckOut: 0,\r\n        totalCash: 0,\r\n        totalOnline: 0,\r\n        totalNoCash: 0,\r\n        totalAmount: 0,\r\n        overallCheckin: 0,\r\n        overallCheckout: 0,\r\n        overallPayment: 0,\r\n      },\r\n      () => {\r\n        if (event.target.value === \"Daily\") {\r\n          //this.getDailyAdminParkingStatusReport();\r\n          this.getDailyMISAdminReport();\r\n        } else {\r\n          // this.getMonthlyAdminParkingStatusReport();\r\n          this.getMonthlyMISAdminReport();\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  handleDateChange = (date) => {\r\n    const { type } = this.state;\r\n    console.log(date);\r\n    this.setState(\r\n      {\r\n        startDate: date,\r\n        dailyReport: [],\r\n        totalCheckIn: 0,\r\n        totalCheckOut: 0,\r\n        totalCash: 0,\r\n        totalOnline: 0,\r\n        totalNoCash: 0,\r\n        totalAmount: 0,\r\n        overallCheckin: 0,\r\n        overallCheckout: 0,\r\n        overallPayment: 0,\r\n        //endDate: date + 1,\r\n      },\r\n      () => {\r\n        if (type === \"Daily\") {\r\n          //this.getDailyAdminParkingStatusReport();\r\n          this.getDailyMISAdminReport();\r\n        } else {\r\n          // this.getMonthlyAdminParkingStatusReport();\r\n          this.getMonthlyMISAdminReport();\r\n        }\r\n      }\r\n    );\r\n  };\r\n  handleEndDateChange = (date) => {\r\n    this.setState({\r\n      endDate: date,\r\n    });\r\n  };\r\n\r\n  handleRequestSort = (event, property) => {\r\n    const { orderBy, order } = this.state;\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    this.setState({\r\n      order: isAsc ? \"desc\" : \"asc\",\r\n    });\r\n    this.setState({\r\n      orderBy: property,\r\n    });\r\n  };\r\n\r\n  handleSelectAllClick = (event) => {\r\n    const { allBranch } = this.state;\r\n    if (event.target.checked) {\r\n      const newSelecteds = allBranch.map((n) => n.id);\r\n\r\n      this.setState({\r\n        selected: newSelecteds,\r\n      });\r\n      return;\r\n    }\r\n    this.setState({ selected: [] });\r\n  };\r\n\r\n  handleClick = (event, name) => {\r\n    const { selected } = this.state;\r\n    console.log(selected);\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    this.setState({\r\n      selected: newSelected,\r\n    });\r\n  };\r\n\r\n  handleChangePage = (event, newPage) => {\r\n    this.setState({ page: newPage });\r\n  };\r\n\r\n  handleChangeRowsPerPage = (event) => {\r\n    this.setState({ rowsPerPage: parseInt(event.target.value, 10) });\r\n\r\n    this.setState({ page: 0 });\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const {\r\n      instanceId,\r\n      startDate,\r\n      endDate,\r\n      mappingList,\r\n      type,\r\n      rowsPerPage,\r\n      page,\r\n      selected,\r\n      orderBy,\r\n      order,\r\n      dailyReport,\r\n      facilityName,\r\n      totalCheckIn,\r\n      totalCheckOut,\r\n      totalCash,\r\n      totalOnline,\r\n      totalNoCash,\r\n      totalAmount,\r\n      overallCheckin,\r\n      overallCheckout,\r\n      overallPayment,\r\n      facilityid,\r\n    } = this.state;\r\n\r\n    console.log(\"dailyReportdailyReportdailyReport\", dailyReport);\r\n    const rows = dailyReport;\r\n    const emptyRows =\r\n      rowsPerPage -\r\n      Math.min(rowsPerPage, dailyReport.length - page * rowsPerPage);\r\n\r\n    const isSelected = (id) => selected.indexOf(id) !== -1;\r\n\r\n    console.log(\"mappingList\", mappingList, \" type\", type);\r\n    return (\r\n      <ThemeProvider theme={theme}>\r\n        <Box className=\"container\" p={2.5} bgcolor=\"primary.lightBgContainer\">\r\n          <Paper className=\"content lead-page\">\r\n            <Box className=\"page-heading\" mb={3}>\r\n              <Box color=\"text.secondary\" pt={3} pr={2.7} pb={1.8} pl={3}>\r\n                <Typography variant=\"h6\" gutterBottom color=\"inherit\">\r\n                  Dashboard\r\n                </Typography>\r\n              </Box>\r\n              <Divider />\r\n            </Box>\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n              <Grid container justifyContent=\"space-evenly\">\r\n                <FormControl variant=\"standard\" className={classes.formControl}>\r\n                  <InputLabel htmlFor=\"age-native-simple\">\r\n                    Select Facility\r\n                  </InputLabel>\r\n                  <Select\r\n                    native\r\n                    value={facilityid}\r\n                    placeholder={\"Facility Name\"}\r\n                    onChange={(e, index) => {\r\n                      this.handleChange(e);\r\n                    }}\r\n                  >\r\n                    <option value=\"0\">Consolidated</option>\r\n\r\n                    {mappingList.map((data, index) => {\r\n                      return (\r\n                        <option key={index.toString()} value={data.facilityid}>\r\n                          {data.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                  </Select>\r\n                </FormControl>\r\n                <FormControl variant=\"standard\" className={classes.formControl}>\r\n                  <InputLabel htmlFor=\"age-native-simple\">\r\n                    Select Type\r\n                  </InputLabel>\r\n                  <Select\r\n                    native\r\n                    value={type}\r\n                    placeholder={\"Age\"}\r\n                    onChange={(e) => this.handleTypeChange(e)}\r\n                  >\r\n                    {/* <option aria-label=\"None\" value=\"NA\" /> */}\r\n                    <option value={\"Daily\"}>Daily</option>\r\n                    <option value={\"Monthly\"}>Monthly</option>\r\n                  </Select>\r\n                </FormControl>\r\n\r\n                <KeyboardDatePicker\r\n                  disableToolbar\r\n                  variant=\"inline\"\r\n                  format=\"dd/MM/yyyy\"\r\n                  margin=\"normal\"\r\n                  id=\"date-picker-inline\"\r\n                  label=\"Date\"\r\n                  value={startDate}\r\n                  onChange={(date) => this.handleDateChange(date)}\r\n                  KeyboardButtonProps={{\r\n                    \"aria-label\": \"change date\",\r\n                  }}\r\n                />\r\n                {/* <KeyboardDatePicker\r\n                  disableToolbar\r\n                  variant=\"inline\"\r\n                  format=\"dd/MM/yyyy\"\r\n                  margin=\"normal\"\r\n                  id=\"date-picker-inline\"\r\n                  label=\"End Date\"\r\n                  minDate={startDate}\r\n                  value={endDate}\r\n                  onChange={(date) => this.handleEndDateChange(date)}\r\n                  KeyboardButtonProps={{\r\n                    \"aria-label\": \"change date\",\r\n                  }}\r\n                /> */}\r\n                {/* <div className={classes.root}>\r\n                  <Button variant=\"contained\" size=\"small\" color=\"primary\">\r\n                    Submit\r\n                  </Button>\r\n                </div> */}\r\n              </Grid>\r\n            </MuiPickersUtilsProvider>\r\n\r\n            {/* <div className=\"data-table\">\r\n              <div className={classes.roots}>\r\n                <Paper className={classes.papers} elevation={0}>\r\n                  <TableContainer>\r\n                    <Table\r\n                      className={classes.table}\r\n                      aria-labelledby=\"tableTitle\"\r\n                      aria-label=\"enhanced table\"\r\n                    >\r\n                      <TableHead>\r\n                        <TableRow>\r\n                          {headCells.map((headCell) => (\r\n                            <TableCell\r\n                              key={headCell.id}\r\n                              align={\"left\"}\r\n                              padding={\"none\"}\r\n                            >\r\n                              <TableSortLabel>{headCell.label}</TableSortLabel>\r\n                            </TableCell>\r\n                          ))}\r\n                        </TableRow>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                        {rows.map((Lead, index) => {\r\n                          console.log(\"first\", Lead);\r\n                          const isItemSelected = isSelected(Lead.id);\r\n                          const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                          return (\r\n                            <TableRow\r\n                              hover\r\n                              tabIndex={-1}\r\n                              key={index}\r\n                              selected={isItemSelected}\r\n                            >\r\n                              <TableCell\r\n                                component=\"th\"\r\n                                id={labelId}\r\n                                scope=\"row\"\r\n                                padding=\"none\"\r\n                                align=\"left\"\r\n                                color=\"green\"\r\n                              >\r\n                                {facilityName}\r\n                              </TableCell>\r\n                              <TableCell\r\n                                component=\"th\"\r\n                                id={labelId}\r\n                                scope=\"row\"\r\n                                padding=\"none\"\r\n                                align=\"left\"\r\n                                color=\"green\"\r\n                              >\r\n                                {Lead.name}\r\n                              </TableCell>\r\n                              <TableCell align=\"left\">{Lead.totalin}</TableCell>\r\n                              <TableCell align=\"left\">\r\n                                {Lead.totalout}\r\n                              </TableCell>\r\n                            </TableRow>\r\n                          );\r\n                        })}\r\n                        {instanceId ? null : (\r\n                          <TableRow>\r\n                            <TableCell colSpan={1}>Total</TableCell>\r\n                            <TableCell align=\"left\">{totalCheckIn}</TableCell>\r\n                            <TableCell align=\"left\">{totalCheckOut}</TableCell>\r\n                            <TableCell align=\"left\">{totalAmount}</TableCell>\r\n                          </TableRow>\r\n                        )}\r\n\r\n                        <TableRow>\r\n                          <TableCell>Tax</TableCell>\r\n                          <TableCell align=\"right\">rate</TableCell>\r\n                          <TableCell align=\"right\">ohh</TableCell>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                          <TableCell colSpan={2}>Total</TableCell>\r\n                          <TableCell align=\"right\">ok</TableCell>\r\n                        </TableRow>\r\n                        {emptyRows > 0 && (\r\n                          <TableRow>\r\n                            <TableCell colSpan={6} />\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                </Paper>\r\n              </div>\r\n            </div> */}\r\n            <div>\r\n              <ReactHTMLTableToExcel\r\n                id=\"test-table-xls-button\"\r\n                className=\"download-table-xls-button\"\r\n                table=\"emp\"\r\n                filename=\"tablexls\"\r\n                sheet=\"tablexls\"\r\n                buttonText=\"Download as XLS\"\r\n              />\r\n\r\n              <table id=\"emp\" className=\"table all_domain_table\">\r\n                <thead className=\"text-white bg-gray-700\">\r\n                  <tr>\r\n                    <th className=\"above-column\">Facility Name</th>\r\n\r\n                    <th colspan=\"3\" className=\"above-column\">\r\n                      Total Check In\r\n                    </th>\r\n\r\n                    <th colspan=\"3\" className=\"above-column\">\r\n                      Total Check Out\r\n                    </th>\r\n\r\n                    <th className=\"above-column\">Payment (Rs)</th>\r\n                  </tr>\r\n                </thead>\r\n                {rows.map((data, index) => {\r\n                  console.log(\"dataToLoad\", data);\r\n                  const {\r\n                    facilityNameToShow,\r\n                    totalBicyclein,\r\n                    totalBicycleout,\r\n                    totalBikein,\r\n                    totalBikeout,\r\n                    totalCarin,\r\n                    totalCarout,\r\n                    totalPayment,\r\n                    totalcheckin,\r\n                    totalcheckout,\r\n                  } = data;\r\n                  return (\r\n                    <>\r\n                      <tr>\r\n                        <td rowspan=\"2\">{facilityNameToShow}</td>\r\n                        <td colspan=\"3\">{totalcheckin}</td>\r\n                        <td colspan=\"3\">{totalcheckout}</td>\r\n                        <td rowspan=\"2\">{totalPayment}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>Car: {totalCarin}</td>\r\n                        <td>Bike: {totalBikein}</td>\r\n                        <td>Bicycle: {totalBicyclein}</td>\r\n                        <td>Car: {totalCarout}</td>\r\n                        <td>Bike: {totalBikeout}</td>\r\n                        <td>Bicycle: {totalBicycleout}</td>\r\n                      </tr>\r\n                    </>\r\n                  );\r\n                })}\r\n                {rows && rows.length > 1 ? (\r\n                  <tfoot>\r\n                    <tr>\r\n                      <td className=\"align-middle \" colSpan={1}>\r\n                        Total:\r\n                      </td>\r\n\r\n                      <td colspan=\"3\" className=\"align-middle\">\r\n                        {overallCheckin}\r\n                      </td>\r\n\r\n                      <td colspan=\"3\" className=\"align-middle\">\r\n                        {overallCheckout}\r\n                      </td>\r\n\r\n                      <td className=\"align-middle\">{overallPayment}</td>\r\n                    </tr>\r\n                  </tfoot>\r\n                ) : null}\r\n              </table>\r\n            </div>\r\n          </Paper>\r\n        </Box>\r\n      </ThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  userDetails: state.user,\r\n});\r\n\r\nexport default connect(mapStateToProps)(withStyles(useStyles)(Home));\r\n","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/pages/Qualification/index.js",["440"],[],"\nimport React from \"react\";\nimport {\n  Paper, Box, Typography\n} from \"@material-ui/core\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport { theme } from '../../theme/light';\n\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {Table, Grid, TextField} from '@material-ui/core';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport Drawer from '@material-ui/core/Drawer';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport CloseIcon from '@material-ui/icons/Close';\nimport UserService from \"../../services/user.service\";\nimport { withStyles } from '@material-ui/core/styles';\n\n\n\n\nconst useStyles = theme=> ({\n  root: {\n    width: '100%',\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n});\nlet rows= [];\n\nclass Qualification extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      order:\"asc\",\n      orderBy:\"calories\",\n      selected:[],\n      page:0,\n      rowsPerPage:5,\n      top: false,\n      left: false,\n      bottom: false,\n      right: false,\n      allBranch:[]\n    };\n  }\n\n  componentDidMount() {\n    this.getAlllead();\n  }\n\n   handleRequestSort = (event, property) => {\n    const {\n      orderBy,order\n    } = this.state;\n    const isAsc = orderBy === property && order === 'asc'; \n    this.setState({\n      order:isAsc ? 'desc' : 'asc'\n    });\n    this.setState({\n      orderBy:property\n    });\n  };\n\n  getAlllead = async () => {\n    try {\n      const response = await UserService.GetAllBranch();\n      console.log(\"response of ssssss\", response);\n\n      const { data } = response;\n      const { data: list, succeeded } = data;\n      if (succeeded) {\n        if (list && list.length) {\n          this.setState({\n            allBranch: list,\n          });\n          rows=list;\n        }\n  \n      }\n    } catch (error) {\n      console.log(\"status error\", error);\n    }\n  };\n\n\n\n   handleSelectAllClick = (event) => {\n     const {allBranch}= this.state;\n    if (event.target.checked) {\n      const newSelecteds = allBranch.map((n) => n.id);\n\n\n      this.setState({\n        selected:newSelecteds\n      });\n      return;\n    }\n    this.setState({ selected: []});\n  };\n\n\n   handleClick = (event, name) => {\n  \n    const {\n      selected\n    } = this.state;\n    console.log(selected)\n    const selectedIndex = selected.indexOf(name);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, name);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1),\n      );\n    }\n\n    this.setState({\n      selected:newSelected\n    });  \n  };\n\n\n   handleChangePage = (event, newPage) => {\n    this.setState({ page: newPage});\n  };\n\n\n\n   handleChangeRowsPerPage = (event) => {\n    this.setState({ rowsPerPage: parseInt(event.target.value, 10)});\n   \n    this.setState({ page: 0});\n  };\n\n  \n\n    toggleDrawer = (anchor, open) => (event) => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n      return;\n    }\n    this.setState({ [anchor]: open });\n  \n  };\n\n  render() {\n    const { classes } = this.props;\n\n    const { rowsPerPage,page,selected,orderBy,order,allBranch } = this.state;\n     const rows= allBranch;\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, allBranch.length - page * rowsPerPage);\n\n   const isSelected = (id) => selected.indexOf(id) !== -1;\n    const list = (anchor) => (\n      <Box className=\"share-steps\" height=\"100%\">\n      <Box   display=\"flex\"\n          width=\"100%\"\n          height=\"100%\"\n          flexDirection=\"column\"\n          bgcolor=\"primary.drawerBg\"\n        className={clsx(classes.list, {\n          [classes.fullList]: anchor === 'top' || anchor === 'bottom',\n        })}\n        role=\"presentation\"\n      \n      >\n        <Box className=\"common-content\" position=\"relative\" height=\"100%\">\n            <Box className=\"sidebar-header\" display=\"flex\" alignItems=\"center\" px={3} py={2.4}>\n              <Box color=\"text.textBlue\">\n                <Typography variant=\"h6\" gutterBottom color=\"inherit\">\n                  Edit\n                </Typography>\n              </Box>\n              <Box\n                className=\"close-drawer cursor-pointer\"\n                display=\"flex\"\n                alignItems=\"center\"\n                color=\"grey.500\"\n                onClick={this.toggleDrawer(anchor, false)}>\n                <CloseIcon color=\"inherit\" />\n              </Box>\n            </Box>\n            <Divider />\n  \n            <Box className=\"share-sidebar-content share-mamber-content\" p={3}>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <TextField type=\"text\" label=\"First Name\" variant=\"outlined\" className=\"custom-textfield\" />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField type=\"text\" label=\"Last Name\" variant=\"outlined\" className=\"custom-textfield\" />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField type=\"text\" label=\"Email Address\" variant=\"outlined\" className=\"custom-textfield\" />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField type=\"text\" label=\"Email Address\" variant=\"outlined\" className=\"custom-textfield\" />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField type=\"text\" label=\"Email Address\" variant=\"outlined\" className=\"custom-textfield\" />\n              </Grid>\n              \n            </Grid>\n  \n              <Box>\n              \n              </Box>\n            </Box>\n  \n            <Box\n            className=\"sidebar-footer\"\n            position=\"absolute\"\n            bottom=\"0\"\n            left=\"0\"\n            width=\"100%\"\n            minHeight=\"82px\"\n            px={3}\n            py={1.5}\n            display=\"flex\"\n            alignItems=\"center\"\n            boxSizing=\"border-box\"\n            bgcolor=\"primary.drawerBg\">\n            <Box  pr={1} width=\"150px\" boxSizing=\"border-box\">\n              <Button variant=\"outlined\" className=\"cancel-button\" disableElevation size=\"large\" onClick={this.toggleDrawer(anchor, false)}>\n                Cancel\n              </Button>\n            </Box>\n            <Box width=\"150px\" boxSizing=\"border-box\">\n              <Button variant=\"contained\" color=\"primary\" className=\"next-button\" disableElevation size=\"large\">\n                Update\n              </Button>\n            </Box>\n          </Box>\n          </Box>\n      </Box>\n      </Box>\n  \n      // Drawer End here\n      )\n    return (\n      <ThemeProvider theme={theme}>\n      <Box className=\"container\" p={2.5}  bgcolor=\"primary.lightBgContainer\">\n        <Paper className=\"content lead-page\" >\n          <Box className=\"page-heading\" mb={3}>\n            <Box color=\"text.secondary\" pt={3} pr={2.7} pb={1.8} pl={3}>\n              \n              <Typography variant=\"h6\" gutterBottom color=\"inherit\">\n              Branch\n              </Typography>\n              {['right'].map((anchor) => (\n          <React.Fragment key={anchor}>\n            <Button onClick={this.toggleDrawer(anchor, true)}>Add New Branch</Button>\n            <Drawer className=\"common-sidebar \" anchor={anchor} open={this.state[anchor]} onClose={this.toggleDrawer(anchor, false)}>\n              {list(anchor)}\n            </Drawer>\n          </React.Fragment>\n        ))}\n            </Box>\n            <Divider />\n          </Box>\n  \n  \n  <div className=\"data-table\">\n\n  \n  <div className={classes.root}>\n        <Paper className={classes.paper} elevation={0}>\n          <EnhancedTableToolbar numSelected={selected.length} />\n          <TableContainer>\n            <Table\n              className={classes.table}\n              aria-labelledby=\"tableTitle\"\n              aria-label=\"enhanced table\"\n            >\n              <EnhancedTableHead\n                classes={classes}\n                numSelected={selected.length}\n                order={order}\n                orderBy={orderBy}\n                onSelectAllClick={this.handleSelectAllClick}\n                onRequestSort={this.handleRequestSort}\n                rowCount={rows.length}\n              />\n              <TableBody>\n                {stableSort(rows, getComparator(order, orderBy))\n                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                  .map((Lead, index) => {\n                    const isItemSelected = isSelected(Lead.id);\n                    const labelId = `enhanced-table-checkbox-${index}`;\n  \n                    return (\n                      <TableRow\n                        hover\n                        onClick={(event) => this.handleClick(event, Lead.id)}\n                        role=\"checkbox\"\n                        aria-checked={isItemSelected}\n                        tabIndex={-1}\n                        key={index}\n                        selected={isItemSelected}\n                      >\n                        <TableCell padding=\"checkbox\">\n                          <Checkbox\n                            checked={isItemSelected}\n                            inputProps={{ 'aria-labelledby': labelId }}\n                          />\n                        </TableCell>\n                        <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n                          {Lead.name}\n                        </TableCell>\n                        <TableCell align=\"left\">{Lead.emailAddress}</TableCell>\n                        <TableCell align=\"left\">{Lead.mobileNumber}</TableCell>\n                        <TableCell align=\"left\">{Lead.city}</TableCell>\n                        <TableCell align=\"left\">{Lead.description}</TableCell>\n                        \n                        <TableCell align=\"left\">\n  <Box display=\"inline-flex\" alignItems=\"center\" ml=\"auto\">\n    <Box className=\"edit-icon cursor-pointer\" mr={1} bgcolor=\"primary.primaryIconBg\" color=\"text.textSecondary\"  width=\"27px\" height=\"27px\" borderRadius=\"5px\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n      <EditIcon style={{ fontSize: 18 }} color=\"inherit\" />\n      </Box>\n      <Box className=\"edit-icon cursor-pointer\" bgcolor=\"error.lightIcon\" color=\"error.dark\"  width=\"27px\" height=\"27px\" borderRadius=\"5px\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n      <DeleteIcon style={{ fontSize: 18 }} color=\"inherit\" />\n      </Box>\n  </Box>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                {emptyRows > 0 && (\n                  <TableRow >\n                    <TableCell colSpan={6} />\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          <TablePagination\n            rowsPerPageOptions={[5, 10, 25]}\n            component=\"div\"\n            count={allBranch.length}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            onPageChange={this.handleChangePage}\n            onRowsPerPageChange={this.handleChangeRowsPerPage}\n          />\n        </Paper>\n       \n      </div>\n  </div>\n  \n  {/* Drawer Map here */}\n  {/* <div>\n        {['right'].map((anchor) => (\n          <React.Fragment key={anchor}>\n            <Button onClick={this.toggleDrawer(anchor, true)}>{anchor}</Button>\n            <Drawer className=\"common-sidebar \" anchor={anchor} open={this.state[anchor]} onClose={this.toggleDrawer(anchor, false)}>\n              {list(anchor)}\n            </Drawer>\n          </React.Fragment>\n        ))}\n      </div> */}\n  \n      {/* Drawer Map here */}\n        </Paper>\n      </Box>\n    </ThemeProvider>\n    );\n  }\n}\n\nexport default withStyles(useStyles)(Qualification)\n\n\n// export default Leads;\n\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  console.log(\"getComparator\",order)\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n  { id: 'name', numeric: false, disablePadding: false, label: ' Name' },\n  { id: 'emailAddress', numeric: false, disablePadding: false, label: 'Mobile Number' },\n  { id: 'mobileNumber', numeric: false, disablePadding: false, label: 'city' },\n  { id: 'city', numeric: false, disablePadding: false, label: 'Email' },\n  { id: 'description', numeric: false, disablePadding: false, label: 'Description' },\n  { id: 'Action', numeric: false, disablePadding: false, label: 'Action' }\n];\n\n\n\n\nfunction EnhancedTableHead(props) {\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{ 'aria-label': 'select all desserts' }}\n          />\n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'normal'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\n\nconst useToolbarStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.primary.light,\n          // backgroundColor: lighten(theme.palette.primary.light, 0.85),\n        }\n      : {\n          color: theme.palette.primary.light,\n          // backgroundColor: theme.palette.primary.dark,\n        },\n  title: {\n    flex: '1 1 100%',\n  },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n  const classes = useToolbarStyles();\n  const { numSelected } = props;\n\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n          \n        </Typography>\n      )}\n\n      {numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton aria-label=\"delete\">\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Tooltip title=\"Filter list\">\n          <IconButton aria-label=\"filter list\">\n            {/* <FilterListIcon /> */}\n          </IconButton>\n        </Tooltip>\n      )}\n    </Toolbar>\n  );\n};\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n};\n","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/pages/LeadsStatus/index.js",["441"],[],"\nimport React from \"react\";\nimport {\n  Paper, Box, Typography\n} from \"@material-ui/core\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport { theme } from '../../theme/light';\n\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {Table, Grid, TextField} from '@material-ui/core';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport Drawer from '@material-ui/core/Drawer';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport CloseIcon from '@material-ui/icons/Close';\nimport UserService from \"../../services/user.service\";\nimport { withStyles } from '@material-ui/core/styles';\n\n\n\n\nconst useStyles = theme=> ({\n  root: {\n    width: '100%',\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n});\nlet rows= [];\n\nclass LeadsStatus extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      order:\"asc\",\n      orderBy:\"calories\",\n      selected:[],\n      page:0,\n      rowsPerPage:5,\n      top: false,\n      left: false,\n      bottom: false,\n      right: false,\n      allBranch:[]\n    };\n  }\n\n  componentDidMount() {\n    this.getAlllead();\n  }\n\n   handleRequestSort = (event, property) => {\n    const {\n      orderBy,order\n    } = this.state;\n    const isAsc = orderBy === property && order === 'asc'; \n    this.setState({\n      order:isAsc ? 'desc' : 'asc'\n    });\n    this.setState({\n      orderBy:property\n    });\n  };\n\n  getAlllead = async () => {\n    try {\n      const response = await UserService.GetAllBranch();\n      console.log(\"response of ssssss\", response);\n\n      const { data } = response;\n      const { data: list, succeeded } = data;\n      if (succeeded) {\n        if (list && list.length) {\n          this.setState({\n            allBranch: list,\n          });\n          rows=list;\n        }\n  \n      }\n    } catch (error) {\n      console.log(\"status error\", error);\n    }\n  };\n\n\n\n   handleSelectAllClick = (event) => {\n     const {allBranch}= this.state;\n    if (event.target.checked) {\n      const newSelecteds = allBranch.map((n) => n.id);\n\n\n      this.setState({\n        selected:newSelecteds\n      });\n      return;\n    }\n    this.setState({ selected: []});\n  };\n\n\n   handleClick = (event, name) => {\n  \n    const {\n      selected\n    } = this.state;\n    console.log(selected)\n    const selectedIndex = selected.indexOf(name);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, name);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1),\n      );\n    }\n\n    this.setState({\n      selected:newSelected\n    });  \n  };\n\n\n   handleChangePage = (event, newPage) => {\n    this.setState({ page: newPage});\n  };\n\n\n\n   handleChangeRowsPerPage = (event) => {\n    this.setState({ rowsPerPage: parseInt(event.target.value, 10)});\n   \n    this.setState({ page: 0});\n  };\n\n  \n\n    toggleDrawer = (anchor, open) => (event) => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n      return;\n    }\n    this.setState({ [anchor]: open });\n  \n  };\n\n  render() {\n    const { classes } = this.props;\n\n    const { rowsPerPage,page,selected,orderBy,order,allBranch } = this.state;\n     const rows= allBranch;\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, allBranch.length - page * rowsPerPage);\n\n   const isSelected = (id) => selected.indexOf(id) !== -1;\n    const list = (anchor) => (\n      <Box className=\"share-steps\" height=\"100%\">\n      <Box   display=\"flex\"\n          width=\"100%\"\n          height=\"100%\"\n          flexDirection=\"column\"\n          bgcolor=\"primary.drawerBg\"\n        className={clsx(classes.list, {\n          [classes.fullList]: anchor === 'top' || anchor === 'bottom',\n        })}\n        role=\"presentation\"\n      \n      >\n        <Box className=\"common-content\" position=\"relative\" height=\"100%\">\n            <Box className=\"sidebar-header\" display=\"flex\" alignItems=\"center\" px={3} py={2.4}>\n              <Box color=\"text.textBlue\">\n                <Typography variant=\"h6\" gutterBottom color=\"inherit\">\n                  Edit\n                </Typography>\n              </Box>\n              <Box\n                className=\"close-drawer cursor-pointer\"\n                display=\"flex\"\n                alignItems=\"center\"\n                color=\"grey.500\"\n                onClick={this.toggleDrawer(anchor, false)}>\n                <CloseIcon color=\"inherit\" />\n              </Box>\n            </Box>\n            <Divider />\n  \n            <Box className=\"share-sidebar-content share-mamber-content\" p={3}>\n            <Grid container spacing={2}>\n              <Grid item xs={4}>\n                <TextField type=\"text\" label=\"First Name\" variant=\"outlined\" className=\"custom-textfield\" />\n              </Grid>\n              <Grid item xs={4}>\n                <TextField type=\"text\" label=\"Last Name\" variant=\"outlined\" className=\"custom-textfield\" />\n              </Grid>\n              <Grid item xs={4}>\n                <TextField type=\"text\" label=\"Email Address\" variant=\"outlined\" className=\"custom-textfield\" />\n              </Grid>\n            </Grid>\n  \n              <Box>\n              \n              </Box>\n            </Box>\n  \n            <Box\n            className=\"sidebar-footer\"\n            position=\"absolute\"\n            bottom=\"0\"\n            left=\"0\"\n            width=\"100%\"\n            minHeight=\"82px\"\n            px={3}\n            py={1.5}\n            display=\"flex\"\n            alignItems=\"center\"\n            boxSizing=\"border-box\"\n            bgcolor=\"primary.drawerBg\">\n            <Box  pr={1} width=\"150px\" boxSizing=\"border-box\">\n              <Button variant=\"outlined\" className=\"cancel-button\" disableElevation size=\"large\" onClick={this.toggleDrawer(anchor, false)}>\n                Cancel\n              </Button>\n            </Box>\n            <Box width=\"150px\" boxSizing=\"border-box\">\n              <Button variant=\"contained\" color=\"primary\" className=\"next-button\" disableElevation size=\"large\">\n                Update\n              </Button>\n            </Box>\n          </Box>\n          </Box>\n      </Box>\n      </Box>\n  \n      // Drawer End here\n      )\n    return (\n      <ThemeProvider theme={theme}>\n      <Box className=\"container\" p={2.5}  bgcolor=\"primary.lightBgContainer\">\n        <Paper className=\"content lead-page\" >\n          <Box className=\"page-heading\" mb={3}>\n            <Box color=\"text.secondary\" pt={3} pr={2.7} pb={1.8} pl={3}>\n              \n              <Typography variant=\"h6\" gutterBottom color=\"inherit\">\n              Branch\n              </Typography>\n              {['right'].map((anchor) => (\n          <React.Fragment key={anchor}>\n            <Button onClick={this.toggleDrawer(anchor, true)}>Add New Branch</Button>\n            <Drawer className=\"common-sidebar \" anchor={anchor} open={this.state[anchor]} onClose={this.toggleDrawer(anchor, false)}>\n              {list(anchor)}\n            </Drawer>\n          </React.Fragment>\n        ))}\n            </Box>\n            <Divider />\n          </Box>\n  \n  \n  <div className=\"data-table\">\n\n  \n  <div className={classes.root}>\n        <Paper className={classes.paper} elevation={0}>\n         \n          <TableContainer>\n            <Table\n              className={classes.table}\n              aria-labelledby=\"tableTitle\"\n              aria-label=\"enhanced table\"\n            >\n              <EnhancedTableHead\n                classes={classes}\n                numSelected={selected.length}\n                order={order}\n                orderBy={orderBy}\n                onSelectAllClick={this.handleSelectAllClick}\n                onRequestSort={this.handleRequestSort}\n                rowCount={rows.length}\n              />\n              <TableBody>\n                {stableSort(rows, getComparator(order, orderBy))\n                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                  .map((Lead, index) => {\n                    const isItemSelected = isSelected(Lead.id);\n                    const labelId = `enhanced-table-checkbox-${index}`;\n  \n                    return (\n                      <TableRow\n                        hover\n                        onClick={(event) => this.handleClick(event, Lead.id)}\n                        role=\"checkbox\"\n                        aria-checked={isItemSelected}\n                        tabIndex={-1}\n                        key={index}\n                        selected={isItemSelected}\n                      >\n                        <TableCell padding=\"checkbox\">\n                          <Checkbox\n                            checked={isItemSelected}\n                            inputProps={{ 'aria-labelledby': labelId }}\n                          />\n                        </TableCell>\n                        <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n                          {Lead.name}\n                        </TableCell>\n                        <TableCell align=\"left\">{Lead.emailAddress}</TableCell>\n                        <TableCell align=\"left\">{Lead.mobileNumber}</TableCell>\n                        <TableCell align=\"left\">{Lead.city}</TableCell>\n                        <TableCell align=\"left\">{Lead.description}</TableCell>\n                        \n                        <TableCell align=\"left\">\n  <Box display=\"inline-flex\" alignItems=\"center\" ml=\"auto\">\n    <Box className=\"edit-icon cursor-pointer\" mr={1} bgcolor=\"primary.primaryIconBg\" color=\"text.textSecondary\"  width=\"27px\" height=\"27px\" borderRadius=\"5px\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n      <EditIcon style={{ fontSize: 18 }} color=\"inherit\" />\n      </Box>\n      <Box className=\"edit-icon cursor-pointer\" bgcolor=\"error.lightIcon\" color=\"error.dark\"  width=\"27px\" height=\"27px\" borderRadius=\"5px\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n      <DeleteIcon style={{ fontSize: 18 }} color=\"inherit\" />\n      </Box>\n  </Box>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                {emptyRows > 0 && (\n                  <TableRow >\n                    <TableCell colSpan={6} />\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          <TablePagination\n            rowsPerPageOptions={[5, 10, 25]}\n            component=\"div\"\n            count={allBranch.length}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            onPageChange={this.handleChangePage}\n            onRowsPerPageChange={this.handleChangeRowsPerPage}\n          />\n        </Paper>\n       \n      </div>\n  </div>\n  \n  {/* Drawer Map here */}\n  {/* <div>\n        {['right'].map((anchor) => (\n          <React.Fragment key={anchor}>\n            <Button onClick={this.toggleDrawer(anchor, true)}>{anchor}</Button>\n            <Drawer className=\"common-sidebar \" anchor={anchor} open={this.state[anchor]} onClose={this.toggleDrawer(anchor, false)}>\n              {list(anchor)}\n            </Drawer>\n          </React.Fragment>\n        ))}\n      </div> */}\n  \n      {/* Drawer Map here */}\n        </Paper>\n      </Box>\n    </ThemeProvider>\n    );\n  }\n}\n\nexport default withStyles(useStyles)(LeadsStatus)\n\n\n// export default Leads;\n\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  console.log(\"getComparator\",order)\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n  { id: 'name', numeric: false, disablePadding: false, label: ' Name' },\n  { id: 'emailAddress', numeric: false, disablePadding: false, label: 'Mobile Number' },\n  { id: 'mobileNumber', numeric: false, disablePadding: false, label: 'city' },\n  { id: 'city', numeric: false, disablePadding: false, label: 'Email' },\n  { id: 'description', numeric: false, disablePadding: false, label: 'Description' },\n  { id: 'Action', numeric: false, disablePadding: false, label: 'Action' }\n];\n\n\n\n\nfunction EnhancedTableHead(props) {\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{ 'aria-label': 'select all desserts' }}\n          />\n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'normal'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\n\nconst useToolbarStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.primary.light,\n          // backgroundColor: lighten(theme.palette.primary.light, 0.85),\n        }\n      : {\n          color: theme.palette.primary.light,\n          // backgroundColor: theme.palette.primary.dark,\n        },\n  title: {\n    flex: '1 1 100%',\n  },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n  const classes = useToolbarStyles();\n  const { numSelected } = props;\n\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n          \n        </Typography>\n      )}\n\n      {numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton aria-label=\"delete\">\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Tooltip title=\"Filter list\">\n          <IconButton aria-label=\"filter list\">\n            {/* <FilterListIcon /> */}\n          </IconButton>\n        </Tooltip>\n      )}\n    </Toolbar>\n  );\n};\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n};\n","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/pages/AddLead/index.js",["442","443","444","445"],[],"import \"date-fns\";\r\nimport React from \"react\";\r\nimport {\r\n  Paper,\r\n  Box,\r\n  Typography,\r\n  Divider,\r\n  Grid,\r\n  TextField,\r\n  FormControlLabel,\r\n  Select,\r\n  InputLabel,\r\n  FormControl,\r\n  MenuItem,\r\n  RadioGroup,\r\n  Radio,\r\n  Button,\r\n  Snackbar,\r\n} from \"@material-ui/core\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\nimport { theme } from \"../../theme/light\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport moment from \"moment\";\r\nimport UserService from \"../../services/user.service\";\r\n\r\nclass AddLead extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedDate: new Date(),\r\n      age: \"\",\r\n      branch: \"\",\r\n      gender: \"female\",\r\n      overAllScore: \"9\",\r\n      speakingScore: \"9\",\r\n      writingScore: \"9\",\r\n      readingScore: \"9\",\r\n      listeningScore: \"9\",\r\n      dateOfBirth: \"\",\r\n      date: new Date(),\r\n\r\n      workExpId: \"yes\",\r\n      isSelected: false,\r\n      firstName: \"abhijeet\",\r\n      lastName: \"singh\",\r\n      email: \"abhi@gmail.com\",\r\n      phone: \"9999999999\",\r\n      address: \"qweqweq\",\r\n      remarks: \"qweqweqwe\",\r\n      workDuration: \"9 years\",\r\n      passportNo: \"qweqweq\",\r\n      maritalStatus: \"yes\",\r\n      allCountries: [],\r\n      countryId: \"1\",\r\n      allLeads: [],\r\n      allLeadsStatus: [],\r\n      leadStatusId: \"1\",\r\n      leadId: \"1\",\r\n      allVisaTypes: [],\r\n      allBranch: [],\r\n      branchId: \"1\",\r\n      allQualifications: [],\r\n      allUniversities: [],\r\n      qualificationInputs: [\r\n        {\r\n          date: new Date(),\r\n          qualificationId: \"1\",\r\n          passingYear: \"2022\",\r\n          percentage: \"60\",\r\n          universityId: \"1\",\r\n          description: \"sadasd\",\r\n        },\r\n      ],\r\n      visaInfos: [\r\n        {\r\n          visaCountry: \"1\",\r\n          visaUniversity: \"\",\r\n          visaCity: \"no\",\r\n          visaReason: \"asdas\",\r\n          visaRemarks: \"asdasd\",\r\n          visaId: \"1\",\r\n        },\r\n      ],\r\n      visaRefusaleses: [\r\n        {\r\n          refVisaID: 1,\r\n          refCountry: \"1\",\r\n          refReason: \"sadas\",\r\n          refRemarks: \"asdasd\",\r\n        },\r\n      ],\r\n      spouseQualifications: [\r\n        {\r\n          date: new Date(),\r\n          qualificationId: \"1\",\r\n          passingYear: \"2022\",\r\n          percentage: \"60\",\r\n          description: \"dasdas\",\r\n          universityId: \"1\",\r\n        },\r\n      ],\r\n\r\n      spouseEmail: \"asjkdaj@gmail.com\",\r\n      spouseFirstName: \"aasd\",\r\n      spouseLastName: \"asdas\",\r\n      spouseDob: \"\",\r\n      spouseMobileNumber: \"1111111111\",\r\n      spouseAddress: \"asdasd\",\r\n      spouseRemarks: \"asdasda\",\r\n      spouseWorkexperience: \"yes\",\r\n      spouseWorkduration: \"2 year\",\r\n      spousePassportnumber: \"asdasdasd\",\r\n      errorSnack: false,\r\n      alertMessage: \"\",\r\n      errorMessage: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getAllBranch();\r\n    this.getAllQualifications();\r\n    this.getAllLeadSource();\r\n    this.getAllVisaTypes();\r\n    this.getAllCountries();\r\n    this.getAllLeadStatus();\r\n    this.getAllUniversities();\r\n  }\r\n\r\n  handleClose = (event, reason) => {\r\n    this.setState({\r\n      errorSnack: false,\r\n    });\r\n  };\r\n\r\n  addQuifications = () => {\r\n    let qualificationInputs = [...this.state.qualificationInputs];\r\n    const obj = {\r\n      date: new Date(),\r\n      qualificationId: \"\",\r\n      passingYear: \"\",\r\n      percentage: \"\",\r\n      universityId: \"\",\r\n      description: \"\",\r\n    };\r\n    if (qualificationInputs.length === 5) {\r\n      console.log(\"you could not add more than 5 qualifications\");\r\n    } else {\r\n      qualificationInputs.push(obj);\r\n    }\r\n    this.setState({\r\n      qualificationInputs,\r\n    });\r\n  };\r\n\r\n  removeQualifications = (index) => {\r\n    let qualificationInputs = [...this.state.qualificationInputs];\r\n    qualificationInputs.splice(index, 1);\r\n    this.setState({\r\n      qualificationInputs,\r\n    });\r\n  };\r\n\r\n  addMoreVisaInfos = () => {\r\n    let visaInfos = [...this.state.visaInfos];\r\n    const obj = {\r\n      visaType: \"\",\r\n      visaCountry: \"\",\r\n      visaUniversity: \"\",\r\n      visaCity: \"\",\r\n      visaReason: \"\",\r\n      visaRemarks: \"\",\r\n      visaId: \"\",\r\n    };\r\n    if (visaInfos.length === 5) {\r\n      console.log(\"you could not add more than 5 qualifications\");\r\n    } else {\r\n      visaInfos.push(obj);\r\n    }\r\n    this.setState({\r\n      visaInfos,\r\n    });\r\n  };\r\n\r\n  removeVisaInfos = (index) => {\r\n    let visaInfos = [...this.state.visaInfos];\r\n    visaInfos.splice(index, 1);\r\n    this.setState({\r\n      visaInfos,\r\n    });\r\n  };\r\n\r\n  addRefUsaleses = () => {\r\n    let visaRefusaleses = [...this.state.visaRefusaleses];\r\n    const obj = {\r\n      refVisaID: \"\",\r\n      refCountry: \"\",\r\n      refReason: \"\",\r\n      refRemarks: \"\",\r\n    };\r\n    if (visaRefusaleses.length == 5) {\r\n      console.log(\"you could not add more than 5 qualifications\");\r\n    } else {\r\n      visaRefusaleses.push(obj);\r\n    }\r\n    this.setState({\r\n      visaRefusaleses,\r\n    });\r\n  };\r\n\r\n  removeRefUsaleses = (index) => {\r\n    let visaRefusaleses = [...this.state.visaRefusaleses];\r\n    visaRefusaleses.splice(index, 1);\r\n    this.setState({\r\n      visaRefusaleses,\r\n    });\r\n  };\r\n\r\n  addSpouseQualifications = () => {\r\n    let spouseQualifications = [...this.state.spouseQualifications];\r\n    const obj = {\r\n      date: new Date(),\r\n      qualificationId: \"\",\r\n      passingYear: \"\",\r\n      percentage: \"\",\r\n      description: \"\",\r\n      universityId: \"\",\r\n    };\r\n    if (spouseQualifications.length === 5) {\r\n      console.log(\"you could not add more than 5 qualifications\");\r\n    } else {\r\n      spouseQualifications.push(obj);\r\n    }\r\n    this.setState({\r\n      spouseQualifications,\r\n    });\r\n  };\r\n\r\n  removeSpouseQualifications = (index) => {\r\n    let spouseQualifications = [...this.state.spouseQualifications];\r\n    spouseQualifications.splice(index, 1);\r\n    this.setState({\r\n      spouseQualifications,\r\n    });\r\n  };\r\n\r\n  handleSelectChange = (event) => {\r\n    this.setState({\r\n      age: event.target.value,\r\n    });\r\n  };\r\n  handleBranchChange = (event) => {\r\n    this.setState({\r\n      branch: event.target.value,\r\n    });\r\n  };\r\n\r\n  onSubmit = (event) => {\r\n    event.preventDefault();\r\n    let {\r\n      visaInfos,\r\n      dateOfBirth,\r\n      workExpId,\r\n      visaRefusaleses,\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      phone,\r\n      address,\r\n      remarks,\r\n      workDuration,\r\n      passportNo,\r\n      maritalStatus,\r\n      countryId,\r\n      readingScore,\r\n      listeningScore,\r\n      leadId,\r\n      writingScore,\r\n      speakingScore,\r\n      overAllScore,\r\n      spouseFirstName,\r\n      spouseLastName,\r\n      spouseDob,\r\n      spouseMobileNumber,\r\n      spouseAddress,\r\n      spouseRemarks,\r\n      spouseWorkexperience,\r\n      spouseWorkduration,\r\n      spousePassportnumber,\r\n      leadStatusId,\r\n    } = this.state;\r\n    console.log(\"state\", this.state);\r\n\r\n    let spouseQualifications = [...this.state.spouseQualifications];\r\n    let userQualifications = [...this.state.qualificationInputs];\r\n\r\n    let createUserVisa = [];\r\n    let spouseQualifi = [];\r\n\r\n    var myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n    myHeaders.append(\"Authorization\", \"<API Key>\");\r\n\r\n    for (let i = 0; i < userQualifications.length; i++) {\r\n      console.log(\"object\", userQualifications[i]);\r\n\r\n      let obj = {};\r\n      obj = userQualifications[i];\r\n      obj[\"passingYear\"] = moment(obj[\"date\"]).format(\"YYYY\");\r\n      delete obj[\"date\"];\r\n    }\r\n\r\n    for (let i = 0; i < spouseQualifications.length; i++) {\r\n      console.log(\"object\", spouseQualifications[i]);\r\n\r\n      let obj = {};\r\n      obj = spouseQualifications[i];\r\n      obj[\"passingYear\"] = moment(obj[\"date\"]).format(\"YYYY\");\r\n      delete obj[\"date\"];\r\n    }\r\n\r\n    for (let i = 0; i < visaInfos.length; i++) {\r\n      const {\r\n        visaCountry,\r\n        visaUniversity,\r\n        visaCity,\r\n        visaReason,\r\n        visaRemarks,\r\n        visaId,\r\n      } = visaInfos[i];\r\n\r\n      let obj = {};\r\n      obj[\"visaTypeId\"] = visaId;\r\n      obj[\"countryId\"] = visaCountry;\r\n      obj[\"city\"] = visaCity;\r\n      obj[\"reason\"] = visaReason;\r\n      obj[\"remarks\"] = visaRemarks;\r\n      //obj[''] = visaUniversity;\r\n      createUserVisa.push(obj);\r\n    }\r\n    console.log(\"cheeekkk\", spouseQualifications);\r\n    for (let i = 0; i < spouseQualifications.length; i++) {\r\n      let obj = {};\r\n      obj = spouseQualifications[i];\r\n      delete obj.date;\r\n\r\n      spouseQualifi.push(obj);\r\n    }\r\n\r\n    var raw = JSON.stringify({\r\n      firstName: firstName,\r\n      lastName: lastName,\r\n      DateOfBirth: dateOfBirth,\r\n      emailAddress: email,\r\n      mobileNumber: phone,\r\n      address: address,\r\n      remarks: remarks,\r\n      workexperience: workExpId === \"yes\" ? true : false,\r\n      workduration: workDuration,\r\n      passportnumber: passportNo,\r\n      branchId: 1,\r\n      ismaritalstatus: maritalStatus === \"yes\" ? true : false,\r\n      listeningScore: listeningScore,\r\n      readingScore: readingScore,\r\n      writingScore: writingScore,\r\n      speakingScore: speakingScore,\r\n      overAllScore: overAllScore,\r\n      countryId: countryId,\r\n      leadSourceId: leadId,\r\n      leadsStatusId: leadStatusId,\r\n      spouse: {\r\n        firstName: spouseFirstName,\r\n        lastName: spouseLastName,\r\n        DateOfBirth: spouseDob,\r\n        mobileNumber: spouseMobileNumber,\r\n        address: spouseAddress,\r\n        remarks: spouseRemarks,\r\n        workexperience: spouseWorkexperience === \"yes\" ? true : false,\r\n        workduration: spouseWorkduration,\r\n        passportnumber: spousePassportnumber,\r\n        spouseQualifications: spouseQualifi,\r\n      },\r\n      userQualifications: userQualifications,\r\n      createUserVisa: createUserVisa,\r\n      visaRefusaleses: visaRefusaleses,\r\n    });\r\n    console.log(\"rawraw\", raw);\r\n\r\n    var requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(\"https://crmleadedu.herokuapp.com/api/v1/Leads\", requestOptions)\r\n      .then((response) => response.text())\r\n      .then((result) => {\r\n        console.log(result);\r\n        const { Succeeded, Message } = JSON.parse(result);\r\n        console.log(\"object\", JSON.parse(result));\r\n        if (Succeeded) {\r\n          console.log(\"object\", \"done\");\r\n\r\n          this.setState({\r\n            errorSnack: true,\r\n            overAllScore: \"\",\r\n            speakingScore: \"\",\r\n            writingScore: \"\",\r\n            readingScore: \"\",\r\n            listeningScore: \"\",\r\n            dateOfBirth: \"\",\r\n            workExpId: \"\",\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            email: \"\",\r\n            phone: \"\",\r\n            address: \"\",\r\n            remarks: \"\",\r\n            workDuration: \"\",\r\n            passportNo: \"\",\r\n            maritalStatus: \"\",\r\n            countryId: \"\",\r\n            leadStatusId: \"\",\r\n            leadId: \"\",\r\n            qualificationInputs: [\r\n              {\r\n                date: new Date(),\r\n                qualificationId: \"\",\r\n                passingYear: \"\",\r\n                percentage: \"\",\r\n                universityId: \"\",\r\n                description: \"\",\r\n              },\r\n            ],\r\n            visaInfos: [\r\n              {\r\n                visaCountry: \"\",\r\n                visaUniversity: \"\",\r\n                visaCity: \"\",\r\n                visaReason: \"\",\r\n                visaRemarks: \"\",\r\n                visaId: \"\",\r\n              },\r\n            ],\r\n            visaRefusaleses: [\r\n              {\r\n                refVisaID: \"\",\r\n                refCountry: \"\",\r\n                refReason: \"\",\r\n                refRemarks: \"\",\r\n              },\r\n            ],\r\n            spouseQualifications: [\r\n              {\r\n                date: new Date(),\r\n                qualificationId: \"\",\r\n                passingYear: \"\",\r\n                percentage: \"\",\r\n                description: \"\",\r\n              },\r\n            ],\r\n            spouseEmail: \"\",\r\n            spouseFirstName: \"\",\r\n            spouseLastName: \"\",\r\n            spouseDob: \"\",\r\n            spouseMobileNumber: \"\",\r\n            spouseAddress: \"\",\r\n            spouseRemarks: \"\",\r\n            spouseWorkexperience: \"\",\r\n            spouseWorkduration: \"\",\r\n            spousePassportnumber: \"\",\r\n          });\r\n        } else {\r\n          this.setState({\r\n            errorMessage: Message,\r\n            errorSnack: true,\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => console.log(\"error\", error));\r\n  };\r\n\r\n  getAllQualifications = async () => {\r\n    try {\r\n      const response = await UserService.GetAllQualification();\r\n      console.log(\"response of qualifications\", response);\r\n\r\n      const { data } = response;\r\n      const { data: list, succeeded } = data;\r\n      if (succeeded) {\r\n        if (list && list.length) {\r\n          this.setState({\r\n            allQualifications: list,\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"status error\", error);\r\n    }\r\n  };\r\n\r\n  getAllCountries = async () => {\r\n    try {\r\n      const response = await UserService.GetAllCountry();\r\n      console.log(\"response of getAllCountries\", response);\r\n\r\n      const { data } = response;\r\n      const { data: list, succeeded } = data;\r\n      if (succeeded) {\r\n        if (list && list.length) {\r\n          this.setState({\r\n            allCountries: list,\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"status error\", error);\r\n    }\r\n  };\r\n\r\n  getAllLeadStatus = async () => {\r\n    try {\r\n      const response = await UserService.GetAllLeadsStatus();\r\n      console.log(\"response of getAllLeadStatus\", response);\r\n\r\n      const { data } = response;\r\n      if (data) {\r\n        const { data: list, succeeded } = data;\r\n        if (succeeded) {\r\n          if (list && list.length) {\r\n            this.setState({\r\n              allLeadsStatus: list,\r\n            });\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"status error\", error);\r\n    }\r\n  };\r\n\r\n  getAllUniversities = async () => {\r\n    try {\r\n      const response = await UserService.GetAllUniversity();\r\n      console.log(\"response of getAllUniversities\", response);\r\n\r\n      const { data } = response;\r\n      if (data) {\r\n        const { data: list, succeeded } = data;\r\n        if (succeeded) {\r\n          if (list && list.length) {\r\n            this.setState({\r\n              allUniversities: list,\r\n            });\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"status error\", error);\r\n    }\r\n  };\r\n\r\n  getAllVisaTypes = async () => {\r\n    try {\r\n      const response = await UserService.GetAllVisaTypes();\r\n      console.log(\"response of getAllVisaTypes\", response);\r\n\r\n      const { data } = response;\r\n      const { data: list, succeeded } = data;\r\n      if (succeeded) {\r\n        if (list && list.length) {\r\n          this.setState({\r\n            allVisaTypes: list,\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"status error\", error);\r\n    }\r\n  };\r\n\r\n  getAllLeadSource = async () => {\r\n    try {\r\n      const response = await UserService.GetAllLeadSource();\r\n      console.log(\"response of getAllLeadSource\", response);\r\n\r\n      const { data } = response;\r\n      const { data: list, succeeded } = data;\r\n      if (succeeded) {\r\n        if (list && list.length) {\r\n          this.setState({\r\n            allLeads: list,\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"status error\", error);\r\n    }\r\n  };\r\n\r\n  getAllBranch = async () => {\r\n    try {\r\n      const response = await UserService.GetAllBranch();\r\n      console.log(\"response of getAllBranch\", response);\r\n\r\n      const { data } = response;\r\n      const { data: list, succeeded } = data;\r\n      if (succeeded) {\r\n        if (list && list.length) {\r\n          this.setState({\r\n            allBranch: list,\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"status error\", error);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      selectedDate,\r\n      age,\r\n      qualificationInputs,\r\n      allQualifications,\r\n      spouseQualifications,\r\n      allCountries,\r\n      allLeads,\r\n      allVisaTypes,\r\n      countryId,\r\n      leadId,\r\n      visaInfos,\r\n      email,\r\n      firstName,\r\n      lastName,\r\n      address,\r\n      phone,\r\n      dateOfBirth,\r\n      remarks,\r\n      spouseDob,\r\n      passportNo,\r\n      allBranch,\r\n      branchId,\r\n      listeningScore,\r\n      readingScore,\r\n      writingScore,\r\n      speakingScore,\r\n      spouseFirstName,\r\n      spouseRemarks,\r\n      spouseEmail,\r\n      spouseLastName,\r\n      spouseMobileNumber,\r\n      spouseAddress,\r\n      spouseWorkexperience,\r\n      spouseWorkduration,\r\n      spousePassportnumber,\r\n      workExpId,\r\n      maritalStatus,\r\n      visaRefusaleses,\r\n      allLeadsStatus,\r\n      leadStatusId,\r\n      workDuration,\r\n      errorSnack,\r\n      alertMessage,\r\n      errorMessage,\r\n      allUniversities,\r\n    } = this.state;\r\n\r\n    return (\r\n      <ThemeProvider theme={theme}>\r\n        <Box className=\"container\" p={2.5} bgcolor=\"primary.lightBgContainer\">\r\n          <Paper className=\"content lead-page\">\r\n            <Box className=\"page-heading\" mb={3}>\r\n              <Box color=\"text.secondary\" pt={3} pr={2.7} pb={1.8} pl={3}>\r\n                <Typography variant=\"h6\" gutterBottom color=\"inherit\">\r\n                  Lead Form\r\n                </Typography>\r\n              </Box>\r\n              <Divider />\r\n            </Box>\r\n\r\n            <Box className=\"lead-form\" px={3} pb={3}>\r\n              <Grid container spacing={3}>\r\n                <Grid item xs={3}>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    label=\"First Name\"\r\n                    value={firstName}\r\n                    variant=\"outlined\"\r\n                    className=\"custom-textfield\"\r\n                    onChange={(event) => {\r\n                      this.setState({\r\n                        firstName: event.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    label=\"Last Name\"\r\n                    value={lastName}\r\n                    variant=\"outlined\"\r\n                    className=\"custom-textfield\"\r\n                    onChange={(event) => {\r\n                      this.setState({\r\n                        lastName: event.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                    <KeyboardDatePicker\r\n                      disableToolbar\r\n                      variant=\"inline\"\r\n                      format=\"dd-MM-yyyy\"\r\n                      autoOk\r\n                      margin=\"normal\"\r\n                      id=\"date-picker-inline\"\r\n                      label=\"Date Of Birth\"\r\n                      value={dateOfBirth ? dateOfBirth : selectedDate}\r\n                      onChange={(date) => {\r\n                        this.setState({\r\n                          dateOfBirth: date,\r\n                        });\r\n                      }}\r\n                      className=\"custom-datepicker\"\r\n                      KeyboardButtonProps={{\r\n                        \"aria-label\": \"change date\",\r\n                      }}\r\n                    />\r\n                  </MuiPickersUtilsProvider>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    label=\"Email Address\"\r\n                    value={email}\r\n                    variant=\"outlined\"\r\n                    className=\"custom-textfield\"\r\n                    onChange={(event) => {\r\n                      this.setState({\r\n                        email: event.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n              <Grid container spacing={3}>\r\n                <Grid item xs={3}>\r\n                  <TextField\r\n                    type=\"number\"\r\n                    label=\"Mobile Number\"\r\n                    value={phone}\r\n                    variant=\"outlined\"\r\n                    className=\"custom-textfield\"\r\n                    onChange={(event) => {\r\n                      this.setState({\r\n                        phone: event.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    label=\"Address\"\r\n                    value={address}\r\n                    variant=\"outlined\"\r\n                    className=\"custom-textfield\"\r\n                    onChange={(event) => {\r\n                      this.setState({\r\n                        address: event.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    label=\"Remarks\"\r\n                    value={remarks}\r\n                    variant=\"outlined\"\r\n                    className=\"custom-textfield\"\r\n                    onChange={(event) => {\r\n                      this.setState({\r\n                        remarks: event.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3} className=\"work-experience\">\r\n                  <Box color=\"text.secondary\">\r\n                    <Typography\r\n                      variant=\"subtitle2\"\r\n                      gutterBottom\r\n                      color=\"inherit\"\r\n                    >\r\n                      Work Experience\r\n                    </Typography>\r\n                  </Box>\r\n\r\n                  <Box display=\"flex\">\r\n                    <RadioGroup\r\n                      aria-label=\"gender\"\r\n                      name=\"gender1\"\r\n                      value={workExpId}\r\n                      onChange={(event) => {\r\n                        this.setState({\r\n                          workExpId: event.target.value,\r\n                        });\r\n                      }}\r\n                    >\r\n                      <FormControlLabel\r\n                        value=\"yes\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Yes\"\r\n                      />\r\n                      <FormControlLabel\r\n                        value=\"no\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"No\"\r\n                      />\r\n                    </RadioGroup>\r\n                  </Box>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Grid container spacing={3}>\r\n                <Grid item xs={3}>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    label=\"Work Duration\"\r\n                    variant=\"outlined\"\r\n                    value={workDuration}\r\n                    className=\"custom-textfield\"\r\n                    onChange={(event) => {\r\n                      this.setState({\r\n                        workDuration: event.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    label=\"Passport Number\"\r\n                    variant=\"outlined\"\r\n                    value={passportNo}\r\n                    className=\"custom-textfield\"\r\n                    onChange={(event) => {\r\n                      this.setState({\r\n                        passportNo: event.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <FormControl variant=\"outlined\" className=\"custom-textfield\">\r\n                    <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                      Branch\r\n                    </InputLabel>\r\n                    <Select\r\n                      labelId=\"demo-simple-select-outlined-label\"\r\n                      id=\"demo-simple-select-outlined\"\r\n                      value={branchId}\r\n                      onChange={(event) => {\r\n                        this.setState({\r\n                          branchId: event.target.value,\r\n                        });\r\n                      }}\r\n                      label=\"Branch\"\r\n                    >\r\n                      <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                      </MenuItem>\r\n                      {allBranch.map((data, index) => {\r\n                        return (\r\n                          <MenuItem key={index.toString()} value={data.id}>\r\n                            {data.name}\r\n                          </MenuItem>\r\n                        );\r\n                      })}\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={3} className=\"work-experience\">\r\n                  <Box color=\"text.secondary\">\r\n                    <Typography\r\n                      variant=\"subtitle2\"\r\n                      gutterBottom\r\n                      color=\"inherit\"\r\n                    >\r\n                      Marital Status\r\n                    </Typography>\r\n                  </Box>\r\n                  <Box display=\"flex\">\r\n                    <RadioGroup\r\n                      aria-label=\"gender\"\r\n                      name=\"gender1\"\r\n                      value={maritalStatus}\r\n                      onChange={(event) => {\r\n                        this.setState({\r\n                          maritalStatus: event.target.value,\r\n                        });\r\n                      }}\r\n                    >\r\n                      <FormControlLabel\r\n                        value=\"yes\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Yes\"\r\n                      />\r\n                      <FormControlLabel\r\n                        value=\"no\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"No\"\r\n                      />\r\n                    </RadioGroup>\r\n                  </Box>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Grid container spacing={3}>\r\n                <Grid item xs={3}>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    label=\"Listening Score\"\r\n                    variant=\"outlined\"\r\n                    value={listeningScore}\r\n                    className=\"custom-textfield\"\r\n                    onChange={(event) => {\r\n                      this.setState({\r\n                        listeningScore: event.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    label=\"Reading Score\"\r\n                    variant=\"outlined\"\r\n                    value={readingScore}\r\n                    className=\"custom-textfield\"\r\n                    onChange={(event) => {\r\n                      this.setState({\r\n                        readingScore: event.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    label=\"Writing Score\"\r\n                    variant=\"outlined\"\r\n                    value={writingScore}\r\n                    className=\"custom-textfield\"\r\n                    onChange={(event) => {\r\n                      this.setState({\r\n                        writingScore: event.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    label=\"Speaking Score\"\r\n                    variant=\"outlined\"\r\n                    value={speakingScore}\r\n                    className=\"custom-textfield\"\r\n                    onChange={(event) => {\r\n                      this.setState({\r\n                        speakingScore: event.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Box mt={1}></Box>\r\n              <Grid container spacing={3}>\r\n                <Grid item xs={3}>\r\n                  <FormControl variant=\"outlined\" className=\"custom-textfield\">\r\n                    <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                      Country\r\n                    </InputLabel>\r\n                    <Select\r\n                      labelId=\"demo-simple-select-outlined-label\"\r\n                      id=\"demo-simple-select-outlined\"\r\n                      value={countryId}\r\n                      onChange={(event) => {\r\n                        if (event.target.value) {\r\n                          this.setState({\r\n                            countryId: event.target.value,\r\n                          });\r\n                        } else {\r\n                          this.setState({\r\n                            countryId: \"\",\r\n                          });\r\n                        }\r\n                      }}\r\n                      label=\"Country\"\r\n                    >\r\n                      <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                      </MenuItem>\r\n                      {allCountries.map((data, index) => {\r\n                        return (\r\n                          <MenuItem key={index.toString()} value={data.id}>\r\n                            {data.countryDescription}\r\n                          </MenuItem>\r\n                        );\r\n                      })}\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <FormControl variant=\"outlined\" className=\"custom-textfield\">\r\n                    <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                      Lead Source\r\n                    </InputLabel>\r\n                    <Select\r\n                      labelId=\"demo-simple-select-outlined-label\"\r\n                      id=\"demo-simple-select-outlined\"\r\n                      value={leadId}\r\n                      onChange={(event) => {\r\n                        if (event.target.value) {\r\n                          this.setState({\r\n                            leadId: event.target.value,\r\n                          });\r\n                        } else {\r\n                          this.setState({\r\n                            leadId: \"\",\r\n                          });\r\n                        }\r\n                      }}\r\n                      label=\"Lead Source\"\r\n                    >\r\n                      <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                      </MenuItem>\r\n                      {allLeads.map((data, index) => {\r\n                        return (\r\n                          <MenuItem key={index.toString()} value={data.id}>\r\n                            {data.name}\r\n                          </MenuItem>\r\n                        );\r\n                      })}\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <FormControl variant=\"outlined\" className=\"custom-textfield\">\r\n                    <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                      Lead Status\r\n                    </InputLabel>\r\n                    <Select\r\n                      labelId=\"demo-simple-select-outlined-label\"\r\n                      id=\"demo-simple-select-outlined\"\r\n                      value={leadStatusId}\r\n                      onChange={(event) => {\r\n                        this.setState({\r\n                          leadStatusId: event.target.value,\r\n                        });\r\n                      }}\r\n                      label=\"Lead Status\"\r\n                    >\r\n                      <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                      </MenuItem>\r\n                      {allLeadsStatus.map((data, index) => {\r\n                        return (\r\n                          <MenuItem key={index.toString()} value={data.id}>\r\n                            {data.name}\r\n                          </MenuItem>\r\n                        );\r\n                      })}\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Box\r\n                color=\"text.secondary\"\r\n                mt={3}\r\n                mb={2}\r\n                className=\"spouse-heading\"\r\n                display=\"flex\"\r\n                alignItems=\"center\"\r\n              >\r\n                <Typography variant=\"subtitle1\" gutterBottom color=\"inherit\">\r\n                  Spouse\r\n                </Typography>\r\n              </Box>\r\n\r\n              <Grid container spacing={3}>\r\n                <Grid item xs={3}>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    label=\"First Name\"\r\n                    variant=\"outlined\"\r\n                    value={spouseFirstName}\r\n                    className=\"custom-textfield\"\r\n                    onChange={(event) => {\r\n                      this.setState({\r\n                        spouseFirstName: event.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    label=\"Last Name\"\r\n                    variant=\"outlined\"\r\n                    value={spouseLastName}\r\n                    className=\"custom-textfield\"\r\n                    onChange={(event) => {\r\n                      this.setState({\r\n                        spouseLastName: event.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                    <KeyboardDatePicker\r\n                      disableToolbar\r\n                      variant=\"inline\"\r\n                      format=\"dd-MM-yyyy\"\r\n                      autoOk\r\n                      margin=\"normal\"\r\n                      id=\"date-picker-inline\"\r\n                      label=\"Date Of Birth\"\r\n                      value={spouseDob ? spouseDob : selectedDate}\r\n                      onChange={(date) => {\r\n                        this.setState({\r\n                          spouseDob: date,\r\n                        });\r\n                      }}\r\n                      className=\"custom-datepicker\"\r\n                      KeyboardButtonProps={{\r\n                        \"aria-label\": \"change date\",\r\n                      }}\r\n                    />\r\n                  </MuiPickersUtilsProvider>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    label=\"Email Address\"\r\n                    variant=\"outlined\"\r\n                    value={spouseEmail}\r\n                    className=\"custom-textfield\"\r\n                    onChange={(event) => {\r\n                      this.setState({\r\n                        spouseEmail: event.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n              <Grid container spacing={3}>\r\n                <Grid item xs={3}>\r\n                  <TextField\r\n                    type=\"number\"\r\n                    label=\"Mobile Number\"\r\n                    variant=\"outlined\"\r\n                    value={spouseMobileNumber}\r\n                    className=\"custom-textfield\"\r\n                    onChange={(event) => {\r\n                      this.setState({\r\n                        spouseMobileNumber: event.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    label=\"Address\"\r\n                    variant=\"outlined\"\r\n                    value={spouseAddress}\r\n                    className=\"custom-textfield\"\r\n                    onChange={(event) => {\r\n                      this.setState({\r\n                        spouseAddress: event.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    label=\"Remarks\"\r\n                    variant=\"outlined\"\r\n                    value={spouseRemarks}\r\n                    className=\"custom-textfield\"\r\n                    onChange={(event) => {\r\n                      this.setState({\r\n                        spouseRemarks: event.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3} className=\"work-experience\">\r\n                  <Box color=\"text.secondary\">\r\n                    <Typography\r\n                      variant=\"subtitle2\"\r\n                      gutterBottom\r\n                      color=\"inherit\"\r\n                    >\r\n                      Work Experience\r\n                    </Typography>\r\n                  </Box>\r\n\r\n                  <Box display=\"flex\">\r\n                    <RadioGroup\r\n                      aria-label=\"gender\"\r\n                      name=\"gender1\"\r\n                      value={spouseWorkexperience}\r\n                      onChange={(event) => {\r\n                        this.setState({\r\n                          spouseWorkexperience: event.target.value,\r\n                        });\r\n                      }}\r\n                    >\r\n                      <FormControlLabel\r\n                        value=\"yes\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Yes\"\r\n                      />\r\n                      <FormControlLabel\r\n                        value=\"no\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"No\"\r\n                      />\r\n                    </RadioGroup>\r\n                  </Box>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Grid container spacing={3}>\r\n                <Grid item xs={3}>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    label=\"Work Duration\"\r\n                    variant=\"outlined\"\r\n                    value={spouseWorkduration}\r\n                    className=\"custom-textfield\"\r\n                    onChange={(event) => {\r\n                      this.setState({\r\n                        spouseWorkduration: event.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    label=\"Passport Number\"\r\n                    variant=\"outlined\"\r\n                    value={spousePassportnumber}\r\n                    className=\"custom-textfield\"\r\n                    onChange={(event) => {\r\n                      this.setState({\r\n                        spousePassportnumber: event.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Box\r\n                color=\"text.secondary\"\r\n                mt={3}\r\n                mb={2}\r\n                className=\"spouse-heading\"\r\n                display=\"flex\"\r\n                alignItems=\"center\"\r\n              >\r\n                <Typography variant=\"subtitle1\" gutterBottom color=\"inherit\">\r\n                  Spouse Qualifications\r\n                </Typography>\r\n                <Box\r\n                  ml=\"auto\"\r\n                  onClick={this.addSpouseQualifications}\r\n                  className=\"cursor-pointer\"\r\n                >\r\n                  <AddCircleIcon color=\"primary\" style={{ fontSize: 25 }} />\r\n                </Box>\r\n              </Box>\r\n              {spouseQualifications.map((data, index) => {\r\n                return (\r\n                  <>\r\n                    {spouseQualifications.length > 1 && index !== 0 ? (\r\n                      <Box\r\n                        color=\"text.secondary\"\r\n                        mt={3}\r\n                        mb={2}\r\n                        className=\"spouse-heading\"\r\n                        display=\"flex\"\r\n                        alignItems=\"center\"\r\n                      >\r\n                        <Box\r\n                          ml=\"auto\"\r\n                          onClick={() => this.removeSpouseQualifications(index)}\r\n                          className=\"cursor-pointer\"\r\n                        >\r\n                          <AddCircleIcon\r\n                            color=\"primary\"\r\n                            style={{ fontSize: 25 }}\r\n                          />\r\n                        </Box>\r\n                      </Box>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n\r\n                    <Grid key={index.toString()} container spacing={3}>\r\n                      <Grid item xs={3}>\r\n                        <FormControl\r\n                          variant=\"outlined\"\r\n                          className=\"custom-textfield\"\r\n                        >\r\n                          <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                            Qualification\r\n                          </InputLabel>\r\n                          <Select\r\n                            labelId=\"demo-simple-select-outlined-label\"\r\n                            id=\"demo-simple-select-outlined\"\r\n                            value={\r\n                              spouseQualifications[index][\"qualificationId\"]\r\n                            }\r\n                            onChange={(event) => {\r\n                              console.log(event.target.value);\r\n                              if (event.target.value) {\r\n                                let spouseQualifications = [];\r\n                                spouseQualifications = [\r\n                                  ...this.state.spouseQualifications,\r\n                                ];\r\n                                spouseQualifications[index][\"qualificationId\"] =\r\n                                  event.target.value;\r\n                                this.setState({\r\n                                  spouseQualifications,\r\n                                });\r\n                              }\r\n                            }}\r\n                            label=\"Qualification\"\r\n                          >\r\n                            <MenuItem value=\"\">\r\n                              <em>None</em>\r\n                            </MenuItem>\r\n                            {allQualifications.map((data, index) => {\r\n                              return (\r\n                                <MenuItem\r\n                                  key={index.toString()}\r\n                                  value={data.id}\r\n                                >\r\n                                  {data.name}\r\n                                </MenuItem>\r\n                              );\r\n                            })}\r\n                          </Select>\r\n                        </FormControl>\r\n                      </Grid>\r\n                      <Grid item xs={3}>\r\n                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                          <KeyboardDatePicker\r\n                            disableToolbar\r\n                            variant=\"inline\"\r\n                            format=\"dd-MM-yyyy\"\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-inline\"\r\n                            label=\"Passing Year\"\r\n                            autoOk\r\n                            value={spouseQualifications[index][\"date\"]}\r\n                            onChange={(date) => {\r\n                              let spouseQualifications = [];\r\n                              spouseQualifications = [\r\n                                ...this.state.spouseQualifications,\r\n                              ];\r\n                              spouseQualifications[index][\"date\"] = date;\r\n                              this.setState({\r\n                                spouseQualifications,\r\n                              });\r\n                            }}\r\n                            className=\"custom-datepicker\"\r\n                            KeyboardButtonProps={{\r\n                              \"aria-label\": \"change date\",\r\n                            }}\r\n                          />\r\n                        </MuiPickersUtilsProvider>\r\n                      </Grid>\r\n\r\n                      <Grid item xs={3}>\r\n                        <TextField\r\n                          type=\"text\"\r\n                          label=\"Percentage\"\r\n                          variant=\"outlined\"\r\n                          className=\"custom-textfield\"\r\n                          value={spouseQualifications[index][\"percentage\"]}\r\n                          onChange={(event) => {\r\n                            let spouseQualifications = [];\r\n                            spouseQualifications = [\r\n                              ...this.state.spouseQualifications,\r\n                            ];\r\n                            spouseQualifications[index][\"percentage\"] =\r\n                              event.target.value;\r\n                            this.setState({\r\n                              spouseQualifications,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={3}>\r\n                        <TextField\r\n                          type=\"text\"\r\n                          label=\"Description\"\r\n                          variant=\"outlined\"\r\n                          value={spouseQualifications[index][\"description\"]}\r\n                          className=\"custom-textfield\"\r\n                          onChange={(event) => {\r\n                            let spouseQualifications = [];\r\n                            spouseQualifications = [\r\n                              ...this.state.spouseQualifications,\r\n                            ];\r\n                            spouseQualifications[index][\"description\"] =\r\n                              event.target.value;\r\n                            this.setState({\r\n                              spouseQualifications,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Grid container spacing={3}>\r\n                      <Grid item xs={3}>\r\n                        <FormControl\r\n                          variant=\"outlined\"\r\n                          className=\"custom-textfield\"\r\n                        >\r\n                          <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                            University\r\n                          </InputLabel>\r\n                          <Select\r\n                            labelId=\"demo-simple-select-outlined-label\"\r\n                            id=\"demo-simple-select-outlined\"\r\n                            value={spouseQualifications[index][\"universityId\"]}\r\n                            onChange={(event) => {\r\n                              let spouseQualifications = [];\r\n                              spouseQualifications = [\r\n                                ...this.state.spouseQualifications,\r\n                              ];\r\n                              spouseQualifications[index][\"universityId\"] =\r\n                                event.target.value;\r\n                              this.setState({\r\n                                spouseQualifications,\r\n                              });\r\n                            }}\r\n                            label=\"University\"\r\n                          >\r\n                            <MenuItem value=\"\">\r\n                              <em>None</em>\r\n                            </MenuItem>\r\n                            {allUniversities.map((data, index) => {\r\n                              return (\r\n                                <MenuItem\r\n                                  key={index.toString()}\r\n                                  value={data.id}\r\n                                >\r\n                                  {data.name}\r\n                                </MenuItem>\r\n                              );\r\n                            })}\r\n                          </Select>\r\n                        </FormControl>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </>\r\n                );\r\n              })}\r\n\r\n              <Box\r\n                color=\"text.secondary\"\r\n                mt={3}\r\n                mb={2}\r\n                className=\"spouse-heading\"\r\n                display=\"flex\"\r\n                alignItems=\"center\"\r\n              >\r\n                <Typography variant=\"subtitle1\" gutterBottom color=\"inherit\">\r\n                  User Qualifications\r\n                </Typography>\r\n                <Box\r\n                  ml=\"auto\"\r\n                  onClick={this.addQuifications}\r\n                  className=\"cursor-pointer\"\r\n                >\r\n                  <AddCircleIcon color=\"primary\" style={{ fontSize: 25 }} />\r\n                </Box>\r\n              </Box>\r\n\r\n              {qualificationInputs.map((data, index) => {\r\n                return (\r\n                  <>\r\n                    {qualificationInputs.length > 1 && index !== 0 ? (\r\n                      <Box\r\n                        color=\"text.secondary\"\r\n                        mt={3}\r\n                        mb={2}\r\n                        className=\"spouse-heading\"\r\n                        display=\"flex\"\r\n                        alignItems=\"center\"\r\n                      >\r\n                        <Box\r\n                          ml=\"auto\"\r\n                          onClick={() => this.removeQualifications(index)}\r\n                          className=\"cursor-pointer\"\r\n                        >\r\n                          <AddCircleIcon\r\n                            color=\"primary\"\r\n                            style={{ fontSize: 25 }}\r\n                          />\r\n                        </Box>\r\n                      </Box>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    <Grid key={index.toString()} container spacing={3}>\r\n                      <Grid item xs={3}>\r\n                        <FormControl\r\n                          variant=\"outlined\"\r\n                          className=\"custom-textfield\"\r\n                        >\r\n                          <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                            Qualification\r\n                          </InputLabel>\r\n                          <Select\r\n                            labelId=\"demo-simple-select-outlined-label\"\r\n                            id=\"demo-simple-select-outlined\"\r\n                            value={\r\n                              qualificationInputs[index][\"qualificationId\"]\r\n                            }\r\n                            onChange={(event) => {\r\n                              if (event.target.value) {\r\n                                let qualificationInputs = [];\r\n                                qualificationInputs = [\r\n                                  ...this.state.qualificationInputs,\r\n                                ];\r\n                                qualificationInputs[index][\"qualificationId\"] =\r\n                                  event.target.value;\r\n                                this.setState({\r\n                                  qualificationInputs,\r\n                                });\r\n                              }\r\n                            }}\r\n                            label=\"Qualification\"\r\n                          >\r\n                            <MenuItem value=\"\">\r\n                              <em>None</em>\r\n                            </MenuItem>\r\n                            {allQualifications.map((data, index) => {\r\n                              return (\r\n                                <MenuItem\r\n                                  key={index.toString()}\r\n                                  value={data.id}\r\n                                >\r\n                                  {data.name}\r\n                                </MenuItem>\r\n                              );\r\n                            })}\r\n                          </Select>\r\n                        </FormControl>\r\n                      </Grid>\r\n                      <Grid item xs={3}>\r\n                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                          <KeyboardDatePicker\r\n                            disableToolbar\r\n                            variant=\"inline\"\r\n                            format=\"dd-MM-yyyy\"\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-inline\"\r\n                            label=\"Passing Year\"\r\n                            autoOk\r\n                            value={qualificationInputs[index][\"date\"]}\r\n                            onChange={(date) => {\r\n                              let qualificationInputs = [];\r\n                              qualificationInputs = [\r\n                                ...this.state.qualificationInputs,\r\n                              ];\r\n                              qualificationInputs[index][\"date\"] = date;\r\n                              this.setState({\r\n                                qualificationInputs,\r\n                              });\r\n                            }}\r\n                            className=\"custom-datepicker\"\r\n                            KeyboardButtonProps={{\r\n                              \"aria-label\": \"change date\",\r\n                            }}\r\n                          />\r\n                        </MuiPickersUtilsProvider>\r\n                      </Grid>\r\n\r\n                      <Grid item xs={3}>\r\n                        <TextField\r\n                          type=\"text\"\r\n                          label=\"Percentage\"\r\n                          variant=\"outlined\"\r\n                          className=\"custom-textfield\"\r\n                          value={qualificationInputs[index][\"percentage\"]}\r\n                          onChange={(event) => {\r\n                            let qualificationInputs = [];\r\n                            qualificationInputs = [\r\n                              ...this.state.qualificationInputs,\r\n                            ];\r\n                            qualificationInputs[index][\"percentage\"] =\r\n                              event.target.value;\r\n                            this.setState({\r\n                              qualificationInputs,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={3}>\r\n                        <TextField\r\n                          type=\"text\"\r\n                          label=\"Description\"\r\n                          variant=\"outlined\"\r\n                          className=\"custom-textfield\"\r\n                          value={qualificationInputs[index][\"description\"]}\r\n                          onChange={(event) => {\r\n                            let qualificationInputs = [];\r\n                            qualificationInputs = [\r\n                              ...this.state.qualificationInputs,\r\n                            ];\r\n                            qualificationInputs[index][\"description\"] =\r\n                              event.target.value;\r\n                            this.setState({\r\n                              qualificationInputs,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Grid container spacing={3}>\r\n                      <Grid item xs={3}>\r\n                        <FormControl\r\n                          variant=\"outlined\"\r\n                          className=\"custom-textfield\"\r\n                        >\r\n                          <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                            University\r\n                          </InputLabel>\r\n                          <Select\r\n                            labelId=\"demo-simple-select-outlined-label\"\r\n                            id=\"demo-simple-select-outlined\"\r\n                            value={qualificationInputs[index][\"universityId\"]}\r\n                            onChange={(event) => {\r\n                              let qualificationInputs = [];\r\n                              qualificationInputs = [\r\n                                ...this.state.qualificationInputs,\r\n                              ];\r\n                              qualificationInputs[index][\"universityId\"] =\r\n                                event.target.value;\r\n                              this.setState({\r\n                                qualificationInputs,\r\n                              });\r\n                            }}\r\n                            label=\"University\"\r\n                          >\r\n                            <MenuItem value=\"\">\r\n                              <em>None</em>\r\n                            </MenuItem>\r\n                            {allUniversities.map((data, index) => {\r\n                              return (\r\n                                <MenuItem\r\n                                  key={index.toString()}\r\n                                  value={data.id}\r\n                                >\r\n                                  {data.name}\r\n                                </MenuItem>\r\n                              );\r\n                            })}\r\n                          </Select>\r\n                        </FormControl>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </>\r\n                );\r\n              })}\r\n              <Box\r\n                color=\"text.secondary\"\r\n                mt={3}\r\n                mb={2}\r\n                className=\"spouse-heading\"\r\n                display=\"flex\"\r\n                alignItems=\"center\"\r\n              >\r\n                <Typography variant=\"subtitle1\" gutterBottom color=\"inherit\">\r\n                  Create User Visa\r\n                </Typography>\r\n                <Box\r\n                  ml=\"auto\"\r\n                  onClick={this.addMoreVisaInfos}\r\n                  className=\"cursor-pointer\"\r\n                >\r\n                  <AddCircleIcon color=\"primary\" style={{ fontSize: 25 }} />\r\n                </Box>\r\n              </Box>\r\n              {visaInfos.map((data, index) => {\r\n                return (\r\n                  <>\r\n                    {visaInfos.length > 1 && index !== 0 ? (\r\n                      <Box\r\n                        color=\"text.secondary\"\r\n                        mt={3}\r\n                        mb={2}\r\n                        className=\"spouse-heading\"\r\n                        display=\"flex\"\r\n                        alignItems=\"center\"\r\n                      >\r\n                        <Box\r\n                          ml=\"auto\"\r\n                          onClick={() => this.removeVisaInfos(index)}\r\n                          className=\"cursor-pointer\"\r\n                        >\r\n                          <AddCircleIcon\r\n                            color=\"primary\"\r\n                            style={{ fontSize: 25 }}\r\n                          />\r\n                        </Box>\r\n                      </Box>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    <Grid key={index.toString()} container spacing={3}>\r\n                      <Grid item xs={3}>\r\n                        <FormControl\r\n                          variant=\"outlined\"\r\n                          className=\"custom-textfield\"\r\n                        >\r\n                          <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                            Visa Type\r\n                          </InputLabel>\r\n                          <Select\r\n                            labelId=\"demo-simple-select-outlined-label\"\r\n                            id=\"demo-simple-select-outlined\"\r\n                            value={visaInfos[index][\"visaId\"]}\r\n                            onChange={(event) => {\r\n                              if (event.target.value) {\r\n                                let visaInfos = [];\r\n                                visaInfos = [...this.state.visaInfos];\r\n                                visaInfos[index][\"visaId\"] = event.target.value;\r\n                                this.setState({\r\n                                  visaInfos,\r\n                                });\r\n                              }\r\n                            }}\r\n                            label=\"Visa Type\"\r\n                          >\r\n                            <MenuItem value=\"\">\r\n                              <em>None</em>\r\n                            </MenuItem>\r\n                            {allVisaTypes.map((data, index) => {\r\n                              return (\r\n                                <MenuItem\r\n                                  key={index.toString()}\r\n                                  value={data.id}\r\n                                >\r\n                                  {data.name}\r\n                                </MenuItem>\r\n                              );\r\n                            })}\r\n                          </Select>\r\n                        </FormControl>\r\n                      </Grid>\r\n                      <Grid item xs={3}>\r\n                        <FormControl\r\n                          variant=\"outlined\"\r\n                          className=\"custom-textfield\"\r\n                        >\r\n                          <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                            Country\r\n                          </InputLabel>\r\n                          <Select\r\n                            labelId=\"demo-simple-select-outlined-label\"\r\n                            id=\"demo-simple-select-outlined\"\r\n                            value={visaInfos[index][\"visaCountry\"]}\r\n                            onChange={(event) => {\r\n                              if (event.target.value) {\r\n                                let visaInfos = [];\r\n                                visaInfos = [...this.state.visaInfos];\r\n                                visaInfos[index][\"visaCountry\"] =\r\n                                  event.target.value;\r\n                                this.setState({\r\n                                  visaInfos,\r\n                                });\r\n                              }\r\n                            }}\r\n                            label=\"Country\"\r\n                          >\r\n                            <MenuItem value=\"\">\r\n                              <em>None</em>\r\n                            </MenuItem>\r\n                            {allCountries.map((data, index) => {\r\n                              return (\r\n                                <MenuItem\r\n                                  key={index.toString()}\r\n                                  value={data.id}\r\n                                >\r\n                                  {data.countryDescription}\r\n                                </MenuItem>\r\n                              );\r\n                            })}\r\n                          </Select>\r\n                        </FormControl>\r\n                      </Grid>\r\n\r\n                      <Grid item xs={3}>\r\n                        <TextField\r\n                          type=\"text\"\r\n                          label=\"City\"\r\n                          variant=\"outlined\"\r\n                          className=\"custom-textfield\"\r\n                          value={visaInfos[index][\"visaCity\"]}\r\n                          onChange={(event) => {\r\n                            let visaInfos = [];\r\n                            visaInfos = [...this.state.visaInfos];\r\n                            visaInfos[index][\"visaCity\"] = event.target.value;\r\n                            this.setState({\r\n                              visaInfos,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={3}>\r\n                        <TextField\r\n                          type=\"text\"\r\n                          label=\"Reason\"\r\n                          variant=\"outlined\"\r\n                          className=\"custom-textfield\"\r\n                          value={visaInfos[index][\"visaReason\"]}\r\n                          onChange={(event) => {\r\n                            let visaInfos = [];\r\n                            visaInfos = [...this.state.visaInfos];\r\n                            visaInfos[index][\"visaReason\"] = event.target.value;\r\n                            this.setState({\r\n                              visaInfos,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={3}>\r\n                        <TextField\r\n                          type=\"text\"\r\n                          label=\"remarks\"\r\n                          variant=\"outlined\"\r\n                          className=\"custom-textfield\"\r\n                          value={visaInfos[index][\"visaRemarks\"]}\r\n                          onChange={(event) => {\r\n                            let visaInfos = [];\r\n                            visaInfos = [...this.state.visaInfos];\r\n                            visaInfos[index][\"visaRemarks\"] =\r\n                              event.target.value;\r\n                            this.setState({\r\n                              visaInfos,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </>\r\n                );\r\n              })}\r\n\r\n              <Box\r\n                color=\"text.secondary\"\r\n                mt={3}\r\n                mb={2}\r\n                className=\"spouse-heading\"\r\n                display=\"flex\"\r\n                alignItems=\"center\"\r\n              >\r\n                <Typography variant=\"subtitle1\" gutterBottom color=\"inherit\">\r\n                  User Refusales Visa\r\n                </Typography>\r\n                <Box\r\n                  ml=\"auto\"\r\n                  onClick={this.addRefUsaleses}\r\n                  className=\"cursor-pointer\"\r\n                >\r\n                  <AddCircleIcon color=\"primary\" style={{ fontSize: 25 }} />\r\n                </Box>\r\n              </Box>\r\n              {visaRefusaleses.map((data, index) => {\r\n                return (\r\n                  <>\r\n                    {visaRefusaleses.length > 1 && index !== 0 ? (\r\n                      <Box\r\n                        color=\"text.secondary\"\r\n                        mt={3}\r\n                        mb={2}\r\n                        className=\"spouse-heading\"\r\n                        display=\"flex\"\r\n                        alignItems=\"center\"\r\n                      >\r\n                        <Box\r\n                          ml=\"auto\"\r\n                          onClick={() => this.removeRefUsaleses(index)}\r\n                          className=\"cursor-pointer\"\r\n                        >\r\n                          <AddCircleIcon\r\n                            color=\"primary\"\r\n                            style={{ fontSize: 25 }}\r\n                          />\r\n                        </Box>\r\n                      </Box>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    <Grid key={index.toString()} container spacing={3}>\r\n                      <Grid item xs={3}>\r\n                        <FormControl\r\n                          variant=\"outlined\"\r\n                          className=\"custom-textfield\"\r\n                        >\r\n                          <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                            Visa Type\r\n                          </InputLabel>\r\n                          <Select\r\n                            labelId=\"demo-simple-select-outlined-label\"\r\n                            id=\"demo-simple-select-outlined\"\r\n                            value={visaRefusaleses[index][\"refVisaID\"]}\r\n                            onChange={(event) => {\r\n                              let visaRefusaleses = [];\r\n                              visaRefusaleses = [...this.state.visaRefusaleses];\r\n                              visaRefusaleses[index][\"refVisaID\"] =\r\n                                event.target.value;\r\n                              this.setState({\r\n                                visaRefusaleses,\r\n                              });\r\n                            }}\r\n                            label=\"Visa Type\"\r\n                          >\r\n                            <MenuItem value=\"\">\r\n                              <em>None</em>\r\n                            </MenuItem>\r\n                            {allVisaTypes.map((data, index) => {\r\n                              return (\r\n                                <MenuItem\r\n                                  key={index.toString()}\r\n                                  value={data.id}\r\n                                >\r\n                                  {data.name}\r\n                                </MenuItem>\r\n                              );\r\n                            })}\r\n                          </Select>\r\n                        </FormControl>\r\n                      </Grid>\r\n                      <Grid item xs={3}>\r\n                        <FormControl\r\n                          variant=\"outlined\"\r\n                          className=\"custom-textfield\"\r\n                        >\r\n                          <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                            Country\r\n                          </InputLabel>\r\n                          <Select\r\n                            labelId=\"demo-simple-select-outlined-label\"\r\n                            id=\"demo-simple-select-outlined\"\r\n                            value={visaRefusaleses[index][\"refCountry\"]}\r\n                            onChange={(event) => {\r\n                              if (event.target.value) {\r\n                                let visaRefusaleses = [];\r\n                                visaRefusaleses = [\r\n                                  ...this.state.visaRefusaleses,\r\n                                ];\r\n                                visaRefusaleses[index][\"refCountry\"] =\r\n                                  event.target.value;\r\n                                this.setState({\r\n                                  visaRefusaleses,\r\n                                });\r\n                              }\r\n                            }}\r\n                            label=\"Country\"\r\n                          >\r\n                            <MenuItem value=\"\">\r\n                              <em>None</em>\r\n                            </MenuItem>\r\n                            {allCountries.map((data, index) => {\r\n                              return (\r\n                                <MenuItem\r\n                                  key={index.toString()}\r\n                                  value={data.id}\r\n                                >\r\n                                  {data.countryDescription}\r\n                                </MenuItem>\r\n                              );\r\n                            })}\r\n                          </Select>\r\n                        </FormControl>\r\n                      </Grid>\r\n\r\n                      <Grid item xs={3}>\r\n                        <TextField\r\n                          type=\"text\"\r\n                          label=\"Reason\"\r\n                          variant=\"outlined\"\r\n                          value={visaRefusaleses[index][\"refReason\"]}\r\n                          className=\"custom-textfield\"\r\n                          onChange={(event) => {\r\n                            let visaRefusaleses = [];\r\n                            visaRefusaleses = [...this.state.visaRefusaleses];\r\n                            visaRefusaleses[index][\"refReason\"] =\r\n                              event.target.value;\r\n                            this.setState({\r\n                              visaRefusaleses,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={3}>\r\n                        <TextField\r\n                          type=\"text\"\r\n                          label=\"remarks\"\r\n                          variant=\"outlined\"\r\n                          className=\"custom-textfield\"\r\n                          value={visaRefusaleses[index][\"refRemarks\"]}\r\n                          onChange={(event) => {\r\n                            let visaRefusaleses = [];\r\n                            visaRefusaleses = [...this.state.visaRefusaleses];\r\n                            visaRefusaleses[index][\"refRemarks\"] =\r\n                              event.target.value;\r\n                            this.setState({\r\n                              visaRefusaleses,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </>\r\n                );\r\n              })}\r\n\r\n              <Box mt={3}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  disableElevation\r\n                  size=\"large\"\r\n                  onClick={this.onSubmit}\r\n                  className=\"custom-button\"\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </Box>\r\n            </Box>\r\n          </Paper>\r\n          <Snackbar\r\n            autoHideDuration={3000}\r\n            anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n            open={errorSnack}\r\n            onClose={this.handleClose}\r\n          >\r\n            {errorMessage ? (\r\n              <Alert onClose={this.handleClose} severity=\"error\">\r\n                {errorMessage}\r\n              </Alert>\r\n            ) : (\r\n              <Alert onClose={this.handleClose} severity=\"success\">\r\n                {\"Data Successfully Submitted\"}\r\n              </Alert>\r\n            )}\r\n          </Snackbar>\r\n        </Box>\r\n      </ThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddLead;\r\n","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/pages/AddBranch/index.js",["446","447","448","449"],[],"import React from \"react\";\r\nimport { Paper, Box, Typography, Snackbar } from \"@material-ui/core\";\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\nimport { theme } from \"../../theme/light\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Table, Grid, TextField ,CircularProgress} from \"@material-ui/core\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport UserService from \"../../services/user.service\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\n\r\nconst useStyles = (theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n});\r\nlet rows = [];\r\n\r\nclass AddBranch extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      order: \"asc\",\r\n      orderBy: \"calories\",\r\n      selected: [],\r\n      page: 0,\r\n      rowsPerPage: 5,\r\n      top: false,\r\n      left: false,\r\n      bottom: false,\r\n      right: false,\r\n      allBranch: [],\r\n      name: \"\",\r\n      emailAddress: \"\",\r\n      mobileNumber: \"\",\r\n      city: \"\",\r\n      address: \"\",\r\n      description: \"\",\r\n      errorSnack: \"\",\r\n      errorMessage: \"\",\r\n      isSnack: false,\r\n      Message: \"\",\r\n      isload: false,\r\n      \r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getAlllead();\r\n  }\r\n\r\n  handleRequestSort = (event, property) => {\r\n    const { orderBy, order } = this.state;\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    this.setState({\r\n      order: isAsc ? \"desc\" : \"asc\",\r\n    });\r\n    this.setState({\r\n      orderBy: property,\r\n    });\r\n  };\r\n\r\n  getAlllead = async () => {\r\n    try {\r\n      const response = await UserService.GetAllBranch();\r\n      console.log(\"response of ssssss\", response);\r\n\r\n      const { data } = response;\r\n      const { data: list, succeeded } = data;\r\n      if (succeeded) {\r\n        if (list && list.length) {\r\n          this.setState({\r\n            allBranch: list,\r\n          });\r\n          rows = list;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"status error\", error);\r\n    }\r\n  };\r\n\r\n  handleSelectAllClick = (event) => {\r\n    const { allBranch } = this.state;\r\n    if (event.target.checked) {\r\n      const newSelecteds = allBranch.map((n) => n.id);\r\n\r\n      this.setState({\r\n        selected: newSelecteds,\r\n      });\r\n      return;\r\n    }\r\n    this.setState({ selected: [] });\r\n  };\r\n\r\n  handleClick = (event, name) => {\r\n    const { selected } = this.state;\r\n    console.log(selected);\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    this.setState({\r\n      selected: newSelected,\r\n    });\r\n  };\r\n\r\n  handleChangePage = (event, newPage) => {\r\n    this.setState({ page: newPage });\r\n  };\r\n\r\n  handleChangeRowsPerPage = (event) => {\r\n    this.setState({ rowsPerPage: parseInt(event.target.value, 10) });\r\n\r\n    this.setState({ page: 0 });\r\n  };\r\n\r\n  toggleDrawer = (anchor, open) => (event) => {\r\n    if (\r\n      event.type === \"keydown\" &&\r\n      (event.key === \"Tab\" || event.key === \"Shift\")\r\n    ) {\r\n      return;\r\n    }\r\n    this.setState({ [anchor]: open });\r\n  };\r\n\r\n  submitBranch = async () => {\r\n    const { name, emailAddress, mobileNumber, city, address, description } =\r\n      this.state;\r\n      this.setState({isload: true});\r\n    try {\r\n      const response = await UserService.SaveBranch(\r\n        name,\r\n        emailAddress,\r\n        mobileNumber,\r\n        city,\r\n        address,\r\n        description\r\n      );\r\n\r\n      console.log(\"response of ssssss\", response);\r\n      this.setState({\r\n        isSnack: true,\r\n        Message: \"Successfully Submitted\",\r\n        name: \"\",\r\n        emailAddress: \"\",\r\n        mobileNumber: \"\",\r\n        city: \"\",\r\n        address: \"\",\r\n        description: \"\",\r\n        isload: false\r\n      });\r\n      \r\n      // const { data } = response;\r\n      // const { data: list, succeeded } = data;\r\n      // if (succeeded) {\r\n      //   if (list && list.length) {\r\n      //     this.setState({\r\n      //       allBranch: list,\r\n      //     });\r\n      //     rows = list;\r\n      //   }\r\n      // }\r\n    } catch (error) {\r\n      console.log(\"status error\", error);\r\n      this.setState({\r\n        errorSnack: true,\r\n        errorMessage: \"server error\",\r\n        isload: false\r\n       \r\n      });\r\n    }\r\n  };\r\n\r\n  handleClose = (event, reason) => {\r\n    this.setState({\r\n      errorSnack: false,\r\n      isSnack: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    const {\r\n      rowsPerPage,\r\n      page,\r\n      selected,\r\n      orderBy,\r\n      order,\r\n      allBranch,\r\n      name,\r\n      emailAddress,\r\n      mobileNumber,\r\n      city,\r\n      address,\r\n      description,\r\n      errorSnack,\r\n      errorMessage,\r\n      isSnack,\r\n      Message,\r\n      isload\r\n    } = this.state;\r\n    const rows = allBranch;\r\n    const emptyRows =\r\n      rowsPerPage -\r\n      Math.min(rowsPerPage, allBranch.length - page * rowsPerPage);\r\n\r\n    const isSelected = (id) => selected.indexOf(id) !== -1;\r\n    const list = (anchor) => (\r\n      <Box className=\"share-steps\" height=\"100%\">\r\n        <Box\r\n          display=\"flex\"\r\n          width=\"100%\"\r\n          height=\"100%\"\r\n          flexDirection=\"column\"\r\n          bgcolor=\"primary.drawerBg\"\r\n          className={clsx(classes.list, {\r\n            [classes.fullList]: anchor === \"top\" || anchor === \"bottom\",\r\n          })}\r\n          role=\"presentation\"\r\n        >\r\n          <Box className=\"common-content\" position=\"relative\" height=\"100%\">\r\n            <Box\r\n              className=\"sidebar-header\"\r\n              display=\"flex\"\r\n              alignItems=\"center\"\r\n              px={3}\r\n              py={2.4}\r\n            >\r\n              <Box color=\"text.textBlue\">\r\n                \r\n                <Typography variant=\"h6\" gutterBottom color=\"inherit\">\r\n                  Save and Update\r\n                </Typography>\r\n              </Box>\r\n              <Box\r\n                className=\"close-drawer cursor-pointer\"\r\n                display=\"flex\"\r\n                alignItems=\"center\"\r\n                color=\"grey.500\"\r\n                onClick={this.toggleDrawer(anchor, false)}\r\n              >\r\n                <CloseIcon color=\"inherit\" />\r\n              </Box>\r\n            </Box>\r\n            <Divider />\r\n\r\n            <Box\r\n              className=\"share-sidebar-content share-mamber-content register-container\"\r\n              p={3}\r\n              pa\r\n            >\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    label=\"Name\"\r\n                    variant=\"outlined\"\r\n                    className=\"custom-textfield\"\r\n                    value={this.state.name}\r\n                    onChange={(event) => {\r\n                      this.setState({\r\n                        name: event.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    label=\"Email Address\"\r\n                    value={this.state.emailAddress}\r\n                    variant=\"outlined\"\r\n                    className=\"custom-textfield\"\r\n                    onChange={(event) => {\r\n                      this.setState({\r\n                        emailAddress: event.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    label=\"Mobile Number\"\r\n                    variant=\"outlined\"\r\n                    className=\"custom-textfield\"\r\n                    value={this.state.mobileNumber}\r\n                    onChange={(event) => {\r\n                      this.setState({\r\n                        mobileNumber: event.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    label=\"City\"\r\n                    variant=\"outlined\"\r\n                    className=\"custom-textfield\"\r\n                    value={this.state.city}\r\n                    onChange={(event) => {\r\n                      this.setState({\r\n                        city: event.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    label=\"Address\"\r\n                    variant=\"outlined\"\r\n                    className=\"custom-textfield\"\r\n                    value={this.state.address}\r\n                    onChange={(event) => {\r\n                      this.setState({\r\n                        address: event.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    label=\"Description\"\r\n                    variant=\"outlined\"\r\n                    className=\"custom-textfield\"\r\n                    value={this.state.description}\r\n                    onChange={(event) => {\r\n                      this.setState({\r\n                        description: event.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Box></Box>\r\n            </Box>\r\n\r\n            <Box\r\n              className=\"sidebar-footer\"\r\n              position=\"absolute\"\r\n              bottom=\"0\"\r\n              left=\"0\"\r\n              width=\"100%\"\r\n              minHeight=\"82px\"\r\n              px={3}\r\n              py={1.5}\r\n              display=\"flex\"\r\n              alignItems=\"center\"\r\n              boxSizing=\"border-box\"\r\n              bgcolor=\"primary.drawerBg\"\r\n            >\r\n              <Box pr={1} width=\"150px\" boxSizing=\"border-box\">\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  className=\"cancel-button\"\r\n                  disableElevation\r\n                  size=\"large\"\r\n                  onClick={this.toggleDrawer(anchor, false)}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n              </Box>\r\n              <Box width=\"150px\" boxSizing=\"border-box\">\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className=\"next-button\"\r\n                  disabled={isload}\r\n                  disableElevation\r\n                  size=\"large\"\r\n                  onClick={() => {\r\n                  \r\n                    if (!name.trim()) {\r\n                      this.setState({\r\n                        errorSnack: true,\r\n                        errorMessage: \"please enter the name\",\r\n                      });\r\n                    } else if (!emailAddress.trim()) {\r\n                      this.setState({\r\n                        errorSnack: true,\r\n                        errorMessage: \"please enter the email\",\r\n                      });\r\n                    } else if (!mobileNumber.trim()) {\r\n                      this.setState({\r\n                        errorSnack: true,\r\n                        errorMessage: \"please enter the mobile number\",\r\n                      });\r\n                    }  else {\r\n                      this.submitBranch();\r\n                    }\r\n                  }}\r\n                >\r\n                   {isload && <CircularProgress size={16} />}\r\n                  Save\r\n                </Button>\r\n              </Box>\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n        <Snackbar\r\n          autoHideDuration={1000}\r\n          anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n          open={errorSnack}\r\n          onClose={this.handleClose}\r\n        >\r\n          {errorMessage ? (\r\n            <Alert onClose={this.handleClose} severity=\"error\">\r\n              {errorMessage}\r\n            </Alert>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </Snackbar>\r\n        <Snackbar\r\n          autoHideDuration={1000}\r\n          anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n          open={isSnack}\r\n          onClose={this.handleClose}\r\n        >\r\n          {Message ? (\r\n            <Alert onClose={this.handleClose} severity=\"success\">\r\n              {Message}\r\n            </Alert>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </Snackbar>\r\n      </Box>\r\n\r\n      // Drawer End here\r\n    );\r\n    return (\r\n      <ThemeProvider theme={theme}>\r\n        <Box className=\"container\" p={2.5} bgcolor=\"primary.lightBgContainer\">\r\n          <Paper className=\"content lead-page\">\r\n            <Box className=\"page-heading\" mb={3}>\r\n              <Box color=\"text.secondary\" pt={3} pr={2.7} pb={1.8} pl={3}>\r\n                <Typography variant=\"h6\" gutterBottom color=\"inherit\">\r\n                  Branch\r\n                </Typography>\r\n                {[\"right\"].map((anchor) => (\r\n                  <React.Fragment key={anchor}>\r\n                    <Button onClick={this.toggleDrawer(anchor, true)}>\r\n                      Add New Branch\r\n                    </Button>\r\n                    <Drawer\r\n                      className=\"common-sidebar \"\r\n                      anchor={anchor}\r\n                      open={this.state[anchor]}\r\n                      onClose={this.toggleDrawer(anchor, false)}\r\n                    >\r\n                      {list(anchor)}\r\n                    </Drawer>\r\n                  </React.Fragment>\r\n                ))}\r\n              </Box>\r\n              <Divider />\r\n            </Box>\r\n\r\n            <div className=\"data-table\">\r\n              <div className={classes.root}>\r\n                <Paper className={classes.paper} elevation={0}>\r\n                \r\n                  <TableContainer>\r\n                    <Table\r\n                      className={classes.table}\r\n                      aria-labelledby=\"tableTitle\"\r\n                      aria-label=\"enhanced table\"\r\n                    >\r\n                      <EnhancedTableHead\r\n                        classes={classes}\r\n                        numSelected={selected.length}\r\n                        order={order}\r\n                        orderBy={orderBy}\r\n                        onSelectAllClick={this.handleSelectAllClick}\r\n                        onRequestSort={this.handleRequestSort}\r\n                        rowCount={rows.length}\r\n                      />\r\n                      <TableBody>\r\n                        {stableSort(rows, getComparator(order, orderBy))\r\n                          .slice(\r\n                            page * rowsPerPage,\r\n                            page * rowsPerPage + rowsPerPage\r\n                          )\r\n                          .map((Lead, index) => {\r\n                            const isItemSelected = isSelected(Lead.id);\r\n                            const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                            return (\r\n                              <TableRow\r\n                                hover\r\n                                onClick={(event) =>\r\n                                  this.handleClick(event, Lead.id)\r\n                                }\r\n                                role=\"checkbox\"\r\n                                aria-checked={isItemSelected}\r\n                                tabIndex={-1}\r\n                                key={index}\r\n                                selected={isItemSelected}\r\n                              >\r\n                                <TableCell padding=\"checkbox\">\r\n                                  <Checkbox\r\n                                    checked={isItemSelected}\r\n                                    inputProps={{ \"aria-labelledby\": labelId }}\r\n                                  />\r\n                                </TableCell>\r\n                                <TableCell\r\n                                  component=\"th\"\r\n                                  id={labelId}\r\n                                  scope=\"row\"\r\n                                  padding=\"none\"\r\n                                >\r\n                                  {Lead.name}\r\n                                </TableCell>\r\n                                <TableCell align=\"left\">\r\n                                  {Lead.emailAddress}\r\n                                </TableCell>\r\n                                <TableCell align=\"left\">\r\n                                  {Lead.mobileNumber}\r\n                                </TableCell>\r\n                                <TableCell align=\"left\">{Lead.city}</TableCell>\r\n                                <TableCell align=\"left\">\r\n                                  {Lead.description}\r\n                                </TableCell>\r\n\r\n                                <TableCell align=\"left\">\r\n                                  <Box\r\n                                    display=\"inline-flex\"\r\n                                    alignItems=\"center\"\r\n                                    ml=\"auto\"\r\n                                  >\r\n                                    <Box\r\n                                      className=\"edit-icon cursor-pointer\"\r\n                                      mr={1}\r\n                                      bgcolor=\"primary.primaryIconBg\"\r\n                                      color=\"text.textSecondary\"\r\n                                      width=\"27px\"\r\n                                      height=\"27px\"\r\n                                      borderRadius=\"5px\"\r\n                                      display=\"flex\"\r\n                                      alignItems=\"center\"\r\n                                      justifyContent=\"center\"\r\n                                    >\r\n                                      <EditIcon\r\n                                        style={{ fontSize: 18 }}\r\n                                        color=\"inherit\"\r\n                                      />\r\n                                    </Box>\r\n                                    <Box\r\n                                      className=\"edit-icon cursor-pointer\"\r\n                                      bgcolor=\"error.lightIcon\"\r\n                                      color=\"error.dark\"\r\n                                      width=\"27px\"\r\n                                      height=\"27px\"\r\n                                      borderRadius=\"5px\"\r\n                                      display=\"flex\"\r\n                                      alignItems=\"center\"\r\n                                      justifyContent=\"center\"\r\n                                    >\r\n                                      <DeleteIcon\r\n                                        style={{ fontSize: 18 }}\r\n                                        color=\"inherit\"\r\n                                      />\r\n                                    </Box>\r\n                                  </Box>\r\n                                </TableCell>\r\n                              </TableRow>\r\n                            );\r\n                          })}\r\n                        {emptyRows > 0 && (\r\n                          <TableRow>\r\n                            <TableCell colSpan={6} />\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component=\"div\"\r\n                    count={allBranch.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onPageChange={this.handleChangePage}\r\n                    onRowsPerPageChange={this.handleChangeRowsPerPage}\r\n                  />\r\n                </Paper>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Drawer Map here */}\r\n            {/* <div>\r\n        {['right'].map((anchor) => (\r\n          <React.Fragment key={anchor}>\r\n            <Button onClick={this.toggleDrawer(anchor, true)}>{anchor}</Button>\r\n            <Drawer className=\"common-sidebar \" anchor={anchor} open={this.state[anchor]} onClose={this.toggleDrawer(anchor, false)}>\r\n              {list(anchor)}\r\n            </Drawer>\r\n          </React.Fragment>\r\n        ))}\r\n      </div> */}\r\n\r\n            {/* Drawer Map here */}\r\n          </Paper>\r\n        </Box>\r\n      </ThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(useStyles)(AddBranch);\r\n\r\n// export default Leads;\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  console.log(\"getComparator\", order);\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  { id: \"name\", numeric: false, disablePadding: false, label: \" Name\" },\r\n  {\r\n    id: \"emailAddress\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Mobile Number\",\r\n  },\r\n  { id: \"mobileNumber\", numeric: false, disablePadding: false, label: \"city\" },\r\n  { id: \"city\", numeric: false, disablePadding: false, label: \"Email\" },\r\n  {\r\n    id: \"description\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Description\",\r\n  },\r\n  { id: \"Action\", numeric: false, disablePadding: false, label: \"Action\" },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ \"aria-label\": \"select all desserts\" }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? \"right\" : \"left\"}\r\n            padding={headCell.disablePadding ? \"none\" : \"normal\"}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === \"light\"\r\n      ? {\r\n          color: theme.palette.primary.light,\r\n          // backgroundColor: lighten(theme.palette.primary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.primary.light,\r\n          // backgroundColor: theme.palette.primary.dark,\r\n        },\r\n  title: {\r\n    flex: \"1 1 100%\",\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected } = props;\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}\r\n    >\r\n      {numSelected > 0 ? (\r\n        <Typography\r\n          className={classes.title}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\"\r\n        >\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          className={classes.title}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\"\r\n        ></Typography>\r\n      )}\r\n\r\n      {numSelected > 0 ? (\r\n        <Tooltip title=\"Delete\">\r\n          <IconButton aria-label=\"delete\">\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ) : (\r\n        <Tooltip title=\"Filter list\">\r\n          <IconButton aria-label=\"filter list\">\r\n            {/* <FilterListIcon /> */}\r\n          </IconButton>\r\n        </Tooltip>\r\n      )}\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/pages/Reports/index.js",["450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474"],[],"import React from \"react\";\r\nimport { Paper, Box, Typography, Snackbar } from \"@material-ui/core\";\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\nimport { theme } from \"../../theme/light\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Table, Grid, TextField, CircularProgress } from \"@material-ui/core\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport UserService from \"../../services/user.service\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\nconst useStyles = (theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n});\r\nlet rows = [];\r\n\r\nclass Reports extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      order: \"asc\",\r\n      orderBy: \"calories\",\r\n      selected: [],\r\n      page: 0,\r\n      rowsPerPage: 10,\r\n      top: false,\r\n      left: false,\r\n      bottom: false,\r\n      right: false,\r\n      allBranch: [],\r\n      name: \"\",\r\n      emailAddress: \"\",\r\n      mobileNumber: \"\",\r\n      city: \"\",\r\n      address: \"\",\r\n      description: \"\",\r\n      errorSnack: \"\",\r\n      errorMessage: \"\",\r\n      isSnack: false,\r\n      Message: \"\",\r\n      isload: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getAlllead();\r\n  }\r\n\r\n  handleRequestSort = (event, property) => {\r\n    const { orderBy, order } = this.state;\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    this.setState({\r\n      order: isAsc ? \"desc\" : \"asc\",\r\n    });\r\n    this.setState({\r\n      orderBy: property,\r\n    });\r\n  };\r\n\r\n  getAlllead = async () => {\r\n    try {\r\n      const response = await UserService.GetAllBranch();\r\n      console.log(\"response of ssssss\", response);\r\n\r\n      const { data } = response;\r\n      const { data: list, succeeded } = data;\r\n      if (succeeded) {\r\n        if (list && list.length) {\r\n          this.setState({\r\n            allBranch: list,\r\n          });\r\n          rows = list;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"status error\", error);\r\n    }\r\n  };\r\n\r\n  handleSelectAllClick = (event) => {\r\n    const { allBranch } = this.state;\r\n    if (event.target.checked) {\r\n      const newSelecteds = allBranch.map((n) => n.id);\r\n\r\n      this.setState({\r\n        selected: newSelecteds,\r\n      });\r\n      return;\r\n    }\r\n    this.setState({ selected: [] });\r\n  };\r\n\r\n  handleClick = (event, name) => {\r\n    const { selected } = this.state;\r\n    console.log(selected);\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    this.setState({\r\n      selected: newSelected,\r\n    });\r\n  };\r\n\r\n  handleChangePage = (event, newPage) => {\r\n    this.setState({ page: newPage });\r\n  };\r\n\r\n  handleChangeRowsPerPage = (event) => {\r\n    this.setState({ rowsPerPage: parseInt(event.target.value, 10) });\r\n\r\n    this.setState({ page: 0 });\r\n  };\r\n\r\n  toggleDrawer = (anchor, open) => (event) => {\r\n    if (\r\n      event.type === \"keydown\" &&\r\n      (event.key === \"Tab\" || event.key === \"Shift\")\r\n    ) {\r\n      return;\r\n    }\r\n    this.setState({ [anchor]: open });\r\n  };\r\n\r\n  submitBranch = async () => {\r\n    const { name, emailAddress, mobileNumber, city, address, description } =\r\n      this.state;\r\n    this.setState({ isload: true });\r\n    try {\r\n      const response = await UserService.SaveBranch(\r\n        name,\r\n        emailAddress,\r\n        mobileNumber,\r\n        city,\r\n        address,\r\n        description\r\n      );\r\n\r\n      console.log(\"response of ssssss\", response);\r\n      this.setState({\r\n        isSnack: true,\r\n        Message: \"Successfully Submitted\",\r\n        name: \"\",\r\n        emailAddress: \"\",\r\n        mobileNumber: \"\",\r\n        city: \"\",\r\n        address: \"\",\r\n        description: \"\",\r\n        isload: false,\r\n      });\r\n\r\n      // const { data } = response;\r\n      // const { data: list, succeeded } = data;\r\n      // if (succeeded) {\r\n      //   if (list && list.length) {\r\n      //     this.setState({\r\n      //       allBranch: list,\r\n      //     });\r\n      //     rows = list;\r\n      //   }\r\n      // }\r\n    } catch (error) {\r\n      console.log(\"status error\", error);\r\n      this.setState({\r\n        errorSnack: true,\r\n        errorMessage: \"server error\",\r\n        isload: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleClose = (event, reason) => {\r\n    this.setState({\r\n      errorSnack: false,\r\n      isSnack: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    const {\r\n      rowsPerPage,\r\n      page,\r\n      selected,\r\n      orderBy,\r\n      order,\r\n      allBranch,\r\n      name,\r\n      emailAddress,\r\n      mobileNumber,\r\n      city,\r\n      address,\r\n      description,\r\n      errorSnack,\r\n      errorMessage,\r\n      isSnack,\r\n      Message,\r\n      isload,\r\n    } = this.state;\r\n    const rows = allBranch;\r\n    const emptyRows =\r\n      rowsPerPage -\r\n      Math.min(rowsPerPage, allBranch.length - page * rowsPerPage);\r\n\r\n    const isSelected = (id) => selected.indexOf(id) !== -1;\r\n\r\n    return (\r\n      <ThemeProvider theme={theme}>\r\n        <Box className=\"container\" p={2.5} bgcolor=\"primary.lightBgContainer\">\r\n          <Paper className=\"content lead-page\">\r\n            <Box className=\"page-heading\" mb={3}>\r\n              <Box color=\"text.secondary\" pt={3} pr={2.7} pb={1.8} pl={3}>\r\n                <Typography variant=\"h6\" gutterBottom color=\"inherit\">\r\n                  Daily Report\r\n                </Typography>\r\n              </Box>\r\n              <Divider />\r\n            </Box>\r\n\r\n            <div className=\"data-table\">\r\n              <div className={classes.root}>\r\n                <Paper className={classes.paper} elevation={0}>\r\n                  <TableContainer>\r\n                    <Table\r\n                      className={classes.table}\r\n                      aria-labelledby=\"tableTitle\"\r\n                      aria-label=\"enhanced table\"\r\n                    >\r\n                      <EnhancedTableHead\r\n                        classes={classes}\r\n                        numSelected={selected.length}\r\n                        order={order}\r\n                        orderBy={orderBy}\r\n                        onSelectAllClick={this.handleSelectAllClick}\r\n                        onRequestSort={this.handleRequestSort}\r\n                        rowCount={rows.length}\r\n                      />\r\n                      <TableBody>\r\n                        {stableSort(rows, getComparator(order, orderBy))\r\n                          .slice(\r\n                            page * rowsPerPage,\r\n                            page * rowsPerPage + rowsPerPage\r\n                          )\r\n                          .map((Lead, index) => {\r\n                            const isItemSelected = isSelected(Lead.id);\r\n                            const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                            return (\r\n                              <TableRow\r\n                                hover\r\n                                // onClick={(event) =>\r\n                                //   this.handleClick(event, Lead.id)\r\n                                // }\r\n                                //role=\"checkbox\"\r\n                                //aria-checked={isItemSelected}\r\n                                tabIndex={-1}\r\n                                key={index}\r\n                                selected={isItemSelected}\r\n                              >\r\n                                {/* <TableCell padding=\"checkbox\">\r\n                                  <Checkbox\r\n                                    checked={isItemSelected}\r\n                                    inputProps={{ \"aria-labelledby\": labelId }}\r\n                                  />\r\n                                </TableCell> */}\r\n                                <TableCell\r\n                                  component=\"th\"\r\n                                  id={labelId}\r\n                                  scope=\"row\"\r\n                                  padding=\"none\"\r\n                                >\r\n                                  {Lead.name}\r\n                                </TableCell>\r\n                                <TableCell align=\"left\">\r\n                                  {Lead.emailAddress}\r\n                                </TableCell>\r\n                                <TableCell align=\"left\">\r\n                                  {Lead.mobileNumber}\r\n                                </TableCell>\r\n                                <TableCell align=\"left\">{Lead.city}</TableCell>\r\n                                <TableCell align=\"left\">\r\n                                  {Lead.description}\r\n                                </TableCell>\r\n                              </TableRow>\r\n                            );\r\n                          })}\r\n                        {emptyRows > 0 && (\r\n                          <TableRow>\r\n                            <TableCell colSpan={6} />\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  <TablePagination\r\n                    rowsPerPageOptions={[10, 50, 100]}\r\n                    component=\"div\"\r\n                    count={allBranch.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onPageChange={this.handleChangePage}\r\n                    onRowsPerPageChange={this.handleChangeRowsPerPage}\r\n                  />\r\n                </Paper>\r\n              </div>\r\n            </div>\r\n          </Paper>\r\n        </Box>\r\n      </ThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(useStyles)(Reports);\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  console.log(\"getComparator\", order);\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  { id: \"name\", numeric: false, disablePadding: false, label: \" Name\" },\r\n  {\r\n    id: \"emailAddress\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Mobile Number\",\r\n  },\r\n  { id: \"mobileNumber\", numeric: false, disablePadding: false, label: \"city\" },\r\n  { id: \"city\", numeric: false, disablePadding: false, label: \"Email\" },\r\n  {\r\n    id: \"description\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Description\",\r\n  },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {/* <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ \"aria-label\": \"select all desserts\" }}\r\n          />\r\n        </TableCell> */}\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? \"right\" : \"left\"}\r\n            padding={headCell.disablePadding ? \"none\" : \"normal\"}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === \"light\"\r\n      ? {\r\n          color: theme.palette.primary.light,\r\n          // backgroundColor: lighten(theme.palette.primary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.primary.light,\r\n          // backgroundColor: theme.palette.primary.dark,\r\n        },\r\n  title: {\r\n    flex: \"1 1 100%\",\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected } = props;\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}\r\n    >\r\n      {numSelected > 0 ? (\r\n        <Typography\r\n          className={classes.title}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\"\r\n        >\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          className={classes.title}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\"\r\n        ></Typography>\r\n      )}\r\n\r\n      {numSelected > 0 ? (\r\n        <Tooltip title=\"Delete\">\r\n          <IconButton aria-label=\"delete\">\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ) : (\r\n        <Tooltip title=\"Filter list\">\r\n          <IconButton aria-label=\"filter list\">\r\n            {/* <FilterListIcon /> */}\r\n          </IconButton>\r\n        </Tooltip>\r\n      )}\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/store/reducers/user.js",[],[],"/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/pages/AddUser/index.js",["475","476","477","478","479","480"],[],"\r\nimport React from \"react\";\r\nimport {\r\n  Paper, Box, Typography,FormControl,InputLabel ,OutlinedInput,InputAdornment,Select,MenuItem,Snackbar,CircularProgress\r\n} from \"@material-ui/core\";\r\n\r\n\r\n\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\nimport { theme } from '../../theme/light';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {Table, Grid, TextField} from '@material-ui/core';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport UserService from \"../../services/user.service\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\n\r\n\r\nconst useStyles = theme=> ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n});\r\nlet rows= [];\r\n\r\nclass AddUser extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      order:\"asc\",\r\n      orderBy:\"calories\",\r\n      selected:[],\r\n      page:0,\r\n      rowsPerPage:5,\r\n      top: false,\r\n      left: false,\r\n      bottom: false,\r\n      right: false,\r\n      allBranch:[],\r\n      AllUsers:[],\r\n      BranchId:\"None\",\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      userName: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      confirmPassword: \"\",\r\n      roles: \"\",\r\n      showPassword:false, \r\n      showconfirmPassword:false,\r\n      errorSnack: \"\",\r\n      errorMessage: \"\",\r\n      isSnack: false,\r\n      Message: \"\",\r\n      isload: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getAlllead();\r\n    this.getAllUsers();\r\n  }\r\n\r\n   handleRequestSort = (event, property) => {\r\n    const {\r\n      orderBy,order\r\n    } = this.state;\r\n    const isAsc = orderBy === property && order === 'asc'; \r\n    this.setState({\r\n      order:isAsc ? 'desc' : 'asc'\r\n    });\r\n    this.setState({\r\n      orderBy:property\r\n    });\r\n  };\r\n\r\n  getAlllead = async () => {\r\n    try {\r\n      const response = await UserService.GetAllBranch();\r\n      console.log(\"response of ssssss\", response);\r\n\r\n      const { data } = response;\r\n      const { data: list, succeeded } = data;\r\n      if (succeeded) {\r\n        if (list && list.length) {\r\n          this.setState({\r\n            allBranch: list,\r\n          });\r\n        \r\n        }\r\n  \r\n      }\r\n    } catch (error) {\r\n      console.log(\"status error\", error);\r\n    }\r\n  };\r\n\r\n  getAllUsers =  async () => {\r\n    try {\r\n      const response = await UserService.GetAllUser();\r\n      console.log(\"response of ssssss\", response);\r\n\r\n      const { data } = response;\r\n      const { data: list, succeeded } = data;\r\n      if (succeeded) {\r\n        if (list && list.length) {\r\n          this.setState({\r\n            AllUsers: list,\r\n          });\r\n          rows=list;\r\n        }\r\n  \r\n      }\r\n    } catch (error) {\r\n      console.log(\"status error\", error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n   handleSelectAllClick = (event) => {\r\n     const {AllUsers}= this.state;\r\n    if (event.target.checked) {\r\n      const newSelecteds = AllUsers.map((n) => n.id);\r\n\r\n\r\n      this.setState({\r\n        selected:newSelecteds\r\n      });\r\n      return;\r\n    }\r\n    this.setState({ selected: []});\r\n  };\r\n\r\n\r\n   handleClick = (event, name) => {\r\n  \r\n    const {\r\n      selected\r\n    } = this.state;\r\n    console.log(selected)\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n\r\n    this.setState({\r\n      selected:newSelected\r\n    });  \r\n  };\r\n\r\n\r\n   handleChangePage = (event, newPage) => {\r\n    this.setState({ page: newPage});\r\n  };\r\n\r\n\r\n\r\n   handleChangeRowsPerPage = (event) => {\r\n    this.setState({ rowsPerPage: parseInt(event.target.value, 10)});\r\n   \r\n    this.setState({ page: 0});\r\n  };\r\n\r\n  \r\n\r\n    toggleDrawer = (anchor, open) => (event) => {\r\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n      return;\r\n    }\r\n    this.setState({ [anchor]: open });\r\n  \r\n  };\r\n\r\n\r\n  submitBranch = async () => {\r\n    const { BranchId  , firstName,lastName, email, password, confirmPassword,roles} = this.state;\r\n      this.setState({isload: true});\r\n    try {\r\n       let rolesuser= [roles];\r\n      let  branch_id=BranchId==\"None\"? 0 : BranchId;\r\n      let userName=email;\r\n      const response = await UserService.SaveUser( firstName,lastName, userName, email, password, confirmPassword,rolesuser,branch_id);\r\n\r\n      console.log(\"response of ssssss\", response);\r\n\r\n\r\n      const {status } = response;\r\n\r\n      if(status==400){\r\n       const {data}=response;\r\n       const {FirstName,ConfirmPassword,Email,LastName,Password,UserName}=data.errors\r\n       let errorMessage=FirstName?FirstName:(LastName?LastName:(Email?Email:(Password?Password:(ConfirmPassword?ConfirmPassword:\"\"))))\r\n        \r\n        this.setState({\r\n          errorSnack: true,\r\n          errorMessage: errorMessage,\r\n          isload: false\r\n         \r\n        });\r\n      }else{\r\n        this.setState({\r\n          isSnack: true,\r\n          Message: \"Successfully Submitted\",\r\n          BranchId:\"None\",\r\n          firstName: \"\",\r\n          lastName: \"\",\r\n          userName: \"\",\r\n          email: \"\",\r\n          password: \"\",\r\n          confirmPassword: \"\",\r\n          roles: \"\",\r\n          isload: false\r\n        });\r\n        \r\n      }\r\n   \r\n      // const { data } = response;\r\n      // const { data: list, succeeded } = data;\r\n      // if (succeeded) {\r\n      //   if (list && list.length) {\r\n      //     this.setState({\r\n      //       allBranch: list,\r\n      //     });\r\n      //     rows = list;\r\n      //   }\r\n      // }\r\n    } catch (error) {\r\n      console.log(\"status error\", error);\r\n      this.setState({\r\n        errorSnack: true,\r\n        errorMessage: error,\r\n        isload: false\r\n       \r\n      });\r\n    }\r\n  };\r\n\r\n  handleClose = (event, reason) => {\r\n    this.setState({\r\n      errorSnack: false,\r\n      isSnack: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    const { rowsPerPage,page,selected,orderBy,order,allBranch ,BranchId,AllUsers,  errorSnack,\r\n      errorMessage,\r\n      isSnack,\r\n      Message,\r\n      isload} = this.state;\r\n     const rows= AllUsers;\r\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, AllUsers.length - page * rowsPerPage);\r\n\r\n   const isSelected = (id) => selected.indexOf(id) !== -1;\r\n    const list = (anchor) => (\r\n      <Box className=\"share-steps\" height=\"100%\">\r\n      <Box   display=\"flex\"\r\n          width=\"100%\"\r\n          height=\"100%\"\r\n          flexDirection=\"column\"\r\n          bgcolor=\"primary.drawerBg\"\r\n        className={clsx(classes.list, {\r\n          [classes.fullList]: anchor === 'top' || anchor === 'bottom',\r\n        })}\r\n        role=\"presentation\"\r\n      \r\n      >\r\n        <Box className=\"common-content\" position=\"relative\" height=\"100%\">\r\n            <Box className=\"sidebar-header\" display=\"flex\" alignItems=\"center\" px={3} py={2.4}>\r\n              <Box color=\"text.textBlue\">\r\n                <Typography variant=\"h6\" gutterBottom color=\"inherit\">\r\n                  Add and Update\r\n                </Typography>\r\n              </Box>\r\n              <Box\r\n                className=\"close-drawer cursor-pointer\"\r\n                display=\"flex\"\r\n                alignItems=\"center\"\r\n                color=\"grey.500\"\r\n                onClick={this.toggleDrawer(anchor, false)}>\r\n                <CloseIcon color=\"inherit\" />\r\n              </Box>\r\n            </Box>\r\n            <Divider />\r\n  \r\n            <Box className=\"share-sidebar-content share-mamber-content register-container\" p={3}>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12}>\r\n                <TextField label=\"First Name\" \r\n                   onChange={(event) => {\r\n                    this.setState({\r\n                      firstName: event.target.value,\r\n                    });\r\n                  }}\r\n                variant=\"outlined\" className=\"custom-textfield\" />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField label=\"Last Name\" variant=\"outlined\"\r\n                   onChange={(event) => {\r\n                    this.setState({\r\n                      lastName: event.target.value,\r\n                    });\r\n                  }}\r\n                className=\"custom-textfield\" />\r\n              </Grid>\r\n\r\n             \r\n\r\n              <Grid item xs={12}>\r\n                <TextField type=\"email\" label=\"Email Address\" variant=\"outlined\" \r\n                   onChange={(event) => {\r\n                    this.setState({\r\n                      email: event.target.value,\r\n                    });\r\n                  }}\r\n                className=\"custom-textfield\" />\r\n              </Grid>\r\n\r\n              <Grid item xs={12}>\r\n                  <FormControl variant=\"outlined\" className=\"custom-textfield\">\r\n                    <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                    Branch\r\n                    </InputLabel>\r\n                    <Select\r\n                      labelId=\"demo-simple-select-outlined-label\"\r\n                      id=\"demo-simple-select-outlined\"\r\n                      \r\n                      onChange={(event) => {\r\n                        if (event.target.value) {\r\n                          this.setState({\r\n                            BranchId: event.target.value,\r\n                          });\r\n                        }\r\n                      }}\r\n                      label=\"Branch\"\r\n                    >\r\n                      <MenuItem value=\"None\">\r\n                        <em>None</em>\r\n                      </MenuItem>\r\n                      {this.state.allBranch.map((data, index) => {\r\n                        return (\r\n                          <MenuItem key={index.toString()} value={data.id}>\r\n                            {data.name}\r\n                          </MenuItem>\r\n                        );\r\n                      })}\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n\r\n                \r\n              <Grid item xs={12}>\r\n                  <FormControl variant=\"outlined\" className=\"custom-textfield\">\r\n                    <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                      Role\r\n                    </InputLabel>\r\n                    <Select\r\n                      labelId=\"demo-simple-select-outlined-label\"\r\n                      id=\"demo-simple-select-outlined\"\r\n                      onChange={(event) => {\r\n                        if (event.target.value) {\r\n                          this.setState({\r\n                            roles: event.target.value,\r\n                          });\r\n                        } else {\r\n                          this.setState({\r\n                            roles: \"\",\r\n                          });\r\n                        }\r\n                      }}\r\n                    \r\n                      label=\"Role\"\r\n                    >\r\n                      <MenuItem value=\"None\">\r\n                        <em>None</em>\r\n                      </MenuItem>\r\n                      <MenuItem value=\"SuperAdmin\">\r\n                        <em>SuperAdmin</em>\r\n                      </MenuItem>\r\n                      <MenuItem value=\"Admin\">\r\n                        <em>Admin</em>\r\n                      </MenuItem>\r\n                      <MenuItem value=\"Basic\">\r\n                        <em>Basic</em>\r\n                      </MenuItem>\r\n                     \r\n                     \r\n                      \r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n\r\n              <Grid item xs={12}>\r\n                <FormControl variant=\"outlined\">\r\n                  <InputLabel htmlFor=\"outlined-adornment-password\">Password</InputLabel>\r\n                  <OutlinedInput\r\n                    id=\"outlined-adornment-password\"\r\n                    type={this.state.showPassword ? 'text' : 'password'}\r\n                    value={this.state.password}\r\n                    onChange={(event) => {\r\n                      if (event.target.value) {\r\n                        this.setState({\r\n                          password: event.target.value,\r\n                        });\r\n                      } else {\r\n                        this.setState({\r\n                          password: \"\",\r\n                        });\r\n                      }\r\n                    }}\r\n                    className=\"custom-textfield\"\r\n                    autoComplete=\"off\"\r\n                    endAdornment={\r\n                      <InputAdornment position=\"end\">\r\n                        <IconButton\r\n                          aria-label=\"toggle password visibility\"\r\n                          onClick={() => {\r\n                            this.setState({\r\n                              showPassword: !this.state.showPassword\r\n                            });\r\n                          }}\r\n                          edge=\"end\">\r\n                        {this.state.showPassword ? <Visibility fontSize=\"small\" /> : <VisibilityOff fontSize=\"small\" />}\r\n                        </IconButton>\r\n                      </InputAdornment>\r\n                    }\r\n                    labelWidth={70}\r\n                  />\r\n                </FormControl>\r\n              </Grid>\r\n              \r\n              <Grid item xs={12}>\r\n                <FormControl variant=\"outlined\">\r\n                  <InputLabel htmlFor=\"outlined-adornment-password\">Confirm Password</InputLabel>\r\n                  <OutlinedInput\r\n                    id=\"outlined-adornment-password\"\r\n                    type={this.state.showconfirmPassword ? 'text' : 'password'}\r\n                    value={this.state.confirmPassword}\r\n                    onChange={(event) => {\r\n                      if (event.target.value) {\r\n                        this.setState({\r\n                          confirmPassword: event.target.value,\r\n                        });\r\n                      } \r\n                    }}\r\n                    className=\"custom-textfield\"\r\n                    autoComplete=\"off\"\r\n                    endAdornment={\r\n                      <InputAdornment position=\"end\">\r\n                        <IconButton\r\n                          aria-label=\"toggle password visibility\"\r\n                          onClick={() => {\r\n                            this.setState({\r\n                              showconfirmPassword: !this.state.showconfirmPassword\r\n                            });\r\n                          }}\r\n                          edge=\"end\">\r\n                        {this.state.showconfirmPassword ? <Visibility fontSize=\"small\" /> : <VisibilityOff fontSize=\"small\" />}\r\n                        </IconButton>\r\n                      </InputAdornment>\r\n                    }\r\n                    labelWidth={70}\r\n                  />\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n  \r\n              <Box>\r\n              \r\n              </Box>\r\n            </Box>\r\n  \r\n            <Box\r\n            className=\"sidebar-footer\"\r\n            position=\"absolute\"\r\n            bottom=\"0\"\r\n            left=\"0\"\r\n            width=\"100%\"\r\n            minHeight=\"82px\"\r\n            px={3}\r\n            py={1.5}\r\n            display=\"flex\"\r\n            alignItems=\"center\"\r\n            boxSizing=\"border-box\"\r\n            bgcolor=\"primary.drawerBg\">\r\n            <Box  pr={1} width=\"150px\" boxSizing=\"border-box\">\r\n              <Button variant=\"outlined\" className=\"cancel-button\" disableElevation size=\"large\" onClick={this.toggleDrawer(anchor, false)}>\r\n                Cancel\r\n              </Button>\r\n            </Box>\r\n            <Box width=\"150px\" boxSizing=\"border-box\">\r\n              <Button variant=\"contained\" color=\"primary\"\r\n                onClick={() =>  this.submitBranch()}\r\n              disabled={isload}\r\n              className=\"next-button\" disableElevation size=\"large\">\r\n              {isload && <CircularProgress size={16} />}\r\n                Save\r\n              </Button>\r\n            </Box>\r\n          </Box>\r\n          </Box>\r\n      </Box>\r\n      <Snackbar\r\n          autoHideDuration={3000}\r\n          anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n          open={errorSnack}\r\n          onClose={this.handleClose}\r\n        >\r\n          {errorMessage ? (\r\n            <Alert onClose={this.handleClose} severity=\"error\">\r\n              {errorMessage}\r\n            </Alert>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </Snackbar>\r\n        <Snackbar\r\n          autoHideDuration={3000}\r\n          anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n          open={isSnack}\r\n          onClose={this.handleClose}\r\n        >\r\n          {Message ? (\r\n            <Alert onClose={this.handleClose} severity=\"success\">\r\n              {Message}\r\n            </Alert>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </Snackbar>\r\n      </Box>\r\n  \r\n      // Drawer End here\r\n      )\r\n    return (\r\n      <ThemeProvider theme={theme}>\r\n      <Box className=\"container\" p={2.5}  bgcolor=\"primary.lightBgContainer\">\r\n        <Paper className=\"content lead-page\" >\r\n          <Box className=\"page-heading\" mb={3}>\r\n            <Box color=\"text.secondary\" pt={3} pr={2.7} pb={1.8} pl={3}>\r\n              \r\n              <Typography variant=\"h6\" gutterBottom color=\"inherit\">\r\n              Users\r\n              </Typography>\r\n              {['right'].map((anchor) => (\r\n          <React.Fragment key={anchor}>\r\n            <Button onClick={this.toggleDrawer(anchor, true)}>Add New User</Button>\r\n            <Drawer className=\"common-sidebar \" anchor={anchor} open={this.state[anchor]} onClose={this.toggleDrawer(anchor, false)}>\r\n              {list(anchor)}\r\n            </Drawer>\r\n          </React.Fragment>\r\n        ))}\r\n            </Box>\r\n            <Divider />\r\n          </Box>\r\n  \r\n  \r\n  <div className=\"data-table\">\r\n\r\n  \r\n  <div className={classes.root}>\r\n        <Paper className={classes.paper} elevation={0}>\r\n          <EnhancedTableToolbar numSelected={selected.length} />\r\n          <TableContainer>\r\n            <Table\r\n              className={classes.table}\r\n              aria-labelledby=\"tableTitle\"\r\n              aria-label=\"enhanced table\"\r\n            >\r\n              <EnhancedTableHead\r\n                classes={classes}\r\n                numSelected={selected.length}\r\n                order={order}\r\n                orderBy={orderBy}\r\n                onSelectAllClick={this.handleSelectAllClick}\r\n                onRequestSort={this.handleRequestSort}\r\n                rowCount={rows.length}\r\n              />\r\n              <TableBody>\r\n                {stableSort(rows, getComparator(order, orderBy))\r\n                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                  .map((Lead, index) => {\r\n                    const isItemSelected = isSelected(Lead.id);\r\n                    const labelId = `enhanced-table-checkbox-${index}`;\r\n  \r\n                    return (\r\n                      <TableRow\r\n                        hover\r\n                        onClick={(event) => this.handleClick(event, Lead.id)}\r\n                        role=\"checkbox\"\r\n                        aria-checked={isItemSelected}\r\n                        tabIndex={-1}\r\n                        key={index}\r\n                        selected={isItemSelected}\r\n                      >\r\n                        <TableCell padding=\"checkbox\">\r\n                          <Checkbox\r\n                            checked={isItemSelected}\r\n                            inputProps={{ 'aria-labelledby': labelId }}\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                          {Lead.firstName}\r\n                        </TableCell>\r\n                        <TableCell align=\"left\">{Lead.lastName}</TableCell>\r\n                        <TableCell align=\"left\">{Lead.email}</TableCell>\r\n                     \r\n                        \r\n                        <TableCell align=\"left\">\r\n  <Box display=\"inline-flex\" alignItems=\"center\" ml=\"auto\">\r\n    <Box className=\"edit-icon cursor-pointer\" mr={1} bgcolor=\"primary.primaryIconBg\" color=\"text.textSecondary\"  width=\"27px\" height=\"27px\" borderRadius=\"5px\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n      <EditIcon style={{ fontSize: 18 }} color=\"inherit\" />\r\n      </Box>\r\n      <Box className=\"edit-icon cursor-pointer\" bgcolor=\"error.lightIcon\" color=\"error.dark\"  width=\"27px\" height=\"27px\" borderRadius=\"5px\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n      <DeleteIcon style={{ fontSize: 18 }} color=\"inherit\" />\r\n      </Box>\r\n  </Box>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                {emptyRows > 0 && (\r\n                  <TableRow >\r\n                    <TableCell colSpan={6} />\r\n                  </TableRow>\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <TablePagination\r\n            rowsPerPageOptions={[5, 10, 25]}\r\n            component=\"div\"\r\n            count={AllUsers.length}\r\n            rowsPerPage={rowsPerPage}\r\n            page={page}\r\n            onPageChange={this.handleChangePage}\r\n            onRowsPerPageChange={this.handleChangeRowsPerPage}\r\n          />\r\n        </Paper>\r\n       \r\n      </div>\r\n  </div>\r\n  \r\n  {/* Drawer Map here */}\r\n  {/* <div>\r\n        {['right'].map((anchor) => (\r\n          <React.Fragment key={anchor}>\r\n            <Button onClick={this.toggleDrawer(anchor, true)}>{anchor}</Button>\r\n            <Drawer className=\"common-sidebar \" anchor={anchor} open={this.state[anchor]} onClose={this.toggleDrawer(anchor, false)}>\r\n              {list(anchor)}\r\n            </Drawer>\r\n          </React.Fragment>\r\n        ))}\r\n      </div> */}\r\n  \r\n      {/* Drawer Map here */}\r\n        </Paper>\r\n      </Box>\r\n    </ThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(useStyles)(AddUser)\r\n\r\n\r\n// export default Leads;\r\n\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  console.log(\"getComparator\",order)\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  { id: 'firstName', numeric: false, disablePadding: false, label: 'firstName' },\r\n  { id: 'lastName', numeric: false, disablePadding: false, label: 'lastName' },\r\n  { id: 'email', numeric: false, disablePadding: false, label: 'email' }\r\n];\r\n\r\n\r\n\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'left'}\r\n            padding={headCell.disablePadding ? 'none' : 'normal'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.primary.light,\r\n          // backgroundColor: lighten(theme.palette.primary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.primary.light,\r\n          // backgroundColor: theme.palette.primary.dark,\r\n        },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected } = props;\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}\r\n    >\r\n      {numSelected > 0 ? (\r\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n          \r\n        </Typography>\r\n      )}\r\n\r\n      {numSelected > 0 ? (\r\n        <Tooltip title=\"Delete\">\r\n          <IconButton aria-label=\"delete\">\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ) : (\r\n        <Tooltip title=\"Filter list\">\r\n          <IconButton aria-label=\"filter list\">\r\n            {/* <FilterListIcon /> */}\r\n          </IconButton>\r\n        </Tooltip>\r\n      )}\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\n","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/pages/Leads/index.js",["481","482","483"],[],"\r\nimport React from \"react\";\r\nimport {\r\n  Paper, Box, Typography\r\n} from \"@material-ui/core\";\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\nimport { theme } from '../../theme/light';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {Table, Grid, TextField} from '@material-ui/core';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport UserService from \"../../services/user.service\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\n\r\n\r\n\r\nconst useStyles = theme=> ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n});\r\nlet rows= [];\r\n\r\nclass Leadss extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      order:\"asc\",\r\n      orderBy:\"calories\",\r\n      selected:[],\r\n      page:0,\r\n      rowsPerPage:5,\r\n      top: false,\r\n      left: false,\r\n      bottom: false,\r\n      right: false,\r\n      allLead:[]\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getAlllead();\r\n  }\r\n\r\n   handleRequestSort = (event, property) => {\r\n    const {\r\n      orderBy,order\r\n    } = this.state;\r\n    const isAsc = orderBy === property && order === 'asc'; \r\n    this.setState({\r\n      order:isAsc ? 'desc' : 'asc'\r\n    });\r\n    this.setState({\r\n      orderBy:property\r\n    });\r\n  };\r\n\r\n  getAlllead = async () => {\r\n    try {\r\n      const response = await UserService.GetAllLead();\r\n      console.log(\"response of ssssss\", response);\r\n\r\n      const { data } = response;\r\n      const { data: list, succeeded } = data;\r\n      if (succeeded) {\r\n        if (list && list.length) {\r\n          this.setState({\r\n            allLead: list,\r\n          });\r\n          rows=list;\r\n        }\r\n  \r\n      }\r\n    } catch (error) {\r\n      console.log(\"status error\", error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n   handleSelectAllClick = (event) => {\r\n     const {allLead}= this.state;\r\n    if (event.target.checked) {\r\n      const newSelecteds = allLead.map((n) => n.id);\r\n\r\n\r\n      this.setState({\r\n        selected:newSelecteds\r\n      });\r\n      return;\r\n    }\r\n    this.setState({ selected: []});\r\n  };\r\n\r\n\r\n   handleClick = (event, name) => {\r\n  \r\n    const {\r\n      selected\r\n    } = this.state;\r\n    console.log(selected)\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n\r\n    this.setState({\r\n      selected:newSelected\r\n    });  \r\n  };\r\n\r\n\r\n   handleChangePage = (event, newPage) => {\r\n    this.setState({ page: newPage});\r\n  };\r\n\r\n\r\n\r\n   handleChangeRowsPerPage = (event) => {\r\n    this.setState({ rowsPerPage: parseInt(event.target.value, 10)});\r\n   \r\n    this.setState({ page: 0});\r\n  };\r\n\r\n  \r\n\r\n    toggleDrawer = (anchor, open) => (event) => {\r\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n      return;\r\n    }\r\n    this.setState({ [anchor]: open });\r\n  \r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    const { rowsPerPage,page,selected,orderBy,order,allLead } = this.state;\r\n     const rows= allLead;\r\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, allLead.length - page * rowsPerPage);\r\n\r\n   const isSelected = (id) => selected.indexOf(id) !== -1;\r\n    const list = (anchor) => (\r\n      <Box className=\"share-steps\" height=\"100%\">\r\n      <Box   display=\"flex\"\r\n          width=\"100%\"\r\n          height=\"100%\"\r\n          flexDirection=\"column\"\r\n          bgcolor=\"primary.drawerBg\"\r\n        className={clsx(classes.list, {\r\n          [classes.fullList]: anchor === 'top' || anchor === 'bottom',\r\n        })}\r\n        role=\"presentation\"\r\n      \r\n      >\r\n        <Box className=\"common-content\" position=\"relative\" height=\"100%\">\r\n            <Box className=\"sidebar-header\" display=\"flex\" alignItems=\"center\" px={3} py={2.4}>\r\n              <Box color=\"text.textBlue\">\r\n                <Typography variant=\"h6\" gutterBottom color=\"inherit\">\r\n                  Edit\r\n                </Typography>\r\n              </Box>\r\n              <Box\r\n                className=\"close-drawer cursor-pointer\"\r\n                display=\"flex\"\r\n                alignItems=\"center\"\r\n                color=\"grey.500\"\r\n                onClick={this.toggleDrawer(anchor, false)}>\r\n                <CloseIcon color=\"inherit\" />\r\n              </Box>\r\n            </Box>\r\n            <Divider />\r\n  \r\n            <Box className=\"share-sidebar-content share-mamber-content\" p={3}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={4}>\r\n                <TextField type=\"text\" label=\"First Name\" variant=\"outlined\" className=\"custom-textfield\" />\r\n              </Grid>\r\n              <Grid item xs={4}>\r\n                <TextField type=\"text\" label=\"Last Name\" variant=\"outlined\" className=\"custom-textfield\" />\r\n              </Grid>\r\n              <Grid item xs={4}>\r\n                <TextField type=\"text\" label=\"Email Address\" variant=\"outlined\" className=\"custom-textfield\" />\r\n              </Grid>\r\n            </Grid>\r\n  \r\n              <Box>\r\n              \r\n              </Box>\r\n            </Box>\r\n  \r\n            <Box\r\n            className=\"sidebar-footer\"\r\n            position=\"absolute\"\r\n            bottom=\"0\"\r\n            left=\"0\"\r\n            width=\"100%\"\r\n            minHeight=\"82px\"\r\n            px={3}\r\n            py={1.5}\r\n            display=\"flex\"\r\n            alignItems=\"center\"\r\n            boxSizing=\"border-box\"\r\n            bgcolor=\"primary.drawerBg\">\r\n            <Box  pr={1} width=\"150px\" boxSizing=\"border-box\">\r\n              <Button variant=\"outlined\" className=\"cancel-button\" disableElevation size=\"large\" onClick={this.toggleDrawer(anchor, false)}>\r\n                Cancel\r\n              </Button>\r\n            </Box>\r\n            <Box width=\"150px\" boxSizing=\"border-box\">\r\n              <Button variant=\"contained\" color=\"primary\" className=\"next-button\" disableElevation size=\"large\">\r\n                Update\r\n              </Button>\r\n            </Box>\r\n          </Box>\r\n          </Box>\r\n      </Box>\r\n      </Box>\r\n  \r\n      // Drawer End here\r\n      )\r\n    return (\r\n      <ThemeProvider theme={theme}>\r\n      <Box className=\"container\" p={2.5}  bgcolor=\"primary.lightBgContainer\">\r\n        <Paper className=\"content lead-page\" >\r\n          <Box className=\"page-heading\" mb={3}>\r\n            <Box color=\"text.secondary\" pt={3} pr={2.7} pb={1.8} pl={3}>\r\n              <Typography variant=\"h6\" gutterBottom color=\"inherit\">\r\n                Leads\r\n              </Typography>\r\n            </Box>\r\n            <Divider />\r\n          </Box>\r\n  \r\n  \r\n  <div className=\"data-table\">\r\n  <div className={classes.root}>\r\n        <Paper className={classes.paper} elevation={0}>\r\n          \r\n          <TableContainer>\r\n            <Table\r\n              className={classes.table}\r\n              aria-labelledby=\"tableTitle\"\r\n              aria-label=\"enhanced table\"\r\n            >\r\n              <EnhancedTableHead\r\n                classes={classes}\r\n                numSelected={selected.length}\r\n                order={order}\r\n                orderBy={orderBy}\r\n                onSelectAllClick={this.handleSelectAllClick}\r\n                onRequestSort={this.handleRequestSort}\r\n                rowCount={rows.length}\r\n              />\r\n              <TableBody>\r\n                {stableSort(rows, getComparator(order, orderBy))\r\n                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                  .map((Lead, index) => {\r\n                    const isItemSelected = isSelected(Lead.id);\r\n                    const labelId = `enhanced-table-checkbox-${index}`;\r\n  \r\n                    return (\r\n                      <TableRow\r\n                        hover\r\n                        onClick={(event) => this.handleClick(event, Lead.id)}\r\n                        role=\"checkbox\"\r\n                        aria-checked={isItemSelected}\r\n                        tabIndex={-1}\r\n                        key={index}\r\n                        selected={isItemSelected}\r\n                      >\r\n                        <TableCell padding=\"checkbox\">\r\n                          <Checkbox\r\n                            checked={isItemSelected}\r\n                            inputProps={{ 'aria-labelledby': labelId }}\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                          {Lead.firstName}\r\n                        </TableCell>\r\n                        <TableCell align=\"center\">{Lead.lastName}</TableCell>\r\n                        <TableCell align=\"center\">{Lead.dob}</TableCell>\r\n                        <TableCell align=\"center\">{Lead.emailAddress}</TableCell>\r\n                        <TableCell align=\"center\">{Lead.mobileNumber}</TableCell>\r\n                        <TableCell align=\"center\">{Lead.leadSource.name}</TableCell>\r\n                        <TableCell align=\"center\">{Lead.branch.name}</TableCell>\r\n                        \r\n                        <TableCell align=\"center\">{Lead.listeningScore}</TableCell>\r\n                        <TableCell align=\"center\">{Lead.readingScore}</TableCell>\r\n\r\n                        <TableCell align=\"center\">{Lead.writingScore}</TableCell>\r\n                        <TableCell align=\"center\">{Lead.speakingScore}</TableCell>\r\n                        {/* <TableCell align=\"right\">{row.fat}</TableCell>\r\n                        <TableCell align=\"right\">{row.carbs}</TableCell> */}\r\n                        <TableCell align=\"center\">{Lead.leadsStatus.name}</TableCell>\r\n                        <TableCell align=\"right\">\r\n  <Box display=\"inline-flex\" alignItems=\"center\" ml=\"auto\">\r\n    <Box className=\"edit-icon cursor-pointer\" mr={1} bgcolor=\"primary.primaryIconBg\" color=\"text.textSecondary\"  width=\"27px\" height=\"27px\" borderRadius=\"5px\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n      <EditIcon style={{ fontSize: 18 }} color=\"inherit\" />\r\n      </Box>\r\n      <Box className=\"edit-icon cursor-pointer\" bgcolor=\"error.lightIcon\" color=\"error.dark\"  width=\"27px\" height=\"27px\" borderRadius=\"5px\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n      <DeleteIcon style={{ fontSize: 18 }} color=\"inherit\" />\r\n      </Box>\r\n  </Box>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                {emptyRows > 0 && (\r\n                  <TableRow >\r\n                    <TableCell colSpan={6} />\r\n                  </TableRow>\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <TablePagination\r\n            rowsPerPageOptions={[5, 10, 25]}\r\n            component=\"div\"\r\n            count={allLead.length}\r\n            rowsPerPage={rowsPerPage}\r\n            page={page}\r\n            onPageChange={this.handleChangePage}\r\n            onRowsPerPageChange={this.handleChangeRowsPerPage}\r\n          />\r\n        </Paper>\r\n       \r\n      </div>\r\n  </div>\r\n  \r\n  {/* Drawer Map here */}\r\n  {/* <div>\r\n        {['right'].map((anchor) => (\r\n          <React.Fragment key={anchor}>\r\n            <Button onClick={this.toggleDrawer(anchor, true)}>{anchor}</Button>\r\n            <Drawer className=\"common-sidebar \" anchor={anchor} open={this.state[anchor]} onClose={this.toggleDrawer(anchor, false)}>\r\n              {list(anchor)}\r\n            </Drawer>\r\n          </React.Fragment>\r\n        ))}\r\n      </div> */}\r\n  \r\n      {/* Drawer Map here */}\r\n        </Paper>\r\n      </Box>\r\n    </ThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(useStyles)(Leadss)\r\n\r\n\r\n// export default Leads;\r\n\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  console.log(\"getComparator\",order)\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  { id: 'firstName', numeric: false, disablePadding: false, label: 'First Name' },\r\n  { id: 'lastName', numeric: false, disablePadding: false, label: 'Last Name' },\r\n  { id: 'dob', numeric: false, disablePadding: false, label: 'Date Of Birth' },\r\n  { id: 'emailAddress', numeric: false, disablePadding: false, label: 'Email' },\r\n  { id: 'mobileNumber', numeric: false, disablePadding: false, label: 'Mobile Number' },\r\n  { id: 'leadSource', numeric: false, disablePadding: false, label: 'Source' },\r\n  { id: 'branch', numeric: false, disablePadding: false, label: 'Branch' },\r\n \r\n  { id: 'listeningScore', numeric: false, disablePadding: false, label: 'Listening Score' },\r\n  { id: 'readingScore', numeric: false, disablePadding: false, label: 'ReadingScore' },\r\n  { id: 'writingScore', numeric: false, disablePadding: false, label: 'Writing Score' },\r\n  { id: 'speakingScore', numeric: false, disablePadding: false, label: 'Speaking Score' },\r\n  { id: 'leadsStatus', numeric: false, disablePadding: false, label: 'Status' },\r\n  { id: 'Action', numeric: false, disablePadding: false, label: 'Action' }\r\n];\r\n\r\n\r\n\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'left'}\r\n            padding={headCell.disablePadding ? 'none' : 'normal'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.primary.light,\r\n          // backgroundColor: lighten(theme.palette.primary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.primary.light,\r\n          // backgroundColor: theme.palette.primary.dark,\r\n        },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected } = props;\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}\r\n    >\r\n      {numSelected > 0 ? (\r\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n          \r\n        </Typography>\r\n      )}\r\n\r\n      {numSelected > 0 ? (\r\n        <Tooltip title=\"Delete\">\r\n          <IconButton aria-label=\"delete\">\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ) : (\r\n        <Tooltip title=\"Filter list\">\r\n          <IconButton aria-label=\"filter list\">\r\n            {/* <FilterListIcon /> */}\r\n          </IconButton>\r\n        </Tooltip>\r\n      )}\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/layout/publicLayout/index.js",[],[],"/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/layout/privateLayout/index.js",[],[],"/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/theme/light.js",[],[],"/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/services/user.service.js",["484"],[],"import Api from \"../utils/APICaller\";\r\nimport { endPoints, appConfig } from \"../config\";\r\nconst singin = async (userid, password) => {\r\n  try {\r\n    const { LogInWeb } = endPoints;\r\n    const method = \"POST\";\r\n    let body = {\r\n      userid,\r\n      password,\r\n    };\r\n    const res = await Api(LogInWeb, false, method, body);\r\n    return res;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nconst mapping = async (deviceuniqueid, token) => {\r\n  try {\r\n    const { RefreshMappingWeb } = endPoints;\r\n    const method = \"POST\";\r\n    let body = {\r\n      deviceuniqueid,\r\n      token,\r\n    };\r\n    const res = await Api(RefreshMappingWeb, false, method, body);\r\n    return res;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nconst AdminParkingStatusReport = async (facilityid, token, inputdatetime) => {\r\n  try {\r\n    const { GetAdminParkingStatusReportWeb } = endPoints;\r\n    const method = \"POST\";\r\n    let body = {\r\n      facilityid,\r\n      token,\r\n      inputdatetime,\r\n    };\r\n    const res = await Api(GetAdminParkingStatusReportWeb, false, method, body);\r\n    return res;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nconst AdminMonthlyParkingStatusReport = async (\r\n  facilityid,\r\n  token,\r\n  inputdatetime\r\n) => {\r\n  try {\r\n    const { GetAdminMonthlyParkingStatusReportWeb } = endPoints;\r\n    const method = \"POST\";\r\n    let body = {\r\n      facilityid,\r\n      token,\r\n      inputdatetime,\r\n    };\r\n    const res = await Api(\r\n      GetAdminMonthlyParkingStatusReportWeb,\r\n      false,\r\n      method,\r\n      body\r\n    );\r\n    return res;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nconst AdminMISStatusReport = async (facilityid, token, inputdatetime) => {\r\n  try {\r\n    const { GetAdminMISReport } = endPoints;\r\n    const method = \"POST\";\r\n    let body = {\r\n      facilityid,\r\n      token,\r\n      inputdatetime,\r\n    };\r\n    const res = await Api(GetAdminMISReport, false, method, body);\r\n    return res;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nconst AdminMonthlyMISStatusReport = async (\r\n  facilityid,\r\n  token,\r\n  inputmonthyear\r\n) => {\r\n  try {\r\n    const { GetAdminMonthlyMISReport } = endPoints;\r\n    const method = \"POST\";\r\n    let body = {\r\n      facilityid,\r\n      token,\r\n      inputmonthyear,\r\n    };\r\n    const res = await Api(GetAdminMonthlyMISReport, false, method, body);\r\n    return res;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nconst GetAllQualification = async () => {\r\n  try {\r\n    const { all_qualifications } = endPoints;\r\n\r\n    const res = await Api(all_qualifications, false);\r\n    return res;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nconst GetAllCountry = async () => {\r\n  try {\r\n    const { all_countries } = endPoints;\r\n\r\n    const res = await Api(all_countries, false);\r\n    return res;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nconst GetAllVisaTypes = async () => {\r\n  try {\r\n    const { all_visa_type } = endPoints;\r\n\r\n    const res = await Api(all_visa_type, false);\r\n    return res;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nconst GetAllLeadSource = async () => {\r\n  try {\r\n    const { all_lead_source } = endPoints;\r\n\r\n    const res = await Api(all_lead_source, false);\r\n    return res;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nconst GetAllBranch = async () => {\r\n  try {\r\n    const { all_branches } = endPoints;\r\n\r\n    const res = await Api(all_branches, false);\r\n    return res;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nconst GetAllLeadsStatus = async () => {\r\n  try {\r\n    const { all_leads_status } = endPoints;\r\n\r\n    const res = await Api(all_leads_status, false);\r\n    return res;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nconst GetAllLead = async () => {\r\n  try {\r\n    const { all_leads } = endPoints;\r\n\r\n    const res = await Api(all_leads, true);\r\n    return res;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nconst GetAllUniversity = async () => {\r\n  try {\r\n    const { all_universities } = endPoints;\r\n\r\n    const res = await Api(all_universities, true);\r\n    return res;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nconst SaveBranch = async (\r\n  name,\r\n  emailAddress,\r\n  mobileNumber,\r\n  city,\r\n  address,\r\n  description\r\n) => {\r\n  const method = \"POST\";\r\n  let body = {\r\n    name,\r\n    emailAddress,\r\n    mobileNumber,\r\n    city,\r\n    address,\r\n    description,\r\n  };\r\n  try {\r\n    const { save_branch } = endPoints;\r\n\r\n    const res = await Api(save_branch, true, method, body);\r\n    return res;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nconst SaveUser = async (\r\n  firstName,\r\n  lastName,\r\n  userName,\r\n  email,\r\n  password,\r\n  confirmPassword,\r\n  roles,\r\n  branchId\r\n) => {\r\n  const method = \"POST\";\r\n  let body = {\r\n    branchId,\r\n    firstName,\r\n    lastName,\r\n    userName,\r\n    email,\r\n    password,\r\n    confirmPassword,\r\n    roles,\r\n  };\r\n  try {\r\n    const { register } = endPoints;\r\n\r\n    const res = await Api(register, true, method, body);\r\n    return res;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nconst GetAllUser = async () => {\r\n  try {\r\n    const { all_user } = endPoints;\r\n\r\n    const res = await Api(all_user, true);\r\n    return res;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nconst UserService = {\r\n  singin,\r\n  GetAllQualification,\r\n  GetAllCountry,\r\n  GetAllVisaTypes,\r\n  GetAllLeadSource,\r\n  GetAllBranch,\r\n  GetAllLeadsStatus,\r\n  GetAllLead,\r\n  SaveBranch,\r\n  GetAllUniversity,\r\n  SaveUser,\r\n  GetAllUser,\r\n  mapping,\r\n  AdminParkingStatusReport,\r\n  AdminMonthlyParkingStatusReport,\r\n  AdminMISStatusReport,\r\n  AdminMonthlyMISStatusReport,\r\n};\r\nexport default UserService;\r\n","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/store/actions/user.js",[],[],"/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/layout/privateLayout/header.js",["485","486","487","488","489","490","491","492","493","494","495","496"],[],"import React, { useState } from \"react\";\r\nimport DashboardIcon from \"@material-ui/icons/Dashboard\";\r\nimport AppsIcon from \"@material-ui/icons/Apps\";\r\n// import { Scrollbars } from \"react-custom-scrollbars\";\r\nimport { Paper, Box, Typography, Menu, MenuItem } from \"@material-ui/core\";\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\nimport { theme } from \"../../theme/light\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppBar, Toolbar, IconButton, Avatar } from \"@material-ui/core\";\r\nimport NavigateBeforeIcon from \"@material-ui/icons/NavigateBefore\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport logo from \"../../theme/assets/images/inner-logo.png\";\r\nimport smallLogo from \"../../theme/assets/images/small-logo.png\";\r\nimport { useNavigate, Link } from \"react-router-dom\";\r\nimport { menu } from \"./menu\";\r\nimport { userLogout } from \"../../store/actions/user\";\r\nconst AppHeader = (props) => {\r\n  // const opneNavMenu = () => {\r\n  //   document.body.classList.add('openMenu');\r\n  // }\r\n  // const closeNavMenu = () => {\r\n  //   document.body.classList.remove('openMenu');\r\n  // }\r\n  const navigate = useNavigate();\r\n  const [clicked, setClicked] = useState(\"\");\r\n\r\n  const openMenu = () => {\r\n    clicked ? setClicked(\"\") : setClicked(\"navMenuOpen navMenuClose\");\r\n    document.body.classList.remove(\"openMenu\");\r\n    console.log(window.location.pathname);\r\n  };\r\n\r\n  const closeMenu = () => {\r\n    clicked ? setClicked(\"\") : setClicked(\"navMenuOpen navMenuClose\");\r\n    document.body.classList.add(\"openMenu\");\r\n  };\r\n\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n    const { dispatch } = props;\r\n    console.log(\"componentDidMount\", \"Login\");\r\n    dispatch(userLogout());\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ThemeProvider theme={theme}>\r\n        <Paper square className={`sidebarNavMenu ${clicked && \"openNavMenu\"}`}>\r\n          <Box\r\n            component=\"a\"\r\n            pl={1}\r\n            pr={1}\r\n            display=\"flex\"\r\n            color=\"text.hint\"\r\n            flexDirection=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n            minHeight=\"70px\"\r\n          >\r\n            {/* <Box\r\n              className=\"inner-logo\"\r\n              textAlign=\"center\"\r\n              maxWidth=\"150px\"\r\n              mr={3}\r\n            >\r\n              <img src={logo} alt=\"img\" className=\"login-logo\" />\r\n            </Box>\r\n            <Box\r\n              component=\"span\"\r\n              flexDirection=\"column\"\r\n              className=\"navMenu\"\r\n              textAlign=\"center\"\r\n              display=\"flex\"\r\n              alignItems=\"center\"\r\n              justifyContent=\"center\"\r\n            >\r\n              <img src={smallLogo} alt=\"img\" className=\"small-logo\" />\r\n            </Box> */}\r\n            <Box\r\n              component=\"span\"\r\n              flexDirection=\"column\"\r\n              className=\"openNavMenu\"\r\n              textAlign=\"center\"\r\n              display=\"flex\"\r\n              alignItems=\"center\"\r\n              justifyContent=\"center\"\r\n              onClick={openMenu}\r\n              bgcolor=\"primary.menuCloseBg\"\r\n              color=\"text.primary\"\r\n            >\r\n              <NavigateBeforeIcon color=\"inherit\" />\r\n            </Box>\r\n            <Box\r\n              component=\"span\"\r\n              flexDirection=\"column\"\r\n              className=\"closeMenu\"\r\n              textAlign=\"center\"\r\n              display=\"flex\"\r\n              alignItems=\"center\"\r\n              justifyContent=\"center\"\r\n              onClick={closeMenu}\r\n              bgcolor=\"primary.menuCloseBg\"\r\n              color=\"text.primary\"\r\n            >\r\n              <NavigateBeforeIcon color=\"inherit\" />\r\n            </Box>\r\n          </Box>\r\n          {menu.map((item, key) => (\r\n            <MenuItm key={key} item={item} />\r\n          ))}\r\n        </Paper>\r\n        <div className=\"appHeader\">\r\n          <AppBar position=\"static\" color=\"inherit\">\r\n            <Toolbar>\r\n              <Box display=\"flex\" alignItems=\"center\" ml=\"auto\">\r\n                <IconButton className=\"headerRightIcons\">\r\n                  <SettingsIcon style={{ fontSize: 24 }} />\r\n                </IconButton>\r\n\r\n                <Box\r\n                  className=\"badgeStatus\"\r\n                  width=\"40px\"\r\n                  height=\"40px\"\r\n                  aria-controls=\"simple-menu\"\r\n                  aria-haspopup=\"true\"\r\n                  onClick={handleClick}\r\n                >\r\n                  <Avatar\r\n                    alt=\"Remy Sharp\"\r\n                    src=\"https://placeimg.com/40/40/people/1\"\r\n                    edge=\"end\"\r\n                    style={{ fontSize: 24 }}\r\n                    aria-label=\"account of current user\"\r\n                    aria-haspopup=\"true\"\r\n                    className=\"headerRightIcons\"\r\n                    color=\"primary\"\r\n                  >\r\n                    C\r\n                  </Avatar>\r\n                  <span className=\"status\"></span>\r\n                </Box>\r\n                <Menu\r\n                  id=\"simple-menu\"\r\n                  anchorEl={anchorEl}\r\n                  keepMounted\r\n                  open={Boolean(anchorEl)}\r\n                  onClose={handleClose}\r\n                  className=\"dropdown-menu\"\r\n                >\r\n                  <MenuItem onClick={handleClose}>\r\n                    <Box component=\"span\" color=\"grey.50\" mr={1}>\r\n                      <ExitToAppIcon color=\"inherit\" />\r\n                    </Box>\r\n                    Logout\r\n                  </MenuItem>\r\n                </Menu>\r\n              </Box>\r\n            </Toolbar>\r\n          </AppBar>\r\n        </div>\r\n      </ThemeProvider>\r\n    </>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => ({});\r\nexport default connect(mapStateToProps)(AppHeader);\r\n\r\nconst MenuItm = ({ item }) => {\r\n  return <SingleLevel item={item} />;\r\n};\r\n\r\nconst SingleLevel = ({ item }) => {\r\n  return (\r\n    <Box\r\n      button\r\n      component={Link}\r\n      to={item.to}\r\n      p={1}\r\n      display=\"flex\"\r\n      color=\"text.hint\"\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\"\r\n      className={\r\n        item.to === window.location.pathname\r\n          ? \"navMenuActive navMenuList\"\r\n          : \"navMenuList\"\r\n      }\r\n    >\r\n      <Box\r\n        component=\"span\"\r\n        className=\"navMenuIcon\"\r\n        textAlign=\"center\"\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n        borderRadius={50}\r\n      >\r\n        {item.icon}\r\n      </Box>\r\n      <Box\r\n        component=\"span\"\r\n        color=\"text.primary\"\r\n        mt={2}\r\n        className=\"menuTextList\"\r\n      >\r\n        <Typography variant=\"button\" display=\"block\" gutterBottom>\r\n          {item.title}\r\n        </Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport function hasChildren(item) {\r\n  const { items: children } = item;\r\n\r\n  if (children === undefined) {\r\n    return false;\r\n  }\r\n\r\n  if (children.constructor !== Array) {\r\n    return false;\r\n  }\r\n\r\n  if (children.length === 0) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n",["497","498"],"/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/store/constants/index.js",[],[],"/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/config.js",[],[],"/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/utils/APICaller.js",["499","500"],[],"import axios from \"axios\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { appConfig } from \"../config\";\r\nimport { store } from \"../store\";\r\nconst { mainDomain } = appConfig;\r\n\r\nconst Api = async (endpoint, isauthenticated, method, body, contentType) => {\r\n  try {\r\n    var newState = store.getState().user.loginToken;\r\n    let headers = {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": contentType || \"application/json\",\r\n      \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\r\n      \"Access-Control-Allow-Credentials\": \"true\",\r\n    };\r\n    if (isauthenticated) {\r\n      headers = {\r\n        Authorization: `Bearer  ${newState}`,\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": contentType || \"application/json\",\r\n      };\r\n    }\r\n\r\n    const response = await axios({\r\n      url: `${mainDomain}/${endpoint}`,\r\n      method: method || \"GET\",\r\n      data: body,\r\n      headers: headers,\r\n      responseType: \"json\",\r\n    });\r\n\r\n    return response;\r\n  } catch (error) {\r\n    if (error.response !== undefined) {\r\n      const errObj = error.response;\r\n      const { status } = error.response;\r\n      if (status == 401) {\r\n        localStorage.removeItem(\"persist:persist-root\");\r\n        window.location.assign(\"/\");\r\n      }\r\n      console.log(\"return success to frontend\", error.response);\r\n\r\n      return errObj; // return success to frontend\r\n    }\r\n    console.log(\"return success to sssss\", error);\r\n    return error;\r\n  }\r\n};\r\n\r\nstore.subscribe(Api);\r\n\r\nexport default Api;\r\n","/Users/abhijeetsingh/My Data/my data/EazyPark ReactJs/eduorg/src/layout/privateLayout/menu.js",["501","502","503"],[],"import HomeOutlinedIcon from \"@material-ui/icons/HomeOutlined\";\nimport LocalLibraryOutlinedIcon from \"@material-ui/icons/LocalLibraryOutlined\";\nimport TrendingUpOutlinedIcon from \"@material-ui/icons/TrendingUpOutlined\";\nimport DescriptionOutlinedIcon from \"@material-ui/icons/DescriptionOutlined\";\nimport React from \"react\";\n\nexport const menu = [\n  {\n    icon: <HomeOutlinedIcon />,\n    title: \"Home\",\n    to: \"/dashboard\",\n  },\n\n  // {\n  //   icon: <TrendingUpOutlinedIcon />,\n  //   to: \"/addUser\",\n  //   title: \"Users\",\n  // },\n  // {\n  //   icon: <DescriptionOutlinedIcon />,\n  //   to: \"/branch\",\n  //   title: \"Branch\",\n  // },\n  // {\n  //   icon: <DescriptionOutlinedIcon />,\n  //   to: \"/reports\",\n  //   title: \"Reports\",\n  // },\n  // {\n  //   icon: <DescriptionOutlinedIcon />,\n  //   to: \"/addlead\",\n  //   title: \"Add lead\",\n  // },\n  // {\n  //   icon: <DescriptionOutlinedIcon />,\n  //   to: \"/leads\",\n  //   title: \"Add lead\",\n  // },\n\n  // {\n  //   icon: <DescriptionOutlinedIcon />,\n  //   to: \"/leadsStatus\",\n  //   title: \"Leads Status\",\n  // },\n\n  // {\n  //   icon: <DescriptionOutlinedIcon />,\n  //   to: \"/qualification\",\n  //   title: \"Qualification\",\n  // },\n];\n",{"ruleId":"504","replacedBy":"505"},{"ruleId":"506","replacedBy":"507"},{"ruleId":"508","severity":1,"message":"509","line":3,"column":3,"nodeType":"510","messageId":"511","endLine":3,"endColumn":7},{"ruleId":"508","severity":1,"message":"512","line":16,"column":8,"nodeType":"510","messageId":"511","endLine":16,"endColumn":12},{"ruleId":"508","severity":1,"message":"513","line":57,"column":15,"nodeType":"510","messageId":"511","endLine":57,"endColumn":21},{"ruleId":"508","severity":1,"message":"514","line":61,"column":17,"nodeType":"510","messageId":"511","endLine":61,"endColumn":22},{"ruleId":"508","severity":1,"message":"515","line":61,"column":33,"nodeType":"510","messageId":"511","endLine":61,"endColumn":41},{"ruleId":"508","severity":1,"message":"516","line":11,"column":3,"nodeType":"510","messageId":"511","endLine":11,"endColumn":17},{"ruleId":"517","severity":1,"message":"518","line":206,"column":32,"nodeType":"519","messageId":"520","endLine":206,"endColumn":34},{"ruleId":"508","severity":1,"message":"521","line":330,"column":9,"nodeType":"510","messageId":"511","endLine":330,"endColumn":23},{"ruleId":"508","severity":1,"message":"522","line":629,"column":7,"nodeType":"510","messageId":"511","endLine":629,"endColumn":10},{"ruleId":"508","severity":1,"message":"523","line":670,"column":7,"nodeType":"510","messageId":"511","endLine":670,"endColumn":19},{"ruleId":"508","severity":1,"message":"524","line":59,"column":5,"nodeType":"510","messageId":"511","endLine":59,"endColumn":9},{"ruleId":"508","severity":1,"message":"524","line":59,"column":5,"nodeType":"510","messageId":"511","endLine":59,"endColumn":9},{"ruleId":"508","severity":1,"message":"524","line":63,"column":5,"nodeType":"510","messageId":"511","endLine":63,"endColumn":9},{"ruleId":"517","severity":1,"message":"518","line":231,"column":30,"nodeType":"519","messageId":"520","endLine":231,"endColumn":32},{"ruleId":"517","severity":1,"message":"518","line":240,"column":16,"nodeType":"519","messageId":"520","endLine":240,"endColumn":18},{"ruleId":"508","severity":1,"message":"525","line":242,"column":65,"nodeType":"510","messageId":"511","endLine":242,"endColumn":73},{"ruleId":"508","severity":1,"message":"526","line":299,"column":53,"nodeType":"510","messageId":"511","endLine":299,"endColumn":62},{"ruleId":"508","severity":1,"message":"527","line":299,"column":64,"nodeType":"510","messageId":"511","endLine":299,"endColumn":72},{"ruleId":"508","severity":1,"message":"528","line":26,"column":8,"nodeType":"510","messageId":"511","endLine":26,"endColumn":14},{"ruleId":"508","severity":1,"message":"524","line":59,"column":5,"nodeType":"510","messageId":"511","endLine":59,"endColumn":9},{"ruleId":"508","severity":1,"message":"529","line":191,"column":11,"nodeType":"510","messageId":"511","endLine":191,"endColumn":15},{"ruleId":"508","severity":1,"message":"524","line":55,"column":5,"nodeType":"510","messageId":"511","endLine":55,"endColumn":9},{"ruleId":"508","severity":1,"message":"530","line":246,"column":7,"nodeType":"510","messageId":"511","endLine":246,"endColumn":11},{"ruleId":"508","severity":1,"message":"531","line":247,"column":7,"nodeType":"510","messageId":"511","endLine":247,"endColumn":14},{"ruleId":"508","severity":1,"message":"532","line":248,"column":7,"nodeType":"510","messageId":"511","endLine":248,"endColumn":18},{"ruleId":"508","severity":1,"message":"533","line":4,"column":10,"nodeType":"510","messageId":"511","endLine":4,"endColumn":21},{"ruleId":"508","severity":1,"message":"533","line":3,"column":10,"nodeType":"510","messageId":"511","endLine":3,"endColumn":21},{"ruleId":"508","severity":1,"message":"534","line":2,"column":21,"nodeType":"510","messageId":"511","endLine":2,"endColumn":30},{"ruleId":"508","severity":1,"message":"535","line":2,"column":8,"nodeType":"510","messageId":"511","endLine":2,"endColumn":21},{"ruleId":"508","severity":1,"message":"536","line":3,"column":8,"nodeType":"510","messageId":"511","endLine":3,"endColumn":16},{"ruleId":"508","severity":1,"message":"537","line":9,"column":8,"nodeType":"510","messageId":"511","endLine":9,"endColumn":12},{"ruleId":"508","severity":1,"message":"538","line":10,"column":8,"nodeType":"510","messageId":"511","endLine":10,"endColumn":16},{"ruleId":"508","severity":1,"message":"539","line":11,"column":8,"nodeType":"510","messageId":"511","endLine":11,"endColumn":20},{"ruleId":"508","severity":1,"message":"540","line":12,"column":8,"nodeType":"510","messageId":"511","endLine":12,"endColumn":20},{"ruleId":"508","severity":1,"message":"541","line":13,"column":8,"nodeType":"510","messageId":"511","endLine":13,"endColumn":16},{"ruleId":"508","severity":1,"message":"542","line":14,"column":8,"nodeType":"510","messageId":"511","endLine":14,"endColumn":22},{"ruleId":"508","severity":1,"message":"543","line":15,"column":8,"nodeType":"510","messageId":"511","endLine":15,"endColumn":22},{"ruleId":"508","severity":1,"message":"544","line":37,"column":9,"nodeType":"510","messageId":"511","endLine":37,"endColumn":17},{"ruleId":"508","severity":1,"message":"533","line":2,"column":10,"nodeType":"510","messageId":"511","endLine":2,"endColumn":21},{"ruleId":"517","severity":1,"message":"518","line":38,"column":16,"nodeType":"519","messageId":"520","endLine":38,"endColumn":18},{"ruleId":"508","severity":1,"message":"545","line":2,"column":8,"nodeType":"510","messageId":"511","endLine":2,"endColumn":32},{"ruleId":"508","severity":1,"message":"546","line":3,"column":8,"nodeType":"510","messageId":"511","endLine":3,"endColumn":30},{"ruleId":"508","severity":1,"message":"547","line":2,"column":34,"nodeType":"510","messageId":"511","endLine":2,"endColumn":42},{"ruleId":"508","severity":1,"message":"548","line":9,"column":17,"nodeType":"510","messageId":"511","endLine":9,"endColumn":21},{"ruleId":"508","severity":1,"message":"549","line":9,"column":23,"nodeType":"510","messageId":"511","endLine":9,"endColumn":32},{"ruleId":"508","severity":1,"message":"550","line":9,"column":34,"nodeType":"510","messageId":"511","endLine":9,"endColumn":50},{"ruleId":"508","severity":1,"message":"551","line":18,"column":8,"nodeType":"510","messageId":"511","endLine":18,"endColumn":16},{"ruleId":"508","severity":1,"message":"552","line":22,"column":8,"nodeType":"510","messageId":"511","endLine":22,"endColumn":16},{"ruleId":"508","severity":1,"message":"528","line":23,"column":8,"nodeType":"510","messageId":"511","endLine":23,"endColumn":14},{"ruleId":"508","severity":1,"message":"553","line":24,"column":8,"nodeType":"510","messageId":"511","endLine":24,"endColumn":14},{"ruleId":"508","severity":1,"message":"554","line":26,"column":8,"nodeType":"510","messageId":"511","endLine":26,"endColumn":17},{"ruleId":"508","severity":1,"message":"555","line":29,"column":8,"nodeType":"510","messageId":"511","endLine":29,"endColumn":13},{"ruleId":"508","severity":1,"message":"524","line":54,"column":5,"nodeType":"510","messageId":"511","endLine":54,"endColumn":9},{"ruleId":"508","severity":1,"message":"556","line":240,"column":7,"nodeType":"510","messageId":"511","endLine":240,"endColumn":11},{"ruleId":"508","severity":1,"message":"557","line":241,"column":7,"nodeType":"510","messageId":"511","endLine":241,"endColumn":19},{"ruleId":"508","severity":1,"message":"558","line":242,"column":7,"nodeType":"510","messageId":"511","endLine":242,"endColumn":19},{"ruleId":"508","severity":1,"message":"530","line":243,"column":7,"nodeType":"510","messageId":"511","endLine":243,"endColumn":11},{"ruleId":"508","severity":1,"message":"531","line":244,"column":7,"nodeType":"510","messageId":"511","endLine":244,"endColumn":14},{"ruleId":"508","severity":1,"message":"532","line":245,"column":7,"nodeType":"510","messageId":"511","endLine":245,"endColumn":18},{"ruleId":"508","severity":1,"message":"559","line":246,"column":7,"nodeType":"510","messageId":"511","endLine":246,"endColumn":17},{"ruleId":"508","severity":1,"message":"560","line":247,"column":7,"nodeType":"510","messageId":"511","endLine":247,"endColumn":19},{"ruleId":"508","severity":1,"message":"561","line":248,"column":7,"nodeType":"510","messageId":"511","endLine":248,"endColumn":14},{"ruleId":"508","severity":1,"message":"562","line":249,"column":7,"nodeType":"510","messageId":"511","endLine":249,"endColumn":14},{"ruleId":"508","severity":1,"message":"563","line":250,"column":7,"nodeType":"510","messageId":"511","endLine":250,"endColumn":13},{"ruleId":"508","severity":1,"message":"564","line":416,"column":5,"nodeType":"510","messageId":"511","endLine":416,"endColumn":21},{"ruleId":"508","severity":1,"message":"565","line":419,"column":5,"nodeType":"510","messageId":"511","endLine":419,"endColumn":16},{"ruleId":"508","severity":1,"message":"566","line":420,"column":5,"nodeType":"510","messageId":"511","endLine":420,"endColumn":13},{"ruleId":"504","replacedBy":"567"},{"ruleId":"506","replacedBy":"568"},{"ruleId":"508","severity":1,"message":"509","line":3,"column":3,"nodeType":"510","messageId":"511","endLine":3,"endColumn":7},{"ruleId":"508","severity":1,"message":"512","line":16,"column":8,"nodeType":"510","messageId":"511","endLine":16,"endColumn":12},{"ruleId":"508","severity":1,"message":"569","line":25,"column":3,"nodeType":"510","messageId":"511","endLine":25,"endColumn":13},{"ruleId":"517","severity":1,"message":"518","line":64,"column":30,"nodeType":"519","messageId":"520","endLine":64,"endColumn":32},{"ruleId":"508","severity":1,"message":"570","line":66,"column":11,"nodeType":"510","messageId":"511","endLine":66,"endColumn":17},{"ruleId":"508","severity":1,"message":"571","line":67,"column":11,"nodeType":"510","messageId":"511","endLine":67,"endColumn":27},{"ruleId":"508","severity":1,"message":"572","line":69,"column":11,"nodeType":"510","messageId":"511","endLine":69,"endColumn":23},{"ruleId":"508","severity":1,"message":"573","line":70,"column":11,"nodeType":"510","messageId":"511","endLine":70,"endColumn":30},{"ruleId":"508","severity":1,"message":"574","line":71,"column":11,"nodeType":"510","messageId":"511","endLine":71,"endColumn":20},{"ruleId":"508","severity":1,"message":"575","line":72,"column":11,"nodeType":"510","messageId":"511","endLine":72,"endColumn":18},{"ruleId":"508","severity":1,"message":"576","line":73,"column":11,"nodeType":"510","messageId":"511","endLine":73,"endColumn":15},{"ruleId":"508","severity":1,"message":"577","line":75,"column":11,"nodeType":"510","messageId":"511","endLine":75,"endColumn":19},{"ruleId":"508","severity":1,"message":"578","line":76,"column":11,"nodeType":"510","messageId":"511","endLine":76,"endColumn":18},{"ruleId":"508","severity":1,"message":"579","line":8,"column":3,"nodeType":"510","messageId":"511","endLine":8,"endColumn":12},{"ruleId":"508","severity":1,"message":"516","line":12,"column":3,"nodeType":"510","messageId":"511","endLine":12,"endColumn":17},{"ruleId":"508","severity":1,"message":"580","line":13,"column":3,"nodeType":"510","messageId":"511","endLine":13,"endColumn":11},{"ruleId":"508","severity":1,"message":"553","line":15,"column":3,"nodeType":"510","messageId":"511","endLine":15,"endColumn":9},{"ruleId":"508","severity":1,"message":"581","line":17,"column":10,"nodeType":"510","messageId":"511","endLine":17,"endColumn":15},{"ruleId":"508","severity":1,"message":"549","line":17,"column":17,"nodeType":"510","messageId":"511","endLine":17,"endColumn":26},{"ruleId":"508","severity":1,"message":"550","line":17,"column":28,"nodeType":"510","messageId":"511","endLine":17,"endColumn":44},{"ruleId":"508","severity":1,"message":"582","line":18,"column":8,"nodeType":"510","messageId":"511","endLine":18,"endColumn":17},{"ruleId":"508","severity":1,"message":"583","line":20,"column":8,"nodeType":"510","messageId":"511","endLine":20,"endColumn":22},{"ruleId":"508","severity":1,"message":"584","line":22,"column":8,"nodeType":"510","messageId":"511","endLine":22,"endColumn":23},{"ruleId":"508","severity":1,"message":"585","line":25,"column":8,"nodeType":"510","messageId":"511","endLine":25,"endColumn":15},{"ruleId":"508","severity":1,"message":"586","line":34,"column":3,"nodeType":"510","messageId":"511","endLine":34,"endColumn":21},{"ruleId":"508","severity":1,"message":"587","line":99,"column":7,"nodeType":"510","messageId":"511","endLine":99,"endColumn":23},{"ruleId":"508","severity":1,"message":"524","line":125,"column":5,"nodeType":"510","messageId":"511","endLine":125,"endColumn":9},{"ruleId":"508","severity":1,"message":"588","line":126,"column":10,"nodeType":"510","messageId":"511","endLine":126,"endColumn":27},{"ruleId":"508","severity":1,"message":"564","line":129,"column":5,"nodeType":"510","messageId":"511","endLine":129,"endColumn":21},{"ruleId":"508","severity":1,"message":"565","line":132,"column":5,"nodeType":"510","messageId":"511","endLine":132,"endColumn":16},{"ruleId":"508","severity":1,"message":"566","line":133,"column":5,"nodeType":"510","messageId":"511","endLine":133,"endColumn":13},{"ruleId":"508","severity":1,"message":"589","line":187,"column":10,"nodeType":"510","messageId":"511","endLine":187,"endColumn":23},{"ruleId":"508","severity":1,"message":"590","line":194,"column":10,"nodeType":"510","messageId":"511","endLine":194,"endColumn":20},{"ruleId":"591","severity":1,"message":"592","line":221,"column":7,"nodeType":"593","messageId":"520","endLine":221,"endColumn":15},{"ruleId":"508","severity":1,"message":"594","line":242,"column":25,"nodeType":"510","messageId":"511","endLine":242,"endColumn":35},{"ruleId":"508","severity":1,"message":"513","line":262,"column":15,"nodeType":"510","messageId":"511","endLine":262,"endColumn":21},{"ruleId":"595","severity":1,"message":"596","line":269,"column":32,"nodeType":"597","messageId":"598","endLine":269,"endColumn":34},{"ruleId":"508","severity":1,"message":"599","line":291,"column":43,"nodeType":"510","messageId":"511","endLine":291,"endColumn":53},{"ruleId":"508","severity":1,"message":"600","line":353,"column":11,"nodeType":"510","messageId":"511","endLine":353,"endColumn":23},{"ruleId":"517","severity":1,"message":"518","line":372,"column":27,"nodeType":"519","messageId":"520","endLine":372,"endColumn":29},{"ruleId":"517","severity":1,"message":"518","line":376,"column":35,"nodeType":"519","messageId":"520","endLine":376,"endColumn":37},{"ruleId":"517","severity":1,"message":"518","line":377,"column":36,"nodeType":"519","messageId":"520","endLine":377,"endColumn":38},{"ruleId":"517","severity":1,"message":"518","line":378,"column":39,"nodeType":"519","messageId":"520","endLine":378,"endColumn":41},{"ruleId":"517","severity":1,"message":"518","line":391,"column":27,"nodeType":"519","messageId":"520","endLine":391,"endColumn":29},{"ruleId":"517","severity":1,"message":"518","line":395,"column":36,"nodeType":"519","messageId":"520","endLine":395,"endColumn":38},{"ruleId":"517","severity":1,"message":"518","line":396,"column":37,"nodeType":"519","messageId":"520","endLine":396,"endColumn":39},{"ruleId":"517","severity":1,"message":"518","line":397,"column":40,"nodeType":"519","messageId":"520","endLine":397,"endColumn":42},{"ruleId":"517","severity":1,"message":"518","line":410,"column":27,"nodeType":"519","messageId":"520","endLine":410,"endColumn":29},{"ruleId":"517","severity":1,"message":"518","line":415,"column":29,"nodeType":"519","messageId":"520","endLine":415,"endColumn":31},{"ruleId":"517","severity":1,"message":"518","line":417,"column":29,"nodeType":"519","messageId":"520","endLine":417,"endColumn":31},{"ruleId":"517","severity":1,"message":"518","line":419,"column":29,"nodeType":"519","messageId":"520","endLine":419,"endColumn":31},{"ruleId":"508","severity":1,"message":"599","line":473,"column":43,"nodeType":"510","messageId":"511","endLine":473,"endColumn":53},{"ruleId":"508","severity":1,"message":"600","line":536,"column":11,"nodeType":"510","messageId":"511","endLine":536,"endColumn":23},{"ruleId":"517","severity":1,"message":"518","line":555,"column":27,"nodeType":"519","messageId":"520","endLine":555,"endColumn":29},{"ruleId":"517","severity":1,"message":"518","line":559,"column":35,"nodeType":"519","messageId":"520","endLine":559,"endColumn":37},{"ruleId":"517","severity":1,"message":"518","line":560,"column":36,"nodeType":"519","messageId":"520","endLine":560,"endColumn":38},{"ruleId":"517","severity":1,"message":"518","line":561,"column":39,"nodeType":"519","messageId":"520","endLine":561,"endColumn":41},{"ruleId":"517","severity":1,"message":"518","line":574,"column":27,"nodeType":"519","messageId":"520","endLine":574,"endColumn":29},{"ruleId":"517","severity":1,"message":"518","line":578,"column":36,"nodeType":"519","messageId":"520","endLine":578,"endColumn":38},{"ruleId":"517","severity":1,"message":"518","line":579,"column":37,"nodeType":"519","messageId":"520","endLine":579,"endColumn":39},{"ruleId":"517","severity":1,"message":"518","line":580,"column":40,"nodeType":"519","messageId":"520","endLine":580,"endColumn":42},{"ruleId":"517","severity":1,"message":"518","line":593,"column":27,"nodeType":"519","messageId":"520","endLine":593,"endColumn":29},{"ruleId":"517","severity":1,"message":"518","line":598,"column":29,"nodeType":"519","messageId":"520","endLine":598,"endColumn":31},{"ruleId":"517","severity":1,"message":"518","line":600,"column":29,"nodeType":"519","messageId":"520","endLine":600,"endColumn":31},{"ruleId":"517","severity":1,"message":"518","line":602,"column":29,"nodeType":"519","messageId":"520","endLine":602,"endColumn":31},{"ruleId":"508","severity":1,"message":"599","line":1152,"column":7,"nodeType":"510","messageId":"511","endLine":1152,"endColumn":17},{"ruleId":"508","severity":1,"message":"601","line":1154,"column":7,"nodeType":"510","messageId":"511","endLine":1154,"endColumn":14},{"ruleId":"508","severity":1,"message":"602","line":1160,"column":7,"nodeType":"510","messageId":"511","endLine":1160,"endColumn":14},{"ruleId":"508","severity":1,"message":"603","line":1161,"column":7,"nodeType":"510","messageId":"511","endLine":1161,"endColumn":12},{"ruleId":"508","severity":1,"message":"604","line":1163,"column":7,"nodeType":"510","messageId":"511","endLine":1163,"endColumn":19},{"ruleId":"508","severity":1,"message":"605","line":1164,"column":7,"nodeType":"510","messageId":"511","endLine":1164,"endColumn":19},{"ruleId":"508","severity":1,"message":"606","line":1165,"column":7,"nodeType":"510","messageId":"511","endLine":1165,"endColumn":20},{"ruleId":"508","severity":1,"message":"607","line":1166,"column":7,"nodeType":"510","messageId":"511","endLine":1166,"endColumn":16},{"ruleId":"508","severity":1,"message":"608","line":1167,"column":7,"nodeType":"510","messageId":"511","endLine":1167,"endColumn":18},{"ruleId":"508","severity":1,"message":"609","line":1168,"column":7,"nodeType":"510","messageId":"511","endLine":1168,"endColumn":18},{"ruleId":"508","severity":1,"message":"610","line":1169,"column":7,"nodeType":"510","messageId":"511","endLine":1169,"endColumn":18},{"ruleId":"508","severity":1,"message":"611","line":1178,"column":11,"nodeType":"510","messageId":"511","endLine":1178,"endColumn":20},{"ruleId":"508","severity":1,"message":"612","line":1182,"column":11,"nodeType":"510","messageId":"511","endLine":1182,"endColumn":21},{"ruleId":"508","severity":1,"message":"524","line":59,"column":5,"nodeType":"510","messageId":"511","endLine":59,"endColumn":9},{"ruleId":"508","severity":1,"message":"524","line":59,"column":5,"nodeType":"510","messageId":"511","endLine":59,"endColumn":9},{"ruleId":"517","severity":1,"message":"518","line":206,"column":32,"nodeType":"519","messageId":"520","endLine":206,"endColumn":34},{"ruleId":"508","severity":1,"message":"521","line":330,"column":9,"nodeType":"510","messageId":"511","endLine":330,"endColumn":23},{"ruleId":"508","severity":1,"message":"522","line":629,"column":7,"nodeType":"510","messageId":"511","endLine":629,"endColumn":10},{"ruleId":"508","severity":1,"message":"523","line":670,"column":7,"nodeType":"510","messageId":"511","endLine":670,"endColumn":19},{"ruleId":"508","severity":1,"message":"524","line":55,"column":5,"nodeType":"510","messageId":"511","endLine":55,"endColumn":9},{"ruleId":"508","severity":1,"message":"530","line":246,"column":7,"nodeType":"510","messageId":"511","endLine":246,"endColumn":11},{"ruleId":"508","severity":1,"message":"531","line":247,"column":7,"nodeType":"510","messageId":"511","endLine":247,"endColumn":14},{"ruleId":"508","severity":1,"message":"532","line":248,"column":7,"nodeType":"510","messageId":"511","endLine":248,"endColumn":18},{"ruleId":"508","severity":1,"message":"547","line":2,"column":34,"nodeType":"510","messageId":"511","endLine":2,"endColumn":42},{"ruleId":"508","severity":1,"message":"548","line":9,"column":17,"nodeType":"510","messageId":"511","endLine":9,"endColumn":21},{"ruleId":"508","severity":1,"message":"549","line":9,"column":23,"nodeType":"510","messageId":"511","endLine":9,"endColumn":32},{"ruleId":"508","severity":1,"message":"550","line":9,"column":34,"nodeType":"510","messageId":"511","endLine":9,"endColumn":50},{"ruleId":"508","severity":1,"message":"551","line":18,"column":8,"nodeType":"510","messageId":"511","endLine":18,"endColumn":16},{"ruleId":"508","severity":1,"message":"552","line":22,"column":8,"nodeType":"510","messageId":"511","endLine":22,"endColumn":16},{"ruleId":"508","severity":1,"message":"528","line":23,"column":8,"nodeType":"510","messageId":"511","endLine":23,"endColumn":14},{"ruleId":"508","severity":1,"message":"553","line":24,"column":8,"nodeType":"510","messageId":"511","endLine":24,"endColumn":14},{"ruleId":"508","severity":1,"message":"554","line":26,"column":8,"nodeType":"510","messageId":"511","endLine":26,"endColumn":17},{"ruleId":"508","severity":1,"message":"555","line":29,"column":8,"nodeType":"510","messageId":"511","endLine":29,"endColumn":13},{"ruleId":"508","severity":1,"message":"524","line":54,"column":5,"nodeType":"510","messageId":"511","endLine":54,"endColumn":9},{"ruleId":"508","severity":1,"message":"556","line":240,"column":7,"nodeType":"510","messageId":"511","endLine":240,"endColumn":11},{"ruleId":"508","severity":1,"message":"557","line":241,"column":7,"nodeType":"510","messageId":"511","endLine":241,"endColumn":19},{"ruleId":"508","severity":1,"message":"558","line":242,"column":7,"nodeType":"510","messageId":"511","endLine":242,"endColumn":19},{"ruleId":"508","severity":1,"message":"530","line":243,"column":7,"nodeType":"510","messageId":"511","endLine":243,"endColumn":11},{"ruleId":"508","severity":1,"message":"531","line":244,"column":7,"nodeType":"510","messageId":"511","endLine":244,"endColumn":14},{"ruleId":"508","severity":1,"message":"532","line":245,"column":7,"nodeType":"510","messageId":"511","endLine":245,"endColumn":18},{"ruleId":"508","severity":1,"message":"559","line":246,"column":7,"nodeType":"510","messageId":"511","endLine":246,"endColumn":17},{"ruleId":"508","severity":1,"message":"560","line":247,"column":7,"nodeType":"510","messageId":"511","endLine":247,"endColumn":19},{"ruleId":"508","severity":1,"message":"561","line":248,"column":7,"nodeType":"510","messageId":"511","endLine":248,"endColumn":14},{"ruleId":"508","severity":1,"message":"562","line":249,"column":7,"nodeType":"510","messageId":"511","endLine":249,"endColumn":14},{"ruleId":"508","severity":1,"message":"563","line":250,"column":7,"nodeType":"510","messageId":"511","endLine":250,"endColumn":13},{"ruleId":"508","severity":1,"message":"564","line":416,"column":5,"nodeType":"510","messageId":"511","endLine":416,"endColumn":21},{"ruleId":"508","severity":1,"message":"565","line":419,"column":5,"nodeType":"510","messageId":"511","endLine":419,"endColumn":16},{"ruleId":"508","severity":1,"message":"566","line":420,"column":5,"nodeType":"510","messageId":"511","endLine":420,"endColumn":13},{"ruleId":"508","severity":1,"message":"524","line":63,"column":5,"nodeType":"510","messageId":"511","endLine":63,"endColumn":9},{"ruleId":"517","severity":1,"message":"518","line":231,"column":30,"nodeType":"519","messageId":"520","endLine":231,"endColumn":32},{"ruleId":"517","severity":1,"message":"518","line":240,"column":16,"nodeType":"519","messageId":"520","endLine":240,"endColumn":18},{"ruleId":"508","severity":1,"message":"525","line":242,"column":65,"nodeType":"510","messageId":"511","endLine":242,"endColumn":73},{"ruleId":"508","severity":1,"message":"526","line":299,"column":53,"nodeType":"510","messageId":"511","endLine":299,"endColumn":62},{"ruleId":"508","severity":1,"message":"527","line":299,"column":64,"nodeType":"510","messageId":"511","endLine":299,"endColumn":72},{"ruleId":"508","severity":1,"message":"528","line":26,"column":8,"nodeType":"510","messageId":"511","endLine":26,"endColumn":14},{"ruleId":"508","severity":1,"message":"524","line":59,"column":5,"nodeType":"510","messageId":"511","endLine":59,"endColumn":9},{"ruleId":"508","severity":1,"message":"529","line":191,"column":11,"nodeType":"510","messageId":"511","endLine":191,"endColumn":15},{"ruleId":"508","severity":1,"message":"534","line":2,"column":21,"nodeType":"510","messageId":"511","endLine":2,"endColumn":30},{"ruleId":"508","severity":1,"message":"535","line":2,"column":8,"nodeType":"510","messageId":"511","endLine":2,"endColumn":21},{"ruleId":"508","severity":1,"message":"536","line":3,"column":8,"nodeType":"510","messageId":"511","endLine":3,"endColumn":16},{"ruleId":"508","severity":1,"message":"537","line":9,"column":8,"nodeType":"510","messageId":"511","endLine":9,"endColumn":12},{"ruleId":"508","severity":1,"message":"538","line":10,"column":8,"nodeType":"510","messageId":"511","endLine":10,"endColumn":16},{"ruleId":"508","severity":1,"message":"539","line":11,"column":8,"nodeType":"510","messageId":"511","endLine":11,"endColumn":20},{"ruleId":"508","severity":1,"message":"540","line":12,"column":8,"nodeType":"510","messageId":"511","endLine":12,"endColumn":20},{"ruleId":"508","severity":1,"message":"541","line":13,"column":8,"nodeType":"510","messageId":"511","endLine":13,"endColumn":16},{"ruleId":"508","severity":1,"message":"542","line":14,"column":8,"nodeType":"510","messageId":"511","endLine":14,"endColumn":22},{"ruleId":"508","severity":1,"message":"543","line":15,"column":8,"nodeType":"510","messageId":"511","endLine":15,"endColumn":22},{"ruleId":"508","severity":1,"message":"512","line":20,"column":8,"nodeType":"510","messageId":"511","endLine":20,"endColumn":12},{"ruleId":"508","severity":1,"message":"613","line":21,"column":8,"nodeType":"510","messageId":"511","endLine":21,"endColumn":17},{"ruleId":"508","severity":1,"message":"544","line":32,"column":9,"nodeType":"510","messageId":"511","endLine":32,"endColumn":17},{"ruleId":"504","replacedBy":"614"},{"ruleId":"506","replacedBy":"615"},{"ruleId":"508","severity":1,"message":"533","line":2,"column":10,"nodeType":"510","messageId":"511","endLine":2,"endColumn":21},{"ruleId":"517","severity":1,"message":"518","line":37,"column":18,"nodeType":"519","messageId":"520","endLine":37,"endColumn":20},{"ruleId":"508","severity":1,"message":"545","line":2,"column":8,"nodeType":"510","messageId":"511","endLine":2,"endColumn":32},{"ruleId":"508","severity":1,"message":"546","line":3,"column":8,"nodeType":"510","messageId":"511","endLine":3,"endColumn":30},{"ruleId":"508","severity":1,"message":"616","line":4,"column":8,"nodeType":"510","messageId":"511","endLine":4,"endColumn":31},"no-native-reassign",["617"],"no-negated-in-lhs",["618"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'logo' is defined but never used.","'status' is assigned a value but never used.","'email' is assigned a value but never used.","'userName' is assigned a value but never used.","'FormHelperText' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'visaUniversity' is assigned a value but never used.","'age' is assigned a value but never used.","'alertMessage' is assigned a value but never used.","'rows' is assigned a value but never used.","'UserName' is assigned a value but never used.","'allBranch' is assigned a value but never used.","'BranchId' is assigned a value but never used.","'Drawer' is defined but never used.","'list' is assigned a value but never used.","'city' is assigned a value but never used.","'address' is assigned a value but never used.","'description' is assigned a value but never used.","'useSelector' is defined but never used.","'appConfig' is defined but never used.","'DashboardIcon' is defined but never used.","'AppsIcon' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemText' is defined but never used.","'Collapse' is defined but never used.","'ExpandLessIcon' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'navigate' is assigned a value but never used.","'LocalLibraryOutlinedIcon' is defined but never used.","'TrendingUpOutlinedIcon' is defined but never used.","'Snackbar' is defined but never used.","'Grid' is defined but never used.","'TextField' is defined but never used.","'CircularProgress' is defined but never used.","'Checkbox' is defined but never used.","'EditIcon' is defined but never used.","'Button' is defined but never used.","'CloseIcon' is defined but never used.","'Alert' is defined but never used.","'name' is assigned a value but never used.","'emailAddress' is assigned a value but never used.","'mobileNumber' is assigned a value but never used.","'errorSnack' is assigned a value but never used.","'errorMessage' is assigned a value but never used.","'isSnack' is assigned a value but never used.","'Message' is assigned a value but never used.","'isload' is assigned a value but never used.","'onSelectAllClick' is assigned a value but never used.","'numSelected' is assigned a value but never used.","'rowCount' is assigned a value but never used.",["617"],["618"],"'userLogout' is defined but never used.","'access' is assigned a value but never used.","'defaultstatecode' is assigned a value but never used.","'facilityname' is assigned a value but never used.","'forcepasswordchange' is assigned a value but never used.","'gstnumber' is assigned a value but never used.","'message' is assigned a value but never used.","'role' is assigned a value but never used.","'username' is assigned a value but never used.","'relogin' is assigned a value but never used.","'Container' is defined but never used.","'MenuItem' is defined but never used.","'Table' is defined but never used.","'TableBody' is defined but never used.","'TableContainer' is defined but never used.","'TablePagination' is defined but never used.","'Toolbar' is defined but never used.","'KeyboardTimePicker' is defined but never used.","'paymentHeadCells' is assigned a value but never used.","'EnhancedTableHead' is defined but never used.","'getComparator' is defined but never used.","'stableSort' is defined but never used.","no-dupe-keys","Duplicate key 'selected'.","ObjectExpression","'facilityid' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'instanceId' is assigned a value but never used.","'totalVehicle' is assigned a value but never used.","'endDate' is assigned a value but never used.","'orderBy' is assigned a value but never used.","'order' is assigned a value but never used.","'facilityName' is assigned a value but never used.","'totalCheckIn' is assigned a value but never used.","'totalCheckOut' is assigned a value but never used.","'totalCash' is assigned a value but never used.","'totalOnline' is assigned a value but never used.","'totalNoCash' is assigned a value but never used.","'totalAmount' is assigned a value but never used.","'emptyRows' is assigned a value but never used.","'isSelected' is assigned a value but never used.","'smallLogo' is defined but never used.",["617"],["618"],"'DescriptionOutlinedIcon' is defined but never used.","no-global-assign","no-unsafe-negation"]